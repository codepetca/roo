{
	"snapshotMetadata": {
		"fetchedAt": "2025-08-27T14:54:12.330Z",
		"source": "google-classroom",
		"version": "1.0.0",
		"expiresAt": "2025-08-27T15:24:12.330Z"
	},
	"globalStats": {
		"ungradedSubmissions": 573,
		"totalStudents": 25,
		"averageGrade": 95.26,
		"totalClassrooms": 1,
		"totalAssignments": 30,
		"totalSubmissions": 622
	},
	"teacher": {
		"name": "Stewart Chan",
		"isTeacher": true,
		"displayName": "Stewart Chan",
		"email": "stewart.chan@gapps.yrdsb.ca"
	},
	"classrooms": [
		{
			"studentCount": 25,
			"teacherEmail": "stewart.chan@gapps.yrdsb.ca",
			"courseGroupEmail": "11_CS_P5_05_9ce8805f@gapps.yrdsb.ca",
			"assignments": [
				{
					"creationTime": "2025-06-06T18:06:04.956Z",
					"dueDate": "2025-06-12T10:59:00.000Z",
					"description": "1. Clone the repositories.\n2. Play the games.\n3. Give feedback:\n- Create a Github Issue for the 2 Repositories below yours in the list below. You may leave more if you like.\n- Leave a short description of the issue or words of encouragement. Keep your comments positive and constructive.\n- Perhaps mention a bug you found, improvements and enhancements you think would make the game better.\n- Keep issues to a single problem or comment. Create a separate issue if you have more than one concern or comment.\n\n\nhttps://github.com/yrdsb-peths/final-project-final-abithan-clark.git\nhttps://github.com/yrdsb-peths/final-project-final-cayden-john.git\nhttps://github.com/yrdsb-peths/final-project-final-clifton-owenk.git\nhttps://github.com/yrdsb-peths/final-project-final-edward-mark.git\nhttps://github.com/yrdsb-peths/final-project-final-jiayu-saiful.git\nhttps://github.com/yrdsb-peths/final-project-final-kelton-joe.git\nhttps://github.com/yrdsb-peths/final-project-final-leo-steven.git\nhttps://github.com/yrdsb-peths/final-project-final-lionson-moses.git\nhttps://github.com/yrdsb-peths/final-project-final-nereyal-jennifer.git\nhttps://github.com/yrdsb-peths/final-project-final-owen-nathan.git\nhttps://github.com/yrdsb-peths/final-project-sena-carmen.git\nhttps://github.com/yrdsb-peths/final-project-veznu-kian.git\nhttps://github.com/yrdsb-peths/final-project-final-vivian-kalkie.git\n\n",
					"updateTime": "2025-06-11T17:35:38.108Z",
					"title": "Play Games / Give Github Issue Feedback",
					"maxScore": 100,
					"type": "written",
					"points": 100,
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/details",
					"id": "781838309528",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 16,
						"pending": 16
					},
					"categoryId": "737123849299"
				},
				{
					"creationTime": "2025-01-31T19:15:27.735Z",
					"dueDate": "2025-06-13T10:59:00.000Z",
					"description": "Please reflect on your accomplishments and challenges.This will count towards your final project. \nIt is due a few days after the main project.",
					"updateTime": "2025-06-06T12:00:32.575Z",
					"maxScore": 10,
					"title": "Project and Course Reflection",
					"type": "quiz",
					"points": 10,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1yw87HUz56gp9sncPz1RTK9eWtLvfWtgbvC57KBsD6VM",
								"title": "Project and Course Reflection",
								"formUrl": "https://docs.google.com/forms/d/1yw87HUz56gp9sncPz1RTK9eWtLvfWtgbvC57KBsD6VM/edit",
								"thumbnailUrl": "https://lh5.googleusercontent.com/E9jIDQGpalqNVV-WIJVnkOvzopDH5lXXlFIYWi8yc1s2u9RSTrUPk5cXqlKSj_iO9BYC45uTOjVB3qs=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/details",
					"id": "737123849512",
					"state": "PUBLISHED",
					"quizData": {
						"formId": "1yw87HUz56gp9sncPz1RTK9eWtLvfWtgbvC57KBsD6VM",
						"allowResponseEditing": false,
						"totalQuestions": 0,
						"collectEmailAddresses": false,
						"questions": [],
						"description": "Thank you for your hard work throughout the course!  Now take a moment to reflect on your experiences.\nThis form is editable - your partial response will be saved.  Feel free to add to it at a different time.",
						"title": "Project and Course Reflection",
						"createdAt": "2025-08-27T14:36:57.138Z",
						"formUrl": "https://docs.google.com/forms/d/1yw87HUz56gp9sncPz1RTK9eWtLvfWtgbvC57KBsD6VM/edit",
						"totalPoints": 0,
						"isQuiz": false,
						"manualGradingRequired": false,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:36:57.139Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 23,
						"pending": 23
					},
					"categoryId": "737123849299"
				},
				{
					"creationTime": "2025-01-31T19:15:27.307Z",
					"description": "",
					"updateTime": "2025-05-16T17:34:40.147Z",
					"type": "quiz",
					"title": "Unit 5 Test: Arrays",
					"maxScore": 100,
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1g8ngqCQ6bS5XR7J5wgxHocZjNBTdEEWpK3wEgxtcYZs",
								"responseUrl": "https://docs.google.com/spreadsheets/d/1OOyz0FEhEDzgacXXCO-6eCwxpOMlMB0JlzlqdLaXXmc?resourcekey=&usp=emb&urp=[urp]#gid=941278360",
								"title": "Unit 5 Test: Arrays",
								"formUrl": "https://docs.google.com/forms/d/1g8ngqCQ6bS5XR7J5wgxHocZjNBTdEEWpK3wEgxtcYZs/edit",
								"thumbnailUrl": "https://lh5.googleusercontent.com/3MtiEe8mu3RxlWZn9zgyzM_kj8_UUYqsmuQw_6-7sIpMDsZ2JArmU5Tk0UjIgJXvE1OOgJyrWisIJAY=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/details",
					"state": "PUBLISHED",
					"id": "737123849460",
					"quizData": {
						"allowResponseEditing": false,
						"formId": "1g8ngqCQ6bS5XR7J5wgxHocZjNBTdEEWpK3wEgxtcYZs",
						"totalQuestions": 19,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 0,
								"type": "SHORT_ANSWER",
								"title": "First Name",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 1,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Last Name",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1582023731",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "Implement code using good coding technique based on the given instructions.",
								"type": "UNKNOWN",
								"title": "Coding 1",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1516519039",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 3,
								"description": "",
								"type": "UNKNOWN",
								"title": "The following method returns the sum of all the negative values in the given integer array. Implement this method.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1181929271",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 4,
								"title": "public int sum(int[] arr)",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1597803044",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "Implement code using good coding technique based on the given instructions.",
								"type": "UNKNOWN",
								"title": "Coding 2",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "465992853",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 6,
								"title": "Question 7",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2085913080",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 7,
								"type": "UNKNOWN",
								"title": "Implement method f.  This method returns the sum of the digits of twice the value of d.  You must use remainder division (%) in your implementation.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "227938002",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 8,
								"type": "SHORT_ANSWER",
								"title": "public int f(int d) {",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2095356712",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Example 1:\nif a = {5, 7, 8, 1},  checksum(a) returns true.\n\nExample 2:\nif b = {3, 8, 0, 5, 1, 1}, checksum(b) returns false.  \t",
								"index": 9,
								"title": "Implement the checkSum method.  This method takes an array of single-digit integers representing an account number and returns true if it is a valid account number and false otherwise.  Your implementation must include a call to method f() that you wrote above – don’t re-implement method f(), just call it.",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1974874320",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 10,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "public boolean checkSum(int[] account) {",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1831211179",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 11,
								"description": "Type the answer to each question.  Do NOT include extra words, spaces or punctuation - just give the answer.\nIf the answer is an error, write \"error\".",
								"title": "Short Answer",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1790468900",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 12,
								"title": "Refer to the following code for the next 3 questions.  If there is an error, write \"error\".",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1932462708",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 13,
								"type": "SHORT_ANSWER",
								"title": "Give the value of apple[0]",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1068259913",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 14,
								"description": "",
								"title": "Give the value of banana[3]",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1459496121",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 15,
								"title": "Give the value of apple[4]",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1538827966",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 16,
								"type": "UNKNOWN",
								"title": "Examine this method.  Give the return value of the following method calls.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "545909007",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 17,
								"title": "aMethod({\"a\", \"b\", \"c\"})",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1699885676",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 18,
								"title": "aMethod({\"a\"})",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "446544292",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Unit 5 Test: Arrays",
						"createdAt": "2025-08-27T14:36:58.016Z",
						"formUrl": "https://docs.google.com/forms/d/1g8ngqCQ6bS5XR7J5wgxHocZjNBTdEEWpK3wEgxtcYZs/edit",
						"isQuiz": true,
						"totalPoints": 0,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:36:58.016Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 25,
						"pending": 25
					},
					"categoryId": "737123849297"
				},
				{
					"creationTime": "2025-01-31T19:15:27.563Z",
					"dueDate": "2025-06-11T10:59:00.000Z",
					"description": "Objective\nCreate a game using Greenfoot and GitHub\n\nSetup\nSee the Team Names provided. The first person in each team is the Team Leader.\n\n1. Team Leader accepts the assignment and creates the team with that exact team name.\n\n2. Everyone else joins the correct team.\n\n3. Decide on a workflow. I strongly recommend this workflow:\n- Create a new feature branch for each project change.\n- Pull any changes from the remote onto your computer.\n- Merge the main branch into your feature branch. Fix any merge conflicts in this step.\n- Merge your feature branch back onto the main branch.\n\n\nCriteria and Checklist\nYour game should contain all of the following elements\n\nGame and GamePlay\n- A title screen and end screen\n- Instructions or a tutorial or an intuitive user-friendly interface. The user should know what to do with minimal reading of instructions\n- A scoring or achievement system\n- Some way to motivate the player to continue playing. This could be from an engaging story, score system, increasing difficulty, score board, image rewards, powerups, or some other mechanic that you devise\n- Sound and/or sound effects\n- Some animation that shows the use of arrays\n\nSource Code\n- All classes are capitalized, and have good API descriptions\n- Public methods should have javadoc API comments\n- Good naming of variables, methods, classes\n- Correct use of arrays\n- Code should be organized, correctly formatted and easy to understand. If you feel your code is confusing or complex, include comments to help explain your coding intentions\n- Your code should flow logically and be contained in classes and methods appropriately\n\nGithub\n- You used Github to save and track your project progress\n- You used the correct Github repository link provided\n- There are no issues when I clone your files from the main branch of your respository\n- Your Github history shows that you have regularly commited to the repository\n- Your Readme.md file should summarize your project. What is your project about? How does someone get started playing it? Is there anything the teacher should know (e.g. cheat mode to get to the end screen)\n\nReflection\nThere will be a Google Form to fill out at the end of the course where you respond with a couple paragraphs to questions about your coding experience. What did you find challenging? What coding difficulty did you overcome when creating your game? \n\n\nTips\nIf you are not that confident with your coding skills, consider creating an object-dodging or object-catching game similar to the tutorial.\n\nRemake an existing game that you enjoy playing. Keep it simple. You can always add features to make it more complex.\n\nFind and re-use existing images and code snippets. Give credit to the source in the readme file.\n\nUse good coding technique. Your code should be logical, easy to follow and easy to understand. Add comments where appropriate. You should include Class and method documentation.\n\nMake your game fun and challenging! Try increasing the difficulty as the player progresses through it. Perhaps increase the speed of objects or number of enemies.\n\nYou should be working on this project every day in class. Your commit history should show regular updates. If you feel you are finished before the deadline - you aren't. You can always add features, tweak your code or improve your project in some way.\n\nYour main branch in your repository should compile and execute. You should be working on your test features on a separate branch. Follow a workflow that makes sense.",
					"updateTime": "2025-05-16T17:32:52.640Z",
					"type": "written",
					"title": "Final Project: Your Awesome Game (Team)",
					"maxScore": 100,
					"points": 100,
					"materials": {
						"links": [
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/LdsAy0ZM",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/LdsAy0ZM"
							}
						],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/details",
					"id": "737123849466",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 25,
						"submitted": 25,
						"pending": 0
					},
					"categoryId": "737123849299"
				},
				{
					"creationTime": "2025-03-30T18:49:31.353Z",
					"dueDate": "2025-05-20T10:59:00.000Z",
					"description": "Objective\nRe-create the Hungry Animal game to practice using Github, Greenfoot and a good workflow.\n\nInstructions\nSee the Team Names below. The first person in each team is the Team Leader.\n\n1. Team Leader accepts the assignment and creates the team with that team name, ex: Animal: Brinda Gauri\n\n2. Everyone else joins the correct team.\n\n3. Decide on a workflow. I strongly suggest this workflow:\n- Create a new feature branch for each project change.\n- Pull any changes from the remote onto your computer.\n- Merge the main branch into your feature branch. Fix any merge conflicts in this step.\n- Merge your feature branch back onto the main branch.\n\n4. Make the Game together by deciding who will do what. You can copy your existing code from the other repository to speed things up.\n\n5. After the core game is complete, each person should make an improvement to the project. Keep it simple. Here are some suggestions:\n- improve game play\n- add method javadocs (comments)\n- update the README.md to explain what this project is about\n- find and use better images\n- clean up the project folder\n\n6. Delete your local project and re-clone to check if it will work for others.\n\nTeam Names\n\nAnimal: Abithan Clark\nAnimal: Carmen Sena\nAnimal: Cayden John\nAnimal: Clifton OwenK\nAnimal: Jiayu Saiful\nAnimal: Kelton Joe\nAnimal: Leo Steven\nAnimal: Lionson Moses\nAnimal: Mark Edward\nAnimal: Nereyal Jennifer\nAnimal: OwenL Nathan\nAnimal: Veznu Kian\nAnimal: Vivian Kalkie",
					"updateTime": "2025-05-12T12:03:00.965Z",
					"maxScore": 100,
					"type": "written",
					"title": "Tutorial: Animal (Team)",
					"points": 100,
					"materials": {
						"links": [
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/VXkmphke",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/VXkmphke"
							}
						],
						"youtubeVideos": [
							{
								"alternateLink": "https://www.youtube.com/watch?v=zxaa3X0MihI",
								"id": "zxaa3X0MihI",
								"title": "GF Tutorial - Part 1",
								"thumbnailUrl": "https://i.ytimg.com/vi/zxaa3X0MihI/default.jpg"
							},
							{
								"alternateLink": "https://www.youtube.com/watch?v=TwID9i0Ey6o",
								"id": "TwID9i0Ey6o",
								"title": "GF Tutorial - Part 2",
								"thumbnailUrl": "https://i.ytimg.com/vi/TwID9i0Ey6o/default.jpg"
							},
							{
								"alternateLink": "https://www.youtube.com/watch?v=GT-eFwa4Abc",
								"id": "GT-eFwa4Abc",
								"title": "GF Tutorial - Part 3",
								"thumbnailUrl": "https://i.ytimg.com/vi/GT-eFwa4Abc/default.jpg"
							}
						],
						"driveFiles": [],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/details",
					"id": "763301413402",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 18,
						"pending": 18
					},
					"categoryId": "737123849298"
				},
				{
					"creationTime": "2025-01-31T19:15:26.992Z",
					"description": "",
					"updateTime": "2025-05-08T11:49:13.145Z",
					"type": "quiz",
					"maxScore": 100,
					"title": "Unit 5 Quiz: Arrays (Practice)",
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1C2i7j_BLtX9IX1-Y9GnSrj4G0xcnaH4D4XaXKqig080",
								"title": "Unit 5 Quiz: Arrays (Practice)",
								"formUrl": "https://docs.google.com/forms/d/1C2i7j_BLtX9IX1-Y9GnSrj4G0xcnaH4D4XaXKqig080/edit",
								"thumbnailUrl": "https://lh3.googleusercontent.com/l7Z3tt8zoPSlt2V88J2TIV-aN3-GgGA5WcesZG5VHg5jYThv_-gibCbzUjDieVOzpGj0BXhuCBWWySU=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/details",
					"state": "PUBLISHED",
					"id": "737123849449",
					"quizData": {
						"formId": "1C2i7j_BLtX9IX1-Y9GnSrj4G0xcnaH4D4XaXKqig080",
						"allowResponseEditing": false,
						"totalQuestions": 9,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 0,
								"description": "",
								"title": "First Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"title": "Last Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "146346952",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "",
								"title": "Coding",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "166358051",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 3,
								"description": "",
								"title": "Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1179368809",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 4,
								"type": "UNKNOWN",
								"title": "Implement this method that returns the largest double of array a.  Implement this method without using Arrays.sort().",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "722667068",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "",
								"title": "public double largest(double[] a)",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1690893763",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Recall the Randomizer class in codehs:\nint n = Randomizer.nextInt(low, high)",
								"index": 6,
								"type": "UNKNOWN",
								"title": "Create an integer array, nums, using an initializer list with the following values:  1, 4, -2, 5.  Then loop through the array adding a random value between 1 and 10 to each element.  Output the largest element of the array by calling the method from above – just called the 'largest' method without re-implementing it.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1448897279",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 7,
								"title": "Question 8",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1203056606",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 8,
								"type": "SHORT_ANSWER",
								"title": "Write a brief and concise API description for this method.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "204480832",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Unit 5 Quiz: Arrays (Practice)",
						"createdAt": "2025-08-27T14:37:02.491Z",
						"formUrl": "https://docs.google.com/forms/d/1C2i7j_BLtX9IX1-Y9GnSrj4G0xcnaH4D4XaXKqig080/edit",
						"totalPoints": 0,
						"isQuiz": true,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:02.491Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 14,
						"pending": 14
					},
					"categoryId": "737123849297"
				},
				{
					"creationTime": "2025-01-31T19:15:26.677Z",
					"description": "",
					"updateTime": "2025-05-06T17:33:15.267Z",
					"maxScore": 100,
					"title": "Unit 4 Test: Classes and Objects",
					"type": "quiz",
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "11EFaLxBKpPewL_xwmZJKkPDoZ9mueM_olMATwHhIItI",
								"title": "Unit 4 Test: Classes and Objects",
								"formUrl": "https://docs.google.com/forms/d/11EFaLxBKpPewL_xwmZJKkPDoZ9mueM_olMATwHhIItI/edit",
								"thumbnailUrl": "https://lh4.googleusercontent.com/faYLs8wbKumPz3RWlqLCfo42YrBq9bL9iPWv7IARjXLxaduIn9K5Z60GhwoA7H4lxr8_EZJ87t_7bOE=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/details",
					"id": "737123849444",
					"state": "PUBLISHED",
					"quizData": {
						"formId": "11EFaLxBKpPewL_xwmZJKkPDoZ9mueM_olMATwHhIItI",
						"allowResponseEditing": false,
						"totalQuestions": 39,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 0,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "First Name",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"title": "Last Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1889832723",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "You are creating software for a department store that sells many products. The software will be used to track inventory and costs of various items in the store. ",
								"index": 2,
								"title": "Implementing a Class",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2078997219",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 3,
								"description": "- Begin by writing the class signature for the 'Product' class.\n- Create a public class variable to keep track of the total number of items in the store.\n- Create a property for the cost of the product that can store decimal values.\n- The constructor takes one argument to set the cost of the product.\n- Whenever an instance of product is created, the total number of items should increase by one.\n- Implement a 'tax' method that returns 10% of the cost of the product.\n- Overload the 'tax' method that takes a parameter for the percentage of the tax and returns the correct amount of tax.",
								"title": "Implement the 'Product' class based on the  following instructions:",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "366274414",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 4,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Implement the Product class here:",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "164341530",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "- The 'Toy' class inherits from the 'Product' class.\n- Create a property to store the minimum age requirement to use the toy\n- The constructor should set the cost in the super class and set the minimum age property\n- Override an appropriate 'tax' method in the super class to return 13% of the cost.",
								"type": "UNKNOWN",
								"title": "Implement the 'Toy' class based on the following instructions:",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1473270258",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 6,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Implement the Toy class here:",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "30635580",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 7,
								"description": "You create a program for a small school that keeps track of student enrolment.",
								"title": "Coding",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1514698021",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 8,
								"description": "",
								"type": "UNKNOWN",
								"title": "This is the documentation (API) for your program:  ",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "930631685",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 9,
								"type": "UNKNOWN",
								"title": "These are the courses offered and the students who are attending the school.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1843605108",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "- Create an instance of the math course with the data given in the table above.\n- Create 3 instances of Student with the data given in the table above.\n- Attempt to enrol each student into the course, outputting 'true' if successful and 'false' otherwise.  'Enrol' using the provided API\n- Output the course name as well as the names of all students who are 15 or older.\n\n- Instantiate a new course, 'comp', with course name 'computers' and a default enrolment limit.\n- Use a ‘for’ loop to create and enrol 10 random students into comp, outputting 'true' if successful and 'false' if not.\n",
								"index": 10,
								"title": "Implement the code for a 'run' method based on the following instructions.  You MUST use the API when possible.",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1623924935",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 11,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Implement your code here:",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "573669557",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 12,
								"description": "Give the best answer.",
								"type": "UNKNOWN",
								"title": "True or False",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1178824278",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 13,
								"description": "",
								"title": "Classes are templates or blueprints for objects.",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2053693293",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 14,
								"title": "Classes are the same as instances.",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2063853450",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 15,
								"description": "",
								"type": "RADIO",
								"title": "Objects contain state (properties) and behaviours (actions).",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1113187338",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 16,
								"description": "",
								"type": "RADIO",
								"title": "Class names should be capitalized (first letter is capital).",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1511715346",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 17,
								"title": "A constructor is called whenever an object is instantiated.",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "449687449",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 18,
								"description": "",
								"title": "A superclass should call the constructor of a subclass using the 'super' keyword.",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1986838836",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 19,
								"title": "This is a valid signature for an accessor/getter:   public void getName()",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "935896141",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 20,
								"type": "RADIO",
								"title": "The is a valid signature for a mutator/setter:   public void setX(int x)",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "19708928",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 21,
								"type": "RADIO",
								"title": "A method with 'private' visibility can be called from a client class.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2095433437",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 22,
								"type": "RADIO",
								"title": "Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "653201073",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 23,
								"title": "When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1415186218",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 24,
								"description": "",
								"type": "RADIO",
								"title": "When you pass an object as an argument to a method, java makes a copy of the object",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "626227223",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "The questions in this section refer to the following code:",
								"index": 25,
								"title": "Multiple Choice",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1696397703",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 26,
								"title": "Examine this code.  All questions in this section refer to this code.",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2013227707",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 27,
								"description": "",
								"type": "RADIO",
								"title": "Which is an instance method?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "222171300",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 28,
								"description": "",
								"title": "'totalDogs' is called a(n):",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "908141785",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 29,
								"description": "",
								"title": "Which of the following belongs to the instance and not the class?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "163913983",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 30,
								"description": "",
								"type": "RADIO",
								"title": "Which of the following is a valid Constructor signature for this class?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2139201164",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 31,
								"description": "",
								"type": "RADIO",
								"title": "'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2135321668",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 32,
								"description": "",
								"type": "RADIO",
								"title": "The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "466456778",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 33,
								"type": "RADIO",
								"title": "What is the purpose of the 'public String toString()' method of a class?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1056532495",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 34,
								"title": "An instance method...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1682490432",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 35,
								"title": "What keyword to you use to make a class method?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1723164369",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 36,
								"title": "Which of these is NOT a call to a class method?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1434975788",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 37,
								"title": "The Integer class in java is more commonly referred to as a",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1335005968",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 38,
								"title": "You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1121757880",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Unit 4 Test: Classes and Objects",
						"createdAt": "2025-08-27T14:37:04.551Z",
						"formUrl": "https://docs.google.com/forms/d/11EFaLxBKpPewL_xwmZJKkPDoZ9mueM_olMATwHhIItI/edit",
						"isQuiz": true,
						"totalPoints": 0,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:04.551Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 20,
						"pending": 20
					},
					"categoryId": "737123849296"
				},
				{
					"creationTime": "2025-03-30T18:49:18.283Z",
					"dueDate": "2025-05-12T10:59:00.000Z",
					"description": "1. Click the link below to accept the Github Assignment. You will get a link to your project repository.\n2. Clone the repository.\n3. Follow the video to create this game. Use good Github techniques.\n\nThe Hungry Elephant\nThe player moves an elephant to eat apples that fall from the sky.\nRefer to this 3-part video tutorial for creating your Greenfoot game.\nPart 1: https://youtu.be/zxaa3X0MihI\nPart 2: https://youtu.be/TwID9i0Ey6o\nPart 3: https://youtu.be/GT-eFwa4Abc\n\nVideo time of lessons in the videos:\n\nPART 1 - Basics\n1.1 Creating an Object from the Visual Interface (0:05)\n1.2 Creating an Object in Code (1:17)\n1.3 Reading Greenfoot API (2:44)\n1.4 Getting Keyboard Input (5:11)\n1.5 Detecting Object Collisions (7:02)\n1.6 Generating Random Numbers (8:17)\n1.7 Spawning new Objects (11:14)\n1.8 Keeping Score with a Label (13:22)\n1.9 Ending the Game (17:58)\n\nPART 2 - Enhancements\n2.1 Changing the Background Image (0:04)\n2.2 Adding Sound (1:03)\n2.3 Using Sprites and Spritesheets (3:39)\n2.4 Creating Images in Code using the 'GreenfootImage' class (7:33)\n2.5 Animating Images (10:05)\n2.6 Resizing Images in Code (14:02)\n2.7 Mirroring Images (15:13)\n2.8 Using a Simple Timer (19:56)\n2.9 Making Image Backgrounds Transparent (22:48)\n\nPART 3 - Final Touches\n3.1 Creating a Title Screen and Switching Worlds (0:04)\n3.2 Adding Objects from the Visual Interface and Saving the World (3:54)\n3.3 Using Unicode Characters in Your Strings (5:29)\n3.4 Making the Game more Challenging and Fun (6:11)\n3.5 Exporting the Game to a stand-alone JAR file (8:43)  <-- Disregard",
					"updateTime": "2025-05-06T13:12:40.291Z",
					"maxScore": 100,
					"title": "Tutorial: Animal (Solo)",
					"type": "written",
					"points": 100,
					"materials": {
						"links": [
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/e6Ph-hSz",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/e6Ph-hSz"
							}
						],
						"youtubeVideos": [],
						"driveFiles": [
							{
								"title": "images",
								"alternateLink": "https://drive.google.com/drive/folders/1t-K8a3rO649HCMwSB53kf13N1lrQ5AHD",
								"id": "1t-K8a3rO649HCMwSB53kf13N1lrQ5AHD"
							},
							{
								"title": "sounds",
								"alternateLink": "https://drive.google.com/drive/folders/17X97s7wQGBdp3iEdpvdXFz6LHa7QbXx6",
								"id": "17X97s7wQGBdp3iEdpvdXFz6LHa7QbXx6"
							}
						],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/details",
					"state": "PUBLISHED",
					"id": "763299790061",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 22,
						"pending": 22
					},
					"categoryId": "737123849298"
				},
				{
					"creationTime": "2025-01-31T19:15:26.789Z",
					"dueDate": "2025-05-12T10:59:00.000Z",
					"description": "This is the final topic of this course!\nDo only these 3 Lessons:\n\n5.1  What are data structures?\n5.2  Introduction to Arrays\n5.3  Using Arrays\n\n(We will finish the data structures unit in grade 12 CS)",
					"updateTime": "2025-05-05T11:49:51.084Z",
					"type": "written",
					"maxScore": 100,
					"title": "Unit 5: Arrays",
					"points": 100,
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/details",
					"id": "737123849446",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 21,
						"pending": 21
					},
					"categoryId": "737123849297"
				},
				{
					"creationTime": "2025-01-31T19:15:26.560Z",
					"description": "",
					"updateTime": "2025-04-28T11:46:40.664Z",
					"title": "Unit 4 Quiz: Classes and Objects (Practice)",
					"maxScore": 100,
					"type": "quiz",
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1PbgBC5qcy6yNjnd6baI1SR3VDU2VStWjXPIYwA-3uU8",
								"title": "Unit 4 Quiz: Classes and Objects",
								"formUrl": "https://docs.google.com/forms/d/1PbgBC5qcy6yNjnd6baI1SR3VDU2VStWjXPIYwA-3uU8/edit",
								"thumbnailUrl": "https://lh6.googleusercontent.com/0IPTk9JKAvl0g9bvFNBAXDVVamU0E1hE4Acf29fKw-5263GSntaGUZzCwtMhvqFR7dL0nQ2MQcIQpck=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/details",
					"id": "737123849441",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 19,
						"pending": 19
					},
					"quizData": {
						"allowResponseEditing": true,
						"formId": "1PbgBC5qcy6yNjnd6baI1SR3VDU2VStWjXPIYwA-3uU8",
						"totalQuestions": 30,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 0,
								"title": "First Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 1,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Last Name",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2077191962",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "Implement code from the given information.\nCode clarity, proper indenting and formatting is important.",
								"type": "UNKNOWN",
								"title": "Coding: Implementing a Class",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1496206301",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "- Write the class signature for the 'Vehicle' class\n- Create a property to identify if the vehicle is on (true) or off (false)\n- Create a String property to identify the type of vehicle\n- Implement the Constructor.  The constructor has one parameter that sets the type of vehicle\n- Implement a 'start' method that starts the vehicle by turning it on",
								"index": 3,
								"type": "UNKNOWN",
								"title": "You are creating a car-simulation program.  Implement the 'Vehicle' class by following these instructions:",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1762711895",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 4,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "// The Vehicle Class",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "16073413",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "- The 'Car' class inherits from the 'Vehicle' class.\n- The constructor for the 'Car' class calls the constructor in the super class and sets the vehicle type to 'Car'\n- Override the 'start' method.  The overridden method should call the 'start' method in the superclass AND output \"Vroom!\" to the output window",
								"title": "Implement the 'Car' class according to the following instructions:",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "244400301",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 6,
								"title": "// The Car Class",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "710361135",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 7,
								"description": "",
								"title": "Coding: Implementing a Program",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "55214371",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 8,
								"description": "",
								"type": "UNKNOWN",
								"title": "You are creating a program to keep track of customers for your mother’s ice cream store.  The following is the API for two classes in your program that have been implemented: 'Store' and 'Customer'",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1575438677",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 9,
								"title": "Customer information.",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "30234093",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "- instantiate a store object (create a new instance of Store)\n- create customer objects according to the information in the above table\n- add the customer objects to the store\n- output the names of all of the customers\n- clear the store of all customers",
								"index": 10,
								"type": "UNKNOWN",
								"title": "Given the above customer information, implement the run() method by doing the following.  Use the API whenever possible.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "247982444",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 11,
								"title": "public void run() {",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "314423726",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 12,
								"description": "Give the best answer",
								"type": "UNKNOWN",
								"title": "Multiple Choice",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "660732078",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 13,
								"description": "",
								"title": "A Java object is...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "537322349",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 14,
								"description": "",
								"title": "This code:  Point p = new Point(5,6);",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1478925035",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 15,
								"type": "RADIO",
								"title": "A class is...",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "40228172",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 16,
								"description": "",
								"type": "RADIO",
								"title": "Which statement is true?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "865293317",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 17,
								"description": "",
								"type": "RADIO",
								"title": "What is the purpose of the 'public String toString()' method of a class?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "961452808",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 18,
								"description": "",
								"title": "Being a client of a class means that...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1418642361",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 19,
								"title": "A constructor...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1777063332",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 20,
								"type": "RADIO",
								"title": "This is a constructor: public Student(String FN, String LN);  Which is false?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1650844180",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 21,
								"description": "",
								"title": "An instance variable stores data that belongs to...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1891258306",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 22,
								"description": "",
								"title": "An instance method...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1674879071",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 23,
								"description": "",
								"type": "RADIO",
								"title": "Which of these could be a 'getter' method?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "113382383",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 24,
								"description": "",
								"title": "Which of these is most likely a setter method?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1282097947",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 25,
								"description": "",
								"title": "You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "685512451",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 26,
								"description": "",
								"title": "What keyword to you use to make a method or variable belong to the class?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "698047528",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 27,
								"type": "RADIO",
								"title": "A variable that belongs to the class is called a(n)",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1902677445",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 28,
								"description": "",
								"type": "RADIO",
								"title": "Which of these is NOT a call to a class method?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "771091979",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 29,
								"description": "",
								"type": "RADIO",
								"title": "Methods in a class can have the same name as long as their parameters are different.  This is called...",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2056454827",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Unit 4 Quiz: Classes and Objects",
						"createdAt": "2025-08-27T14:37:12.513Z",
						"formUrl": "https://docs.google.com/forms/d/1PbgBC5qcy6yNjnd6baI1SR3VDU2VStWjXPIYwA-3uU8/edit",
						"isQuiz": true,
						"totalPoints": 0,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:12.513Z"
					},
					"categoryId": "737123849296"
				},
				{
					"creationTime": "2025-03-30T18:49:03.356Z",
					"dueDate": "2025-04-28T10:59:00.000Z",
					"description": "Objectives\nCollaborate on creating and improving the DodgeIt game.\nPractice pull requests (PR), merging pull requests and becoming familiar with a good Github workflow.\nEnsure each member has a chance to practice doing each of the steps below.\n\n** PART 1 **\nFirst...\n1. Form a group of 2. Designate one person as the Team Leader.\n2. The Team Leader accepts the assignment and creates the teams using your first names, ex team: Brinda Gauri\n\nNext...\n3. The rest of the team accepts the assignment and joins the correct team.\n4. Re-make the DodgeIt game together. Decide together as a team who will do what. For example: create the Hero, create the enemy, create the game over.\n\n\nSimple Workflow A (Recommended)\n1. Make changes directly on the main branch.\n2. Before pushing changes, pull the latest changes from remote (if they exist). Resolve any merge conflicts.\n3. Push your changes.\n\nRegular Workflow B (If you know what you're doing)\n1. Create an issue in GitHub for each of the changes you want to make or add to the game.\n2. Assign an issue to yourself. This is the one your team agreed that you would do.\n3. Create a new branch, switch to that branch, and make changes to the project to fix the issue.\n4. Create a Pull Request (PR) from your branch back to the main branch.\n5. Have other team member review your Pull Request.\n\n6. Other team member switches to the Pull Request. You should see the tab in Github Desktop.\nNote: Before switching to your team member's pull request, you will either have to commit your unsaved work or Stash it. Stash means to save your changes locally without commiting - you can only have one stash.\n7. Click on the Pull Request tab and choose the pull request that you want to review.\n8. After switching to the PR, open the project and look at and discuss the changes that team member made.\n9. Practice having the team member make more changes to the pull request.\n\n10. Merge the change back onto the main branch.\n\n** PART 2 **\n1. Decide together as a team on 2 or 3 simple changes you want to make to the game. KEEP IT SIMPLE. This could be different images, speeds, adding new objects, etc. Communicate with your team so everyone understands what's going on.\n\n2. Practice by making more changes together.",
					"updateTime": "2025-04-23T12:12:56.743Z",
					"maxScore": 100,
					"title": "Tutorial: DodgeIt (Team)",
					"type": "written",
					"materials": {
						"links": [
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/KszDVqvg",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/KszDVqvg"
							}
						],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/details",
					"id": "753279249829",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 21,
						"pending": 21
					},
					"categoryId": "737123849298"
				},
				{
					"creationTime": "2025-01-31T19:15:25.864Z",
					"dueDate": "2025-04-28T10:59:00.000Z",
					"description": "Do CodeHS Unit 4: Classes and Objects.\n\nComplete all lessons up to and including 4.13: Inheritance.\n\n(Lessons 4.14 and onwards are optional but recommended)",
					"updateTime": "2025-04-17T12:59:17.187Z",
					"maxScore": 100,
					"type": "written",
					"title": "Unit 4: Classes and Objects",
					"points": 100,
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/details",
					"state": "PUBLISHED",
					"id": "737123849410",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 21,
						"pending": 21
					},
					"categoryId": "737123849296"
				},
				{
					"creationTime": "2025-04-15T16:49:25.021Z",
					"dueDate": "2025-04-18T01:00:00.000Z",
					"description": "We're going to Snowman! Are you interested? Please note that we can take a very limited number of students so, if necessary, we will determine a fair way to randomly select from those of you who are interested.\n\nTransportation will be by bus from and back to school.\n\nDate: Thu May 15\nTime: 11:30 - 5:30\nCost: $10\nLocation: Snowman Studios https://www.builtbysnowman.com/",
					"updateTime": "2025-04-17T12:05:54.110Z",
					"title": "Game Studio Field Trip",
					"type": "quiz",
					"maxScore": 100,
					"workType": "MULTIPLE_CHOICE_QUESTION",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/details",
					"id": "767370818619",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 16,
						"pending": 16
					}
				},
				{
					"creationTime": "2025-03-30T18:46:50.815Z",
					"description": "Let's try to create a class website together.",
					"updateTime": "2025-04-15T16:09:57.323Z",
					"title": "Tutorial: Class website (Collab, Optional)",
					"type": "written",
					"maxScore": 100,
					"points": 100,
					"materials": {
						"links": [
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/1Qrnblbx",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/1Qrnblbx"
							},
							{
								"title": "Classblitz",
								"url": "https://2025-spring-p5.netlify.app/",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://2025-spring-p5.netlify.app/"
							}
						],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTY0ODc4/details",
					"state": "PUBLISHED",
					"id": "753279164878",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 2,
						"pending": 2
					},
					"categoryId": "737123849298"
				},
				{
					"creationTime": "2025-03-30T18:48:52.048Z",
					"dueDate": "2025-04-22T10:59:00.000Z",
					"description": "Objective\nFollow the video to learn how to use GitHub and Greenfoot to create a simple game.\n\nSetup Requirements\nEnsure you have:\n1. Created a GitHub account\n2. Downloaded and installed GitHub Desktop\n3. Downloaded and installed Greenfoot\n\nNotes\nThe focus of this tutorial is to become familiar with using GitHub to manage a coding project.\nCreate many small commits instead few large commits.\nExperiment by changing actor images or modifying the code.\nExperiment by practicing your Github skills such as branching.\nEnsure your project's main branch can execute.",
					"updateTime": "2025-04-14T12:03:04.268Z",
					"maxScore": 100,
					"type": "written",
					"title": "Tutorial: Dodge It (Solo)",
					"points": 100,
					"materials": {
						"links": [
							{
								"title": "Tutorial: DodgeIt - YouTube",
								"url": "https://youtube.com/live/lnh4UEZYujM?feature=share",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://youtube.com/live/lnh4UEZYujM?feature%3Dshare"
							},
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/t3Lc2YFQ",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/t3Lc2YFQ"
							}
						],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/details",
					"state": "PUBLISHED",
					"id": "753279355808",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 22,
						"pending": 22
					},
					"categoryId": "737123849298"
				},
				{
					"creationTime": "2025-03-30T18:45:30.972Z",
					"description": "Accept the assignment and follow the instructions in the README.md file.",
					"updateTime": "2025-04-04T13:06:34.793Z",
					"title": "Tutorial: Github Pages (Solo)",
					"type": "written",
					"maxScore": 100,
					"points": 100,
					"materials": {
						"links": [
							{
								"title": "Sign in to GitHub · GitHub",
								"url": "https://classroom.github.com/a/PaMQFwE2",
								"thumbnailUrl": "https://classroom.google.com/webthumbnail?url=https://classroom.github.com/a/PaMQFwE2"
							}
						],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/details",
					"id": "753279182762",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 9,
						"pending": 9
					},
					"categoryId": "737123849298"
				},
				{
					"creationTime": "2025-01-31T19:15:25.718Z",
					"description": "",
					"updateTime": "2025-04-01T17:39:37.594Z",
					"title": "Unit 3 Test: Strings and Methods",
					"type": "quiz",
					"maxScore": 100,
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1xkGWjTo6Jf-U7Now9DszBNHBvyaDxDEHrRbiTUchlrk",
								"title": "Unit 3 Test: Strings and Methods",
								"formUrl": "https://docs.google.com/forms/d/1xkGWjTo6Jf-U7Now9DszBNHBvyaDxDEHrRbiTUchlrk/edit",
								"thumbnailUrl": "https://lh5.googleusercontent.com/am9RFIBKxkT_1BV7zbXli3aAgbtADZMDOk31dW0X99r7ggcebkF1z1Z2sR1_w5yFubXYwZm_fRmmqGc=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/details",
					"state": "PUBLISHED",
					"id": "737123849407",
					"quizData": {
						"allowResponseEditing": false,
						"formId": "1xkGWjTo6Jf-U7Now9DszBNHBvyaDxDEHrRbiTUchlrk",
						"totalQuestions": 33,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 0,
								"type": "SHORT_ANSWER",
								"title": "First Name",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"title": "Last Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1241556004",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "Implement the following methods, using the given method signature and method description.\nYou do NOT need to include a 'run' method - just create and implement the required method.\nProper coding technique, indenting and formatting is required.",
								"type": "UNKNOWN",
								"title": "Coding",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "879420619",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 3,
								"type": "SHORT_ANSWER",
								"title": "1.  Implement this method that reverses the given string and returns it.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1472004329",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 4,
								"type": "SHORT_ANSWER",
								"title": "2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "9604654",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "",
								"title": "3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "500703208",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "char charAt(int index)\n    returns the character in the String\n    at the specified index.\n\nboolean equals(String other)\n    returns whether this string is equal\n    to a different String other\n\nboolean equalsIgnoreCase(String other)\n    returns whether this string is equal\n    to a different String other, ignoring\n    differences in upper and lower case\n\nint indexOf(char ch)\n    returns the index within this String\n    of the first occurance of the specified\n    character ch. If ch does not exist in\n    this String, -1 is returned\n\nint indexOf(String str)\n    returns the index within this String\n    of the first occurance of the specified\n    substring str. If str does not exist\n    inside this String, -1 is returned\n\nint length()\n    returns the length of this String\n\nString substring(int beginIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the end of the string\n\nString substring(int beginIndex, int endIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the specified endIndex.\n    The substring includes the character\n    at beginIndex, but does not include\n    the character at endIndex.\n\nboolean startsWith(String str)\n    returns true if this String starts\n    with the specified String str,\n    false otherwise\n\nboolean endsWith(String str)\n    returns true if this String ends\n    with the specified String str,\n    false otherwise\n\nString toLowerCase()\n    returns a new String containing\n    the same characters as this String\n    converted to lower case\n\nString toUpperCase()\n    returns a new String containing\n    the same characters as this String\n    converted to upper case\n\nString trim()\n    returns a new String with all leading\n    and trailing white spaces removed",
								"index": 6,
								"title": "String Methods",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1939804461",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "// For example\nstatic boolean isUpperCase(char ch)\n// Usage\nCharacter.isUpperCase('A') // returns true\n\n// Methods\nstatic boolean isUpperCase(char ch)\n    returns true if ch is an uppercase character,\n    false otherwise\n\nstatic boolean isLowerCase(char ch)\n    returns true if ch is a lowerspace character,\n    false otherwise\n\nstatic boolean isDigit(char ch)\n    returns true if ch is a digit (a number),\n    false otherwise\n\nstatic boolean isLetter(char ch)\n    returns true if ch is a letter, false otherwise\n\nstatic boolean isLetterOrDigit(char ch)\n    returns true if ch is either a letter or a digit,\n    false otherwise\n\nstatic boolean isWhitespace(char ch)\n    returns true if ch is a whitespace character\n    (i.e. space or new line), false otherwise\n\nstatic char toUpperCase(char ch)\n    returns the uppercase version of ch\n\nstatic char toLowerCase(char ch)\n    returns the lowercase version of ch",
								"index": 7,
								"title": "Character Methods",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "441108292",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 8,
								"description": "Examine the code and answer the following questions.",
								"title": "Short Answer",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "656099332",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 9,
								"description": "",
								"type": "UNKNOWN",
								"title": "Question 10",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "863423074",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 10,
								"title": "Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1227964794",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 11,
								"type": "SHORT_ANSWER",
								"title": "Give the value returned by this method call:  methodA(\"river\", \"r\")",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1070185820",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 12,
								"type": "SHORT_ANSWER",
								"title": "Give the value returned by this method call:  methodA(\"mississippi\", \"s\")",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "629889648",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 13,
								"description": "Give the best answer",
								"type": "UNKNOWN",
								"title": "Multiple Choice",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1376178858",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 14,
								"type": "RADIO",
								"title": "All of the following are parts of a method signature except",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "127641630",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 15,
								"description": "",
								"title": "A method that doesn't return a value has what return type?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "519517732",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 16,
								"description": "",
								"type": "RADIO",
								"title": "A method parameter is",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1272774758",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 17,
								"title": "The result of a method is called",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "714694292",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 18,
								"description": "",
								"title": "A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1220237495",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 19,
								"title": "In general, when documenting a method, you should mention",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "743791650",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 20,
								"title": "Which of the following should you use to get the numerical representation of the character '@'? ",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "694551855",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 21,
								"description": "",
								"title": "During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "701035016",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 22,
								"title": "Which method description matches the given code?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "445725592",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 23,
								"description": "",
								"type": "RADIO",
								"title": "Which method description matches the given code?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1004147406",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 24,
								"description": "",
								"type": "RADIO",
								"title": "Which method description matches the given code?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2124821594",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 25,
								"description": "",
								"type": "RADIO",
								"title": "Which method description matches the given code?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1677160781",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 26,
								"description": "",
								"type": "RADIO",
								"title": "Which method description matches the given code?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2044272869",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 27,
								"type": "UNKNOWN",
								"title": "The remaining questions are conditions that refer to this code snippet. Indicate if the condition is true or false",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "34644160",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 28,
								"description": "",
								"type": "RADIO",
								"title": "w.length() == 5",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1300275469",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 29,
								"type": "RADIO",
								"title": "w.equals(x)",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "281744460",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 30,
								"type": "RADIO",
								"title": "x.charAt(2) == y.charAt(2)",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2073133338",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 31,
								"description": "",
								"type": "RADIO",
								"title": "w.substring(0,5).equals(z.substring(6))",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "803178508",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 32,
								"type": "RADIO",
								"title": "w.endsWith(x.toLowerCase().trim())",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "4964988",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Unit 3 Test: Strings and Methods",
						"createdAt": "2025-08-27T14:37:19.664Z",
						"formUrl": "https://docs.google.com/forms/d/1xkGWjTo6Jf-U7Now9DszBNHBvyaDxDEHrRbiTUchlrk/edit",
						"totalPoints": 0,
						"isQuiz": true,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:19.664Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 25,
						"pending": 25
					},
					"categoryId": "737123279380"
				},
				{
					"creationTime": "2025-01-31T19:15:25.607Z",
					"description": "",
					"updateTime": "2025-03-27T12:03:42.328Z",
					"type": "quiz",
					"title": "Unit 3 Quiz: Strings and Methods (Practice)",
					"maxScore": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1CEMDVSI68nmAGcBlwH7wPLjK7GG0kRSUvVIkbXeVbd0",
								"title": "Quiz: Strings and Methods",
								"formUrl": "https://docs.google.com/forms/d/1CEMDVSI68nmAGcBlwH7wPLjK7GG0kRSUvVIkbXeVbd0/edit",
								"thumbnailUrl": "https://lh5.googleusercontent.com/G_tM_qsJaNPXwk_zpaQz0h-ivRVtj-Mycf8EIgq3nWfCmyID3Xlf244BCvOI5e9YxDyPNabrTkVYj4U=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/details",
					"id": "737123849405",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 20,
						"pending": 20
					},
					"quizData": {
						"formId": "1CEMDVSI68nmAGcBlwH7wPLjK7GG0kRSUvVIkbXeVbd0",
						"allowResponseEditing": true,
						"totalQuestions": 22,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 0,
								"description": "",
								"title": "First Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"title": "Last Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1194784005",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "Implement the following methods, using the given method signature and method description.\nYou do NOT need to include a 'run' method - just create and implement the required method.\nProper coding technique, indenting and formatting is required.\n",
								"title": "Coding",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1405805568",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 3,
								"type": "SHORT_ANSWER",
								"title": "1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1319874956",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 4,
								"title": "2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "119686399",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "char charAt(int index)\n    returns the character in the String\n    at the specified index.\n\nboolean equals(String other)\n    returns whether this string is equal\n    to a different String other\n\nboolean equalsIgnoreCase(String other)\n    returns whether this string is equal\n    to a different String other, ignoring\n    differences in upper and lower case\n\nint indexOf(char ch)\n    returns the index within this String\n    of the first occurance of the specified\n    character ch. If ch does not exist in\n    this String, -1 is returned\n\nint indexOf(String str)\n    returns the index within this String\n    of the first occurance of the specified\n    substring str. If str does not exist\n    inside this String, -1 is returned\n\nint length()\n    returns the length of this String\n\nString substring(int beginIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the end of the string\n\nString substring(int beginIndex, int endIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the specified endIndex.\n    The substring includes the character\n    at beginIndex, but does not include\n    the character at endIndex.\n\nboolean startsWith(String str)\n    returns true if this String starts\n    with the specified String str,\n    false otherwise\n\nboolean endsWith(String str)\n    returns true if this String ends\n    with the specified String str,\n    false otherwise\n\nString toLowerCase()\n    returns a new String containing\n    the same characters as this String\n    converted to lower case\n\nString toUpperCase()\n    returns a new String containing\n    the same characters as this String\n    converted to upper case",
								"type": "UNKNOWN",
								"title": "String Methods",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "97629530",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "// For example\nstatic boolean isUpperCase(char ch)\n// Usage\nCharacter.isUpperCase('A') // returns true\n\n// Methods\nstatic boolean isUpperCase(char ch)\n    returns true if ch is an uppercase character,\n    false otherwise\n\nstatic boolean isLowerCase(char ch)\n    returns true if ch is a lowerspace character,\n    false otherwise\n\nstatic boolean isDigit(char ch)\n    returns true if ch is a digit (a number),\n    false otherwise\n\nstatic boolean isLetter(char ch)\n    returns true if ch is a letter, false otherwise\n\nstatic boolean isLetterOrDigit(char ch)\n    returns true if ch is either a letter or a digit,\n    false otherwise\n\nstatic boolean isWhitespace(char ch)\n    returns true if ch is a whitespace character\n    (i.e. space or new line), false otherwise\n\nstatic char toUpperCase(char ch)\n    returns the uppercase version of ch\n\nstatic char toLowerCase(char ch)\n    returns the lowercase version of ch",
								"index": 6,
								"type": "UNKNOWN",
								"title": "Character Methods",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "397829397",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Give a short and concise answer to the following questions",
								"index": 7,
								"type": "UNKNOWN",
								"title": "Short Answer",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1772004592",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 8,
								"type": "SHORT_ANSWER",
								"title": "What is the relationship between a 'String' and a 'Character'?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1924147743",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 9,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "978039710",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 10,
								"description": "Write short and concise javadocs for methodA above.  Include relevant javadoc features.\nDon't give a line-by-line description of the code - just describe what the method does in a simple and understandable way.",
								"title": "Method documentation (Javadocs, API)",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "25212382",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 11,
								"type": "SHORT_ANSWER",
								"title": "Question 12",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1809945713",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 12,
								"description": "",
								"title": "Refer to method A above.  What does A(\"Batman\") return?",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1423748678",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 13,
								"description": "",
								"title": "Refer to method A above.  What does A(\"PETHS\") return?",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "318039927",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Give the best answer",
								"index": 14,
								"title": "Multiple Choice",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1782329775",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 15,
								"description": "",
								"type": "RADIO",
								"title": "Which of the following is an invalid method signature?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2125602574",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 16,
								"description": "",
								"type": "RADIO",
								"title": "Which is NOT a java String method?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1215421321",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 17,
								"type": "RADIO",
								"title": "Which of the following correctly uses a Character method?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "497323132",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 18,
								"description": "Give the boolean value (true or false) for each of the following String expressions.\nYou can refer to the String docs (API) for help.",
								"title": "True or False",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1150002734",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 19,
								"title": "\"Hello\".charAt(0) == (\"h\")",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1444022113",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 20,
								"title": "\"Hello\".length() == 5",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1562890485",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 21,
								"type": "RADIO",
								"title": "\"hello\".startsWith(\"he\")",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "952602067",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Quiz: Strings and Methods",
						"createdAt": "2025-08-27T14:37:24.516Z",
						"formUrl": "https://docs.google.com/forms/d/1CEMDVSI68nmAGcBlwH7wPLjK7GG0kRSUvVIkbXeVbd0/edit",
						"totalPoints": 0,
						"isQuiz": true,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:24.516Z"
					},
					"categoryId": "737123279380"
				},
				{
					"creationTime": "2025-01-31T19:15:25.079Z",
					"dueDate": "2025-03-07T03:50:00.000Z",
					"description": "",
					"updateTime": "2025-03-06T18:36:13.940Z",
					"type": "quiz",
					"maxScore": 100,
					"title": "Unit 2 Test: Basic Java",
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1gT1M2gMnoXa0-g0YsNof_Nx0zJUSSxECV9b2YQywUpg",
								"title": "Test: Basic Java",
								"formUrl": "https://docs.google.com/forms/d/1gT1M2gMnoXa0-g0YsNof_Nx0zJUSSxECV9b2YQywUpg/edit",
								"thumbnailUrl": "https://lh6.googleusercontent.com/cHjoGKWs9vVJD6DaxnfNSPmoJNFKy8Ki8GEmAjTf5jdgWeqp14AuUgW4LIu7_OaZ5fqulDj4wQGKVx8=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/details",
					"state": "PUBLISHED",
					"id": "737123849386",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 25,
						"pending": 25
					},
					"quizData": {
						"allowResponseEditing": false,
						"formId": "1gT1M2gMnoXa0-g0YsNof_Nx0zJUSSxECV9b2YQywUpg",
						"totalQuestions": 33,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 0,
								"type": "SHORT_ANSWER",
								"title": "First Name",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "562948816",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"title": "Last Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "406964917",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "Implement the code from the given requirements.\nUse Sample Outputs as a guide for how to structure the output.\nGood indenting, code formatting and technique is required.\nComments are NOT required.",
								"type": "UNKNOWN",
								"title": "Coding",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2047864202",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 3,
								"description": "",
								"title": "1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "340405891",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 4,
								"description": "",
								"title": "2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1538172251",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 5,
								"type": "SHORT_ANSWER",
								"title": "3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "696787779",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "What is the output?",
								"index": 6,
								"type": "UNKNOWN",
								"title": "Determine Output",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "693919249",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 7,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Question 8",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "988775802",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 8,
								"type": "SHORT_ANSWER",
								"title": "Question 9",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "727977988",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 9,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Question 10",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1846374476",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 10,
								"title": "Question 11",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1250883357",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 11,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Question 12",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "219199374",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 12,
								"description": "Choose the best answer",
								"title": "Multiple Choice",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "990877121",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 13,
								"title": "What is the correct way to output text with a line feed (return character)?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1914933614",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 14,
								"description": "",
								"type": "RADIO",
								"title": "What is the result of this expression?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "348017239",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 15,
								"type": "RADIO",
								"title": "What is the output?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1778117719",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 16,
								"description": "",
								"type": "RADIO",
								"title": "Which is NOT a primitive type?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "320192229",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 17,
								"title": "What type of variable is used to store a decimal number?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2060706037",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 18,
								"title": "What is the value of x after this code is run?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1084065671",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 19,
								"title": "Which expression returns an answer of 5?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "827735984",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 20,
								"description": "",
								"title": "Examine this code snippet. Which statement is correct?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "622155634",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 21,
								"title": "What is the value of 'num' after this code is run?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1070845195",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 22,
								"description": "",
								"title": "What is the value of 'num' after this code is run?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "11123812",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 23,
								"description": "",
								"type": "RADIO",
								"title": "What concept is associated with the previous question?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1022125682",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 24,
								"description": "",
								"type": "RADIO",
								"title": "Which expression results in 'true'?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "228245083",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 25,
								"type": "RADIO",
								"title": "Which is not a logical operator?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1217567088",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 26,
								"title": "Which expression is equivalent to !(x || y)",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "837675935",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 27,
								"title": "What concept is associated with the code from the previous question?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1464273307",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 28,
								"type": "RADIO",
								"title": "How many times does this loop execute?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1624341258",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 29,
								"description": "",
								"title": "What is the result of this expression?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1046067012",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 30,
								"title": "Which is a programming language?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1073667557",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 31,
								"description": "",
								"title": "Java source code is saved in a file with which extension?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1984677187",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 32,
								"title": "The term that is used to describe the step for converting source code into bytecode is:",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "912601980",
								"correctAnswers": []
							}
						],
						"description": "Complete and submit this test by the end of the period.",
						"title": "Test: Basic Java",
						"createdAt": "2025-08-27T14:37:28.110Z",
						"formUrl": "https://docs.google.com/forms/d/1gT1M2gMnoXa0-g0YsNof_Nx0zJUSSxECV9b2YQywUpg/edit",
						"isQuiz": true,
						"totalPoints": 0,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:28.110Z"
					},
					"categoryId": "737123279379"
				},
				{
					"creationTime": "2025-01-31T19:15:25.188Z",
					"dueDate": "2025-03-25T10:59:00.000Z",
					"description": "Complete CodeHS 'Unit 3: Methods' by the due date",
					"updateTime": "2025-03-05T12:01:57.595Z",
					"maxScore": 100,
					"title": "Unit 3: Strings and Methods",
					"type": "written",
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [
							{
								"alternateLink": "https://drive.google.com/file/d/1YrspUJZNvTUpBJ4OWNZklogUC0ZjF238/view?usp=drive_web",
								"id": "1YrspUJZNvTUpBJ4OWNZklogUC0ZjF238",
								"title": "Unit 3: Javadocs-CharacterAndStrings.pdf",
								"thumbnailUrl": "https://lh3.googleusercontent.com/drive-storage/AJQWtBPwGz3Fo0-uDE_13J8bAf_EBiRi3zWEK2ePRUBzf7pltSoIOwR9ftKnz58uW1xZRvxd-07SX95ZZWakiYnFHQ9Sxlv44OCipao-s_fCzOtkNO0=s200"
							}
						],
						"forms": []
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/details",
					"id": "737123849388",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 23,
						"pending": 23
					},
					"categoryId": "737123279380"
				},
				{
					"creationTime": "2025-01-31T19:15:24.970Z",
					"description": "",
					"updateTime": "2025-03-04T12:02:50.013Z",
					"type": "quiz",
					"maxScore": 100,
					"title": "Unit 2 Quiz: Basic Java (Practice)",
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1GM9ARLqALqcEOBnpZYMIECbFvYtONlYzrJ2j9SavIOU",
								"title": "Unit 2 Quiz: Basic Java",
								"formUrl": "https://docs.google.com/forms/d/1GM9ARLqALqcEOBnpZYMIECbFvYtONlYzrJ2j9SavIOU/edit",
								"thumbnailUrl": "https://lh5.googleusercontent.com/oRfkzQdodEreeyEWkGs4se9SBg_dZAYyFtqN-AUuKKi1IeCbkz4BagiQca7mB-Bt-o0fsAaJwIxB58I=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/details",
					"state": "PUBLISHED",
					"id": "737123849383",
					"quizData": {
						"formId": "1GM9ARLqALqcEOBnpZYMIECbFvYtONlYzrJ2j9SavIOU",
						"allowResponseEditing": true,
						"totalQuestions": 16,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 0,
								"description": "",
								"title": "First Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "193574675",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"title": "Last Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "467337160",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Implement the code from the given requirements.\nBe sure to look at the Sample Outputs for each question for the required output text and format.\nGood indenting, code formatting and technique is required.  Comments are NOT required.\nYou may choose to include the run() method or not.",
								"index": 2,
								"title": "Coding",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "907356343",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 3,
								"description": "",
								"title": "Get the side length of a square and output both its perimeter and area.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "508341002",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 4,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Get 3 integers from the user and output their sum.  You must use an appropriate loop.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1858180398",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 5,
								"description": "",
								"title": "Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "794436220",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 6,
								"description": "Give the output of the following code snippets exactly as it would appear in the output window.",
								"type": "UNKNOWN",
								"title": "Determine Output",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1410046156",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 7,
								"description": "",
								"title": "Question 8",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "220404633",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 8,
								"description": "",
								"title": "Question 9",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "812699448",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 9,
								"description": "Give the best answer",
								"title": "Multiple Choice",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "297260301",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 10,
								"title": "Which of the following is a good variable name?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "751595139",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 11,
								"description": "",
								"type": "RADIO",
								"title": "Which operator would you use to get the remainder?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2084764601",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 12,
								"type": "RADIO",
								"title": "Determine the value of:  12 % 7 / 2",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1004518521",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 13,
								"type": "RADIO",
								"title": "What type of error is this?   int x = 18.43;",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1206225325",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 14,
								"description": "",
								"type": "RADIO",
								"title": "What boolean is equivalent to this logical expression?   !(true || false)",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "189830056",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 15,
								"description": "",
								"title": "Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1624626393",
								"correctAnswers": []
							}
						],
						"description": "",
						"title": "Unit 2 Quiz: Basic Java",
						"createdAt": "2025-08-27T14:37:33.197Z",
						"formUrl": "https://docs.google.com/forms/d/1GM9ARLqALqcEOBnpZYMIECbFvYtONlYzrJ2j9SavIOU/edit",
						"totalPoints": 0,
						"isQuiz": true,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:33.197Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 22,
						"pending": 22
					},
					"categoryId": "737123279379"
				},
				{
					"creationTime": "2025-01-31T19:15:24.539Z",
					"dueDate": "2025-02-26T12:59:00.000Z",
					"description": "",
					"updateTime": "2025-02-24T13:16:04.808Z",
					"maxScore": 100,
					"type": "quiz",
					"title": "Learning Survey",
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
								"responseUrl": "https://docs.google.com/spreadsheets/d/1p0uFCP00FE4MRXcuiPOjAKfgmGC1zu6MwXiFUR-FW5A?resourcekey=&usp=emb&urp=[urp]#gid=802318823",
								"title": "Learning Survey",
								"formUrl": "https://docs.google.com/forms/d/1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg/edit",
								"thumbnailUrl": "https://lh6.googleusercontent.com/ELy22lF10letbc9fYcS7LAs4d2IQHx7YnUnmWXXjzKrmFNYNfC22VmZfbPy05pV5_rgca5G9UF-BSg4=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/details",
					"id": "737123849361",
					"state": "PUBLISHED",
					"quizData": {
						"allowResponseEditing": false,
						"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
						"totalQuestions": 0,
						"collectEmailAddresses": false,
						"questions": [],
						"description": "",
						"title": "Learning Survey",
						"createdAt": "2025-08-27T14:37:36.573Z",
						"formUrl": "https://docs.google.com/forms/d/1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg/edit",
						"isQuiz": false,
						"totalPoints": 0,
						"manualGradingRequired": false,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:36.573Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 24,
						"pending": 24
					},
					"categoryId": "737123279379"
				},
				{
					"creationTime": "2025-01-31T19:15:24.427Z",
					"description": "",
					"updateTime": "2025-02-21T18:36:33.926Z",
					"type": "coding",
					"maxScore": 100,
					"title": "Unit 1 Test: Karel the Dog",
					"points": 100,
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1ZlvVv3BZnkNgJQSIQVUHfEPKAq3M6Knqx2vgKrrTaGE",
								"title": "Unit 1 Test: Karel the Dog",
								"formUrl": "https://docs.google.com/forms/d/1ZlvVv3BZnkNgJQSIQVUHfEPKAq3M6Knqx2vgKrrTaGE/edit",
								"thumbnailUrl": "https://lh5.googleusercontent.com/wBf4ppX39ohLPZoF0WHesDOR4zNLNKIh3uqqEzQ1-uh4U4sL48SWk27vYP1-OJPS8cu3B7c6MJWU2ZQ=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/details",
					"id": "737123849359",
					"state": "PUBLISHED",
					"quizData": {
						"allowResponseEditing": false,
						"formId": "1ZlvVv3BZnkNgJQSIQVUHfEPKAq3M6Knqx2vgKrrTaGE",
						"totalQuestions": 29,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 0,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "First Name",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1993020176",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 1,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Last Name",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1483416153",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Implement the Karel code from the given requirements for each question.\nDo not include the 'public class Program' block.\nRemember to use a 'public void run()' method which is the starting point of your code.\nYour solutions should work for worlds of any size unless the question states otherwise.\nUse appropriate control structures to make your code concise and easy to understand.\nUse correct formatting and syntax like you did in CodeHS. This includes correct indenting, naming, spacing, etc",
								"index": 2,
								"title": "Full Solution",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1423866027",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 3,
								"type": "SHORT_ANSWER",
								"title": "Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1245380344",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 4,
								"description": "",
								"title": "There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "376796574",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 5,
								"type": "SHORT_ANSWER",
								"title": "Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1459089925",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 6,
								"description": "",
								"title": "Question 7",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "575926581",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 7,
								"description": "",
								"title": "Question 8",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "2078207680",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "Choose the best answer",
								"index": 8,
								"title": "Multiple Choice",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "113299254",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 9,
								"title": "Which is a valid Karel command?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "797631059",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 10,
								"type": "RADIO",
								"title": "Which is a valid Karel command?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1579089514",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 11,
								"description": "",
								"title": "What method is the entry point to a Karel program?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "600557116",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 12,
								"type": "RADIO",
								"title": "What is a method?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1307809493",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 13,
								"description": "",
								"title": "Starting with the big problem and breaking it down into smaller problems is called",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1156152157",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 14,
								"description": "",
								"title": "Which of the following should be used for a single-line comment?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "926264331",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 15,
								"type": "RADIO",
								"title": "Which of the following should be used for a multi-line comment?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1956810448",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 16,
								"description": "",
								"type": "RADIO",
								"title": "Which 'for' loop will repeat 5 times?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1898256975",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 17,
								"type": "RADIO",
								"title": "How many balls will be put down by Karel?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "617050313",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 18,
								"type": "RADIO",
								"title": "A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "501630721",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 19,
								"description": "",
								"type": "RADIO",
								"title": "You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1883689571",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 20,
								"description": "",
								"type": "RADIO",
								"title": "Which of the following is a condition?",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "621623266",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 21,
								"description": "",
								"title": "Which control structure requires a condition?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "370777867",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 22,
								"description": "",
								"title": "A wall is directly in front of Karel. Which condition should you use?",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1396030660",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 23,
								"description": "",
								"type": "RADIO",
								"title": "If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1575123529",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 24,
								"type": "RADIO",
								"title": "A condition...",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1024316904",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 25,
								"description": "",
								"title": "We teach Karel new commands by creating",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "2024593474",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 26,
								"title": "Code indenting is required...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1464553145",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 27,
								"description": "",
								"type": "RADIO",
								"title": "A control structure is used inside the block of another control structure. This is referred to as",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "602695039",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 28,
								"description": "",
								"title": "An 'if' statement...",
								"type": "RADIO",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "396829747",
								"correctAnswers": []
							}
						],
						"description": "All questions refer to the Java programming language learned through CodeHS.\nNo other resources allowed.\nNo other windows should be open.",
						"title": "Unit 1 Test: Karel the Dog",
						"createdAt": "2025-08-27T14:37:37.378Z",
						"formUrl": "https://docs.google.com/forms/d/1ZlvVv3BZnkNgJQSIQVUHfEPKAq3M6Knqx2vgKrrTaGE/edit",
						"isQuiz": true,
						"totalPoints": 0,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:37.378Z"
					},
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 25,
						"pending": 25
					},
					"categoryId": "737123279378"
				},
				{
					"creationTime": "2025-01-31T19:15:24.317Z",
					"description": "",
					"updateTime": "2025-02-19T12:34:44.411Z",
					"maxScore": 100,
					"title": "Unit 1 Quiz: Karel the Dog (Practice)",
					"type": "coding",
					"materials": {
						"links": [],
						"youtubeVideos": [],
						"driveFiles": [],
						"forms": [
							{
								"formId": "1lHAR0bVqnv9DbGVVlanUJJxpsUbOWhCvle0gt9gI2mc",
								"title": "Practice Quiz: Karel the Dog",
								"formUrl": "https://docs.google.com/forms/d/1lHAR0bVqnv9DbGVVlanUJJxpsUbOWhCvle0gt9gI2mc/edit",
								"thumbnailUrl": "https://lh4.googleusercontent.com/LdmfNZuFFN4yaiMAs9HICP4HWblhxI074oNySL3H4VDsdxwBB_TZZ24zDxmIXbLXtQs57b5kNz150pM=w90-h90-p"
							}
						]
					},
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/details",
					"id": "737123849356",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 22,
						"pending": 22
					},
					"quizData": {
						"allowResponseEditing": true,
						"formId": "1lHAR0bVqnv9DbGVVlanUJJxpsUbOWhCvle0gt9gI2mc",
						"totalQuestions": 10,
						"collectEmailAddresses": true,
						"questions": [
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 0,
								"title": "First Name",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "173918467",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 1,
								"type": "SHORT_ANSWER",
								"title": "Last Name",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "884096586",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 2,
								"description": "Implement the Karel code from the given requirements for each question.\nDo not include the 'public class Program' block.\nRemember to use a 'public void run()' method which is the starting point of your code.\nDefine your own methods if it will make your code easier to understand.\nYour solutions should work for worlds of any size unless the question states otherwise.\nUse appropriate control structures to make your code concise and easy to understand.\nUse correct formatting and syntax like you did in CodeHS.  This includes correct indenting, naming, spacing, etc",
								"type": "UNKNOWN",
								"title": "Coding",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "818004223",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 3,
								"title": "Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.",
								"type": "SHORT_ANSWER",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "463269604",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 4,
								"description": "",
								"type": "SHORT_ANSWER",
								"title": "Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1390011039",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 5,
								"title": "Question 6",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1069465391",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 6,
								"description": "",
								"title": "Question 7",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "808497613",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 7,
								"description": "Give the best answer",
								"title": "Multiple Choice",
								"type": "UNKNOWN",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"sampleSolution": "",
								"options": [],
								"id": "1759698963",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"description": "",
								"index": 8,
								"type": "RADIO",
								"title": "What is the main programming language that we are learning in this course?",
								"required": false,
								"points": 0,
								"feedback": {
									"correct": "",
									"incorrect": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "459562718",
								"correctAnswers": []
							},
							{
								"autoGradable": false,
								"caseSensitive": false,
								"index": 9,
								"description": "",
								"type": "RADIO",
								"title": "Basic Karel can do all of the following except",
								"required": false,
								"points": 0,
								"feedback": {
									"incorrect": "",
									"correct": "",
									"general": ""
								},
								"options": [],
								"sampleSolution": "",
								"id": "1550856840",
								"correctAnswers": []
							}
						],
						"description": "The purpose of this quiz is to give you an idea of the format of the actual test.\nYou are not allowed to use or refer to any other documents, editors or CodeHS.",
						"title": "Practice Quiz: Karel the Dog",
						"createdAt": "2025-08-27T14:37:41.700Z",
						"formUrl": "https://docs.google.com/forms/d/1lHAR0bVqnv9DbGVVlanUJJxpsUbOWhCvle0gt9gI2mc/edit",
						"totalPoints": 0,
						"isQuiz": true,
						"manualGradingRequired": true,
						"shuffleQuestions": false,
						"autoGradableQuestions": 0,
						"requireSignIn": true,
						"updatedAt": "2025-08-27T14:37:41.700Z"
					},
					"categoryId": "737123279378"
				},
				{
					"creationTime": "2025-01-31T19:15:24.651Z",
					"dueDate": "2025-03-04T12:59:00.000Z",
					"description": "Complete CodeHS Unit 2: Basic Java Module by the due date.",
					"updateTime": "2025-02-19T12:32:44.809Z",
					"maxScore": 100,
					"type": "written",
					"title": "Unit 2:  Basic Java",
					"points": 100,
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/details",
					"id": "737123849363",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 21,
						"pending": 21
					},
					"categoryId": "737123279379"
				},
				{
					"creationTime": "2025-01-31T19:15:24.006Z",
					"dueDate": "2025-02-20T12:59:00.000Z",
					"description": "1. Create a SuperKarel Sandbox.\nYou can create a Sandbox in CodeHS by clicking the 'Sandbox' tab at the top of your CodeHS page. Name your program 'Karel Maze Challenge' -> Click 'create program' -> Choose 'SuperKarel'.\n\n2. Attach the sandbox link to this Google assignment.\nIn CodeHS click the 'Share' button at the top of the window. Copy the 'Show Code' link and attach it to this assignment by going to Google Classroom, select this assignment, choose 'Add or Create' -> 'Link', then past the link. (You will 'Turn In' this assignment later when it's complete).\n*** Changing the Sandbox name will change the URL link. If you do this, RESUBMIT the new link ***\n\n3. Create a 5 x 5 Maze World.\nDo this by clicking on the drop-down box next to the bunny image. Choose 'add/edit worlds' and then make your maze using the editor that appears by adding walls to form a maze. Add one ball somewhere in the maze that represents the end of the maze. Name the world '5 x 5 Maze'. \n\n4. Create a 'Solution World' to the maze you just made.\nDo this by clicking the 'Add Solution' button while in the world editor. Then move Karel to where the ball is and remove the ball. Save this solution world.\n\n5. Write code that will solve any regular maze of ANY size. A regular maze is one where Karel can always follow a wall to eventually get to the ball. Ensure your code can solve the maze you created.\n\n6. Create at least one more maze to test your code. Name your new maze(s) by its size, for example '7 x 8 Maze'. The maze does not need to be square, but make sure it is solvable.\n\n7. Partner with someone. Create another maze based on one of your partners' mazes. Name it 'Other Maze'. Ensure that your code can solve their maze.\n\n8. 'Turn In' this assignment in Google classroom when it's complete.\n\n* Optional Challenge\n9. Write code that will solve ANY maze of ANY size, even one where the ball may not be next to a wall. Put this code in a new Sandbox called 'Karel Maze Optional Challenge'. Create one or more irregular mazes to show that your code works. Attach a link to this sandbox when turning it in.",
					"updateTime": "2025-02-14T11:37:05.575Z",
					"maxScore": 100,
					"title": "Karel Maze Challenge",
					"type": "written",
					"points": 100,
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/details",
					"state": "PUBLISHED",
					"id": "737123849339",
					"submissionStats": {
						"total": 25,
						"graded": 25,
						"submitted": 25,
						"pending": 0
					},
					"categoryId": "737123279378"
				},
				{
					"creationTime": "2025-02-12T17:36:48.273Z",
					"dueDate": "2025-02-15T12:59:00.000Z",
					"description": "We would learn to use a free online animation tool together. It would be optional and self-directed. The end result would be assets you could import into your game projects or other apps.",
					"updateTime": "2025-02-13T12:32:14.925Z",
					"maxScore": 100,
					"type": "quiz",
					"title": "Do you want to learn to create animations?",
					"points": 100,
					"workType": "MULTIPLE_CHOICE_QUESTION",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/details",
					"state": "PUBLISHED",
					"id": "737770077265",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 23,
						"pending": 23
					}
				},
				{
					"creationTime": "2025-01-31T19:15:23.573Z",
					"dueDate": "2025-02-18T12:59:00.000Z",
					"description": "Complete CodeHS Unit 1: Karel the Dog by the due date.\n\nWhen you are finished the required assignments on CodeHS, mark this Google assignment as 'Turned In'.\n\nYou do not need to submit anything else. I will see your work on CodeHS.",
					"updateTime": "2025-02-04T13:01:18.174Z",
					"maxScore": 100,
					"title": "Unit 1:  Introduction to Programming with Karel the Dog",
					"type": "written",
					"points": 100,
					"workType": "ASSIGNMENT",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/details",
					"id": "737123849319",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 25,
						"pending": 25
					},
					"categoryId": "737123279378"
				},
				{
					"creationTime": "2025-01-31T19:15:23.362Z",
					"dueDate": "2025-02-06T12:59:00.000Z",
					"description": "1. What do you like doing outside of school?\n2. Why do you want to take computer science?\n3. What do you hope to achieve in this course in terms of learning and grade?\n4. Is there anything else about yourself that you'd like to share with me?",
					"updateTime": "2025-02-04T13:00:16.822Z",
					"title": "All about you",
					"type": "quiz",
					"maxScore": 100,
					"workType": "SHORT_ANSWER_QUESTION",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/details",
					"id": "737123849313",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 23,
						"pending": 23
					},
					"categoryId": "737123279377"
				},
				{
					"creationTime": "2025-01-31T19:26:23.689Z",
					"dueDate": "2025-02-05T12:59:00.000Z",
					"description": "",
					"updateTime": "2025-01-31T19:28:22.619Z",
					"title": "What phone do you use?",
					"type": "quiz",
					"maxScore": 100,
					"workType": "MULTIPLE_CHOICE_QUESTION",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/details",
					"id": "737121774304",
					"state": "PUBLISHED",
					"submissionStats": {
						"total": 25,
						"graded": 0,
						"submitted": 25,
						"pending": 25
					},
					"categoryId": "737123279377"
				}
			],
			"creationTime": "2025-01-31T19:15:20.424Z",
			"students": [
				{
					"lastName": "He",
					"firstName": "Moses",
					"gradedSubmissionCount": 0,
					"displayName": "Moses He",
					"profile": {
						"name": {
							"fullName": "Moses He",
							"familyName": "He",
							"givenName": "Moses"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocKU9jPeAW5qBGv8uxhqGhXvXiWr-r6DymW1yzu2cyWLFXmRDw=mo",
						"emailAddress": "440030068@gapps.yrdsb.ca",
						"id": "111100032418663696789"
					},
					"submissionCount": 0,
					"name": "Moses He",
					"id": "111100032418663696789",
					"userId": "111100032418663696789",
					"courseId": "737123279360",
					"email": "440030068@gapps.yrdsb.ca"
				},
				{
					"lastName": "Kuan",
					"firstName": "Kelton",
					"gradedSubmissionCount": 0,
					"displayName": "Kelton Kuan",
					"profile": {
						"name": {
							"fullName": "Kelton Kuan",
							"familyName": "Kuan",
							"givenName": "Kelton"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocL6sWY0rNHVPPPthhQ0B1EAOFMXIlY_zHlzC3RMPiJC_ocQ8G8=mo",
						"emailAddress": "349064972@gapps.yrdsb.ca",
						"id": "101103182210295183966"
					},
					"submissionCount": 0,
					"name": "Kelton Kuan",
					"id": "101103182210295183966",
					"userId": "101103182210295183966",
					"courseId": "737123279360",
					"email": "349064972@gapps.yrdsb.ca"
				},
				{
					"lastName": "So",
					"firstName": "Leo",
					"gradedSubmissionCount": 0,
					"displayName": "Leo So",
					"profile": {
						"name": {
							"fullName": "Leo So",
							"familyName": "So",
							"givenName": "Leo"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocLehpgaKt-8qFbGh_uDCigUZmtwOq-86g2UVRB5x48Mj0uyQF0=mo",
						"emailAddress": "348611500@gapps.yrdsb.ca",
						"id": "106702075817947945830"
					},
					"submissionCount": 0,
					"name": "Leo So",
					"id": "106702075817947945830",
					"userId": "106702075817947945830",
					"courseId": "737123279360",
					"email": "348611500@gapps.yrdsb.ca"
				},
				{
					"lastName": "Ning",
					"firstName": "John",
					"gradedSubmissionCount": 0,
					"displayName": "John Ning",
					"profile": {
						"name": {
							"fullName": "John Ning",
							"givenName": "John",
							"familyName": "Ning"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocK49YTbg1p9x5LksG5HItGp47NkwTORUQmQ7zYIQKyPvT7b4g=mo",
						"emailAddress": "350797049@gapps.yrdsb.ca",
						"id": "104593047842018851679"
					},
					"submissionCount": 0,
					"name": "John Ning",
					"id": "104593047842018851679",
					"userId": "104593047842018851679",
					"courseId": "737123279360",
					"email": "350797049@gapps.yrdsb.ca"
				},
				{
					"lastName": "Godek",
					"firstName": "Sena",
					"gradedSubmissionCount": 0,
					"displayName": "Sena Godek",
					"profile": {
						"name": {
							"fullName": "Sena Godek",
							"givenName": "Sena",
							"familyName": "Godek"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocLRxzlmqi_iO8gL4uDP9eGz1UETu_zgUkmzs-m4J8fipTgaLBs=mo",
						"emailAddress": "349683599@gapps.yrdsb.ca",
						"id": "101472071522836988061"
					},
					"submissionCount": 0,
					"name": "Sena Godek",
					"id": "101472071522836988061",
					"userId": "101472071522836988061",
					"courseId": "737123279360",
					"email": "349683599@gapps.yrdsb.ca"
				},
				{
					"lastName": "Lee",
					"firstName": "Owen",
					"gradedSubmissionCount": 0,
					"displayName": "Owen Lee",
					"profile": {
						"name": {
							"fullName": "Owen Lee",
							"givenName": "Owen",
							"familyName": "Lee"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjVhc3QeVWvELGozRb7hZKFvBn7sgS0lCKkIwUAxf2BYb0g04hLantqYXQFyyHlYH5gBXgsmDm1kGnFpCRW8HCxZoMhqeDWbfQLb1qpE29PZaxdHYIKEBmJ5uRf4FjKH10Y_-rIbpmFBzpYd7QCNNLGVR9O0Qwr_mXpjm64Tb8baKF90lDgauSjNPsDMXRu1tMOQx_xEl7igJ1LPL4ZMPF26dmPTTq7j4WnEc0ALpajQEm4fgfQwt5AutRm6pENmTwdCqw40LDJaqN9KJfnUjHs4R-bCCXeQy6Y0J6J7Q-1TSnwTvl3X0cNIx3ANrb0Qd7siyUC5rII1eFq3-Nm9by1PTgXGmn1Hz96Rpq4rwTCDKUbvCJvU8TAhkOQk2I9D69pKD0J8y5i3vY2X2jFsD7YJ5X2n8K5JWs-coc8t8IjSD2Nc8NAPt5WWQBTqMvubw_rB5lYv_t8R9etqQ_QjC5B3PKaUm8c2GJJ-jSgtNiD7gJTvq8XeAkcYMhdeL5XzbOy7Ze__5MsX86y_7TBI3mUuIolx2OsnXg5AXYXlzBULDEWsNad6L_OYp6pQvpyLaDr-MYg2BTKo411sAHXsTQMolrT7X8mgi_EI7ZeEvle6OR9jfK3vdDDBl2XinHmberuKNIJmIAdx1EbDY_KU-RjPdF0fLn2pI-c0MUhoC-0DoDB_icUS2uf8yfAAEpPEm13-XLSd0ebkOUd0Tg1T8BLoP1X_8AUwZyMtECBWxFUmY5NuS-9bkBcTaY8c5V3gUD--Rk-rwjb8CK6TWBPHmKLB_8iAT24dKHAcJ10rSnmA8EQ2Krf90_PkrHbFz0gQCnblBY6W3QVKrcDfByJUIueHeohdITWMwxt623brmGpjaJdeQU2hQbbES4M22gHAPrfVMFttyjv1aYiqzTMd1qa22q5eMu0JzSebdrhPyNTRtD1q3HzdkGDc8TasmRyEDP13zSAdxBQueSolnov11S6oiEMMyuM",
						"emailAddress": "348590274@gapps.yrdsb.ca",
						"id": "107243305699666934434"
					},
					"submissionCount": 0,
					"name": "Owen Lee",
					"id": "107243305699666934434",
					"userId": "107243305699666934434",
					"courseId": "737123279360",
					"email": "348590274@gapps.yrdsb.ca"
				},
				{
					"lastName": "Zhuo",
					"firstName": "Joe",
					"gradedSubmissionCount": 0,
					"displayName": "Joe Zhuo",
					"profile": {
						"name": {
							"fullName": "Joe Zhuo",
							"familyName": "Zhuo",
							"givenName": "Joe"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocK-8NMIsHXeoa5WQZ6VZCLCw7D4ZINOC6PaBaCjAI7C8qAXZnI=mo",
						"emailAddress": "349168732@gapps.yrdsb.ca",
						"id": "108625539120933569850"
					},
					"submissionCount": 0,
					"name": "Joe Zhuo",
					"id": "108625539120933569850",
					"userId": "108625539120933569850",
					"courseId": "737123279360",
					"email": "349168732@gapps.yrdsb.ca"
				},
				{
					"lastName": "Zheng",
					"firstName": "Jennifer",
					"gradedSubmissionCount": 0,
					"displayName": "Jennifer Zheng",
					"profile": {
						"name": {
							"fullName": "Jennifer Zheng",
							"familyName": "Zheng",
							"givenName": "Jennifer"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocI7MzjVJOeWRrHAYhs8CP67kN6txtT8gD6HqgRogPpT0sbzFw=mo",
						"emailAddress": "440027909@gapps.yrdsb.ca",
						"id": "109110963825415956180"
					},
					"submissionCount": 0,
					"name": "Jennifer Zheng",
					"id": "109110963825415956180",
					"userId": "109110963825415956180",
					"courseId": "737123279360",
					"email": "440027909@gapps.yrdsb.ca"
				},
				{
					"lastName": "Paskaranathan",
					"firstName": "Abithan",
					"gradedSubmissionCount": 0,
					"displayName": "Abithan Paskaranathan",
					"profile": {
						"name": {
							"fullName": "Abithan Paskaranathan",
							"givenName": "Abithan",
							"familyName": "Paskaranathan"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjXs3-VQbLk-apbqIyMgbBxzCbxBIoo9fbkaTdH_HnUUFWFz7ILi7MTZ2G5V76w2d6zB1_43HGY6Kmuc5vuqRNC3q450Eh4MJErVIkEo5kG8SJSrseHtfs5_HKKatQDz5Uge_9l-zTMLfT6pOWKZjUd5iKIOKughJPcRm_1CWLlxU33arR86pzW3oFOfjKasMdL7Z9bzsB6G3-v0VuyEwIFZspbPyiuJKIZ5q2mD5jxe2uI2oRL1vwlLLbO-h_Qqmt40d_NOIoVs2N4N4XC_fTPkXc5-kcwBWcbY_c5521ol5kngoecxgaCPTccBO4pR-t9UYTnrqbTEntjmyGtV2BLfrIIw4dDEmGSGkRU6538F_x5O0UjqH66Vq77_WdkpX8jEVzZpJgmL1BUj4Hev1Dm3Cyj9VJF07zgepoT2DGATWmN4Sxb5BidSRpm6KJl4wGPInkKtXGGc1ik8hF0c47xRJr_ItMWbeEubTLPa-gvDY-cf5qKVCWgfTxtPMdwRYeUFLa84oK5I4wlfYbs2IHTMSjKRKdEHMRjC_3iAWtpjUoigxUsT2PJk8X5cLWrI4pmQ09gASLcIR0Og5-XI5MbClm_n44HkTvknQCDAvCJmJJ8-38oTatBvjmcLIx6nAxYPScLfCafiEpyTugafy3c-vauI0baxSWWpqlx_pOUtchGkq8KgcuNaGJqxNXb8lWipmEnxLGW_vJxTu4h8H0J5cPUC1TeZe7O_gedD2gbZhrzL14JQWbNzRkjKPVw0g7iFL_XTmIu9rSv4-3MvjMCz8WeFGqyPCeOQceFfSH1kY2dfceN-CeMFj0lncDjO-GIFLk4_10-QXq2yd1n2-Ei3N960Ah0n-sf5F5WC178x41tAqjmdmObqJgc6IAUSernAzyxYogg23ZMqmIDkSw0562C2yZuArCo96CzeQ351BUZGqbAc4E3jl6Se-6Xv4Z99Ix9bpybZ1DNcGoG3BLDqEgtKdzU",
						"emailAddress": "348582230@gapps.yrdsb.ca",
						"id": "102770026016844657024"
					},
					"submissionCount": 0,
					"name": "Abithan Paskaranathan",
					"id": "102770026016844657024",
					"userId": "102770026016844657024",
					"courseId": "737123279360",
					"email": "348582230@gapps.yrdsb.ca"
				},
				{
					"lastName": "Mistry",
					"firstName": "Kian",
					"gradedSubmissionCount": 0,
					"displayName": "Kian Mistry",
					"profile": {
						"name": {
							"fullName": "Kian Mistry",
							"familyName": "Mistry",
							"givenName": "Kian"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjX1H-5Zkv-uaxlChPfoXh_UNE8JXgZ7JIK6SK0fDk-A5uJkHyiHJ59QTbICFWRjL4jtZXVUOvGM6G0uGgm_H982ofAipJYqKi0wicPduzd_0-QvONgJMUCUf7IJ07ObMhOB3oN3ODIe9NKDt9K94C3BPrA9PuJc4tSgKOqc1jhvzOpDsTHTwqrJBZRbuCPu_pt2ZftVLEywcIUtOi7HORI4jo_zeth-uRb-osiNLaR1hB0nOUlcNsRbGuxQCHghuIveeho7nT71oKYRCfyYhDwBg8M4Ajjn_qVHCNPBVmC2HkyYWK6YRcOXjRLDj4quqdaZWCEq6ZrTUIIelJHwnGdfQfOfnmj8Ur6F93HkqcYNXYWe0WO1wrptBr8UEEf5zdfN7Awi8E-F7XEVFNlM2Z3Ou4hBkyDEWOU8f7g6QHeiM_SUnDqcqjb3WVyaklfPeECFAYKS0mG31DlsLMpL2d-7t0hGW7RzNoN-oJ47e0i4Dmr7LrLKY9afcK4oCYI9pu4SDN3OzokRpRdS-gpICdPMgZKmO0OCVKPceUz2tK29s1U54tfTzklnzH15HQS-qrkXmPme_7m6ws9TOCSEMQMqWfBrU-pHGmOdEF_BeKgW3XTl7qrfRpsL4f4ogljaWakAvj3gtwEOXQasHfD8KwSWKi-7x_4ZII2JAF8rxoNAZRLR6NdSwX5grNj1Fw59f8DwfOgUn4EBtnyJATVYKfi6pOcfx0MMng-r10kfMtSYsa-MRfd5guJCLi74bWYn-sa3goqMOdS9ve8XswSeNb8JaDWF7G8dBzehiEDuXOrIX_Y-m5FTlUoAsRG-rvbPLnVH0CE4hwPgCewiD7yQnG6LYOdEXoDhEjv2k9uayuaxiOc_O99ND6XZPmLHfY6rwvtLztG2SuowbOSC4JME9OzQiaqaKB8VX0PWcz3olzydkHSC3Yk9HH-l0YAMmOZUErU402Omaps7ffnDdd3ASzvgugopAz0",
						"emailAddress": "348586678@gapps.yrdsb.ca",
						"id": "114799240624991928862"
					},
					"submissionCount": 0,
					"name": "Kian Mistry",
					"id": "114799240624991928862",
					"userId": "114799240624991928862",
					"courseId": "737123279360",
					"email": "348586678@gapps.yrdsb.ca"
				},
				{
					"lastName": "Premathas",
					"firstName": "Veznu",
					"gradedSubmissionCount": 0,
					"displayName": "Veznu Premathas",
					"profile": {
						"name": {
							"fullName": "Veznu Premathas",
							"givenName": "Veznu",
							"familyName": "Premathas"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocJfsOBQvDQXeCUwEQ49KrG3yEbURXdo-zWUNPEZAZF7qaUyP4k=mo",
						"emailAddress": "348588096@gapps.yrdsb.ca",
						"id": "106643648486889104973"
					},
					"submissionCount": 0,
					"name": "Veznu Premathas",
					"id": "106643648486889104973",
					"userId": "106643648486889104973",
					"courseId": "737123279360",
					"email": "348588096@gapps.yrdsb.ca"
				},
				{
					"lastName": "Kung",
					"firstName": "Owen",
					"gradedSubmissionCount": 0,
					"displayName": "Owen Kung",
					"profile": {
						"name": {
							"fullName": "Owen Kung",
							"familyName": "Kung",
							"givenName": "Owen"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocKYAXOZjbUnpHEUFZFGq3vsfP2C-qcnupwMqNAEC2qqiIZAEw=mo",
						"emailAddress": "440002825@gapps.yrdsb.ca",
						"id": "107302250831066714187"
					},
					"submissionCount": 0,
					"name": "Owen Kung",
					"id": "107302250831066714187",
					"userId": "107302250831066714187",
					"courseId": "737123279360",
					"email": "440002825@gapps.yrdsb.ca"
				},
				{
					"lastName": "Chen",
					"firstName": "Jiayu",
					"gradedSubmissionCount": 0,
					"displayName": "Jiayu Chen",
					"profile": {
						"name": {
							"fullName": "Jiayu Chen",
							"givenName": "Jiayu",
							"familyName": "Chen"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjVpkICi_WMPw_9yoTcRsOGJcHL-Zmosf9cVPSjIgliXhZK7813ZnSUjHwuENCtxJ244gzCd4q6S4lDkkNGe0JdM-dfIGnjkdhbpxommFegL9Uq4g3OCWXgUeT5ggLxM4rvan_S1pcHh3HDtC7DVbJRufYEoguBG66RXA_fFvCfHtJ5EZhN1MP4-iGCXC01AO0OXIuc-E83tZVnTilKCRg-cQHpVx0-E4FdKL2KxklDxGFTbWBdaSkpedX5BU5NoUXMn15SD7bvAETf6Q2XAZpUsHT7Qk0FCKxieNCbQcuNhx4zVWEp_oVhWgCUcs-0P5S_ygJU3lfk77p-ErwDZdidYE98L_hcLARxcIBg0Yo5Fcwjf8uq1KfJXwB-kfTUhusL-577ZNYE5ogyqmEDIqNip_Fn9O0HFnh1cPKzyW5TFaLZiLYYRtQYFaB1vg5z-CkXC_-xolhjXXD-AHeD_mFTkGsfqUbprrWZU8iLdUk_TzJehosBKfnF11MF_GP5lbenFCPC5TnHGdjB7wzUJT7zj4giQQT2cWVNztiOVpwmeBvHI0R9qg-n0cSY1qAe-hIBB8HSJEvtai2rCioEI10HAtYFuPT0KzI2SH3Sdoe5-hgHFnW0P0_HHIDNyd-4oK15BYilkiF5zhqZcUUD9lvC5gs1790eOYQFMBYig1EN5Lyx0VwKyhwWox9eJbHFURI0VKYSyWWK9k7ZhOxIm1iCdG9h4ZpznJrShbRTPS9gTKOztyaXzebifsK8T4oOufE6iNWGkVToGmTMVxbrRCv9leUkQiDhxSLCEYCh-lGRCD2vMU01K9YU85zvFUfLvqxevc-mjBcXFnKmF04a-NRIkGKuaU-eFwRc1FwGqlXdUsFbgDCI2YgEq2x-X0hOHPjnksQj_gdGG7Vzi8fIfifpV4_hotM8tUv703DfaWmpOogDEcRTQAjUYHVdxM9m0pZISdliY1Ll5e7Uw1liF0i4XezW78GA",
						"emailAddress": "348615568@gapps.yrdsb.ca",
						"id": "101614213510204563567"
					},
					"submissionCount": 0,
					"name": "Jiayu Chen",
					"id": "101614213510204563567",
					"userId": "101614213510204563567",
					"courseId": "737123279360",
					"email": "348615568@gapps.yrdsb.ca"
				},
				{
					"lastName": "Li",
					"firstName": "Vivian",
					"gradedSubmissionCount": 0,
					"displayName": "Vivian Li",
					"profile": {
						"name": {
							"fullName": "Vivian Li",
							"familyName": "Li",
							"givenName": "Vivian"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocIMidctwfEjSI2fubdPt6S0M8chEpeJT6owuuDjh0f9ywga5w=mo",
						"emailAddress": "341207876@gapps.yrdsb.ca",
						"id": "103612229036956651130"
					},
					"submissionCount": 0,
					"name": "Vivian Li",
					"id": "103612229036956651130",
					"userId": "103612229036956651130",
					"courseId": "737123279360",
					"email": "341207876@gapps.yrdsb.ca"
				},
				{
					"lastName": "Lin",
					"firstName": "Clifton",
					"gradedSubmissionCount": 0,
					"displayName": "Clifton Lin",
					"profile": {
						"name": {
							"fullName": "Clifton Lin",
							"givenName": "Clifton",
							"familyName": "Lin"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocJ4xg8UpdxNEHy1pGGzxDLJ1Jg-c4Fgxgn6qS5PqIwygpKr5Q=mo",
						"emailAddress": "440021905@gapps.yrdsb.ca",
						"id": "102099373101721031728"
					},
					"submissionCount": 0,
					"name": "Clifton Lin",
					"id": "102099373101721031728",
					"userId": "102099373101721031728",
					"courseId": "737123279360",
					"email": "440021905@gapps.yrdsb.ca"
				},
				{
					"lastName": "Chiu",
					"firstName": "Cayden",
					"gradedSubmissionCount": 0,
					"displayName": "Cayden Chiu",
					"profile": {
						"name": {
							"fullName": "Cayden Chiu",
							"givenName": "Cayden",
							"familyName": "Chiu"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocKvaoTEsmwC3cKko0BT-ERi0PLjXyrt6WyDob_gcPEpSk5ALg=mo",
						"emailAddress": "349581918@gapps.yrdsb.ca",
						"id": "101721674440588752421"
					},
					"submissionCount": 0,
					"name": "Cayden Chiu",
					"id": "101721674440588752421",
					"userId": "101721674440588752421",
					"courseId": "737123279360",
					"email": "349581918@gapps.yrdsb.ca"
				},
				{
					"lastName": "Cheung",
					"firstName": "Carmen",
					"gradedSubmissionCount": 0,
					"displayName": "Carmen Cheung",
					"profile": {
						"name": {
							"fullName": "Carmen Cheung",
							"familyName": "Cheung",
							"givenName": "Carmen"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocIPhbvpwTs7ThOpFxIiLGRsioJ6U1BDghSBT8y7mYENYueHMcg=mo",
						"emailAddress": "349781427@gapps.yrdsb.ca",
						"id": "105982258071886610739"
					},
					"submissionCount": 0,
					"name": "Carmen Cheung",
					"id": "105982258071886610739",
					"userId": "105982258071886610739",
					"courseId": "737123279360",
					"email": "349781427@gapps.yrdsb.ca"
				},
				{
					"lastName": "Chen",
					"firstName": "Clark",
					"gradedSubmissionCount": 0,
					"displayName": "Clark Chen",
					"profile": {
						"name": {
							"fullName": "Clark Chen",
							"givenName": "Clark",
							"familyName": "Chen"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjWjO2l7PiC7GJIJ7a8eZb6Z1MtlbSf7Umz3mZw5hKNtAYrfZ5h_Kh2YelNE6smx1zjs1q4avYoxg4oIVjbwPXOXKJhrPocXg7CG70UWFOGFuo-Zdz3R5rx-qqgaWDTXs19Sw73LeT-UxtKAK9ZGCubu5tCERH8uPu3tgmIorIdedr-RqlN5WfZC7SUZn6kZoFnazB4VFKM1bMYJYFCEv68Yx-GESM7yBVSqiBVyJ2ZjjATb1nxl_Fk1ZHK3kUAaNvVraDe_YEVK-daKd5IyZBlsKmVvUrAMGngzsd7QDAIuJE3hIAj7P1Ibp-jAQ2vsXE2TT27cdvsnryn87QsG9jERjZxuoaHYiSsTOL9LdIgJ-UFNwqtAp-RFqFAvusUwyTijP4zZA0YYMBGc6GSW9mHGGrSZXec99jznPYJf3RO40yBtzYxP_1nZeF_wzdN42lGiIGzwGVI3x0Dy6SVbhN8Ux69qNBDYqGu6dkTvIk125tXpIZtu1CmXdL6TKZwlbJRkXzPsKa5Qvm7RFI6phmyRWNWdQPeXj6onrZKl178qEGhil4P6V0pEQ6KKssHywIcaXTcbDeXvV4lPmxEE8Lodumd5KcWxmntGtr6zn_RnY6KRbxlYO8AQ4hBJDN6fo_8aO42yCo0Du9egBUtHBgRXMv-IgCGmHccMLq2J876pX0_PhKfeNjrKFPw27X4Akc2Z08EczCXsVmDR6ptn1KuNcX9ZtMLNCKhF2L8NOoPYgl27EdhukCZ__XULPTmGteao2xC7XpP0HSJVohrac_wInschX2qZ63lXLzmErSBzjR-B1tAO7PCkIqt4WxoJNixEt92Tj8WM6_Y02ffclmTn-uj22K1JmXsJ9D3QXXe6rYUwoTLSdxyUSXXolDt8LlXbDQ-istRHOjadOdl4uTeb9cZPlAqpGNMrznTu75-mQlptePTI8L44pEbCSRpmCkgN7SbMXZryzgpZFHNO-UIBF0tR27k",
						"emailAddress": "348606054@gapps.yrdsb.ca",
						"id": "101394730938804923153"
					},
					"submissionCount": 0,
					"name": "Clark Chen",
					"id": "101394730938804923153",
					"userId": "101394730938804923153",
					"courseId": "737123279360",
					"email": "348606054@gapps.yrdsb.ca"
				},
				{
					"lastName": "Shaik",
					"firstName": "Saiful",
					"gradedSubmissionCount": 0,
					"displayName": "Saiful Shaik",
					"profile": {
						"name": {
							"fullName": "Saiful Shaik",
							"familyName": "Shaik",
							"givenName": "Saiful"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocIJ4KlLxk3CXIxj1ZE9m0M9k3EVqz5hvqnbiaRsYWGcBCqisQ=mo",
						"emailAddress": "350794947@gapps.yrdsb.ca",
						"id": "107600481194027020763"
					},
					"submissionCount": 0,
					"name": "Saiful Shaik",
					"id": "107600481194027020763",
					"userId": "107600481194027020763",
					"courseId": "737123279360",
					"email": "350794947@gapps.yrdsb.ca"
				},
				{
					"lastName": "Jeyakumar",
					"firstName": "Nereyal",
					"gradedSubmissionCount": 0,
					"displayName": "Nereyal Jeyakumar",
					"profile": {
						"name": {
							"fullName": "Nereyal Jeyakumar",
							"givenName": "Nereyal",
							"familyName": "Jeyakumar"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocKLCSQOMIfi_3B0GzCUuyet-eOGgdWZ5bjEw7pEbxn0BRnCvA=mo",
						"emailAddress": "350826681@gapps.yrdsb.ca",
						"id": "117262722973198948166"
					},
					"submissionCount": 0,
					"name": "Nereyal Jeyakumar",
					"id": "117262722973198948166",
					"userId": "117262722973198948166",
					"courseId": "737123279360",
					"email": "350826681@gapps.yrdsb.ca"
				},
				{
					"lastName": "Wang",
					"firstName": "Edward",
					"gradedSubmissionCount": 0,
					"displayName": "Edward Wang",
					"profile": {
						"name": {
							"fullName": "Edward Wang",
							"familyName": "Wang",
							"givenName": "Edward"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjW3Weymn8w7b9huJcjN8eltAiItAECZakkdHFQT8ITdGSaNiwe08QEmrL_fH62wW3JAIdIDve48bbtZ3tkP_TTlrCEBccdeZaS6-road5swZXp45as_ukaI8ZbFh3lan-WXjyu9dVAf-j0LAW-Wn_b3m3L_zoxyX54dZVURXW6sxx6OUlrAv8GcIOt7v5BSYFabFxTDyJY_ejKXx0uo6u4vVjU-AhFusztF54Iiu0bf4DGCsPKOyXgQROGLFvvq6pE4Af99H5dImaNSekQtNVd71dCN8CBJvJNWjouGBIAZquglbyR_uFACeehXES1wiQKINJVmOkGdmswjH7stYNldACLJupGLvCyQxHOvRxuAyJQnFIk02E5XDXb29i2RNrUVMphFROHkGnxsT0OauzBJG9GcMIbNbPDQC7t1HtTgUVVnYt1YLkhxeOpbdHPj4NGpV4Q_syRrsATFGvJvseJyVr0DpfTfra9XH4VIxkGshd72QI5tvPt9QHIXrwu2IhnD_JwF5eDDxvL6ULmMcEZv3ct33eYPd1XMtSIiOujyp_freeBSe9HuFaRrwcnCX_jaWrKQjEQOeJWEN2DMHSHoWaVj6eB6_JKNqvnGpMMuexbDtwID_fnW50MR4PsH8xJEDzGA2gFnum1Kjo7RXRpAG6bFtB0HMuNufOplg0pgKziK8Eb7Y5RHR8JYRfyDZBs9MlsPrz6GGXpAalcFHD0RxfVcn1M4fH3fp-C-LTdsO6_WChbEgh23jTkWWCyNxmMDiPI-0oCGq-zwazYnC6o08Pa4gosRB9aRewm_4sgxqE-uUKZTDLpF1smCsqWOBXJ8YAQBPUdJo9MxC0ZpWaWjEVIHxC2HT58jwGwIeTgV-Mkb87jMZ5Tl2HovEaFtVVGsEkc79rov6tTdMCmWHR5DLZ5Ceyj3OxjK9CoeAsf2piSRElBqPNbEuEx_4cDtfuLRi_JAXAHYsa_ghMTZqd2pUEraRUk",
						"emailAddress": "349541300@gapps.yrdsb.ca",
						"id": "115626057019275215839"
					},
					"submissionCount": 0,
					"name": "Edward Wang",
					"id": "115626057019275215839",
					"userId": "115626057019275215839",
					"courseId": "737123279360",
					"email": "349541300@gapps.yrdsb.ca"
				},
				{
					"lastName": "Wang",
					"firstName": "Steven",
					"gradedSubmissionCount": 0,
					"displayName": "Steven Wang",
					"profile": {
						"name": {
							"fullName": "Steven Wang",
							"givenName": "Steven",
							"familyName": "Wang"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocLTZreE-oBh9xAnP2VagI-fWnez7g0gZ-1mk1eS9OqpM17edw=mo",
						"emailAddress": "440037784@gapps.yrdsb.ca",
						"id": "102479132795602540628"
					},
					"submissionCount": 0,
					"name": "Steven Wang",
					"id": "102479132795602540628",
					"userId": "102479132795602540628",
					"courseId": "737123279360",
					"email": "440037784@gapps.yrdsb.ca"
				},
				{
					"lastName": "Meng",
					"firstName": "Lionson",
					"gradedSubmissionCount": 0,
					"displayName": "Lionson Meng",
					"profile": {
						"name": {
							"fullName": "Lionson Meng",
							"givenName": "Lionson",
							"familyName": "Meng"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocLUHBOcfWIeHGnX9hm8tPDRPX_grWW65Xwr_0U3--bm3Zacxw=mo",
						"emailAddress": "440029897@gapps.yrdsb.ca",
						"id": "115055209797540041904"
					},
					"submissionCount": 0,
					"name": "Lionson Meng",
					"id": "115055209797540041904",
					"userId": "115055209797540041904",
					"courseId": "737123279360",
					"email": "440029897@gapps.yrdsb.ca"
				},
				{
					"lastName": "Ku",
					"firstName": "Mark",
					"gradedSubmissionCount": 0,
					"displayName": "Mark Ku",
					"profile": {
						"name": {
							"fullName": "Mark Ku",
							"familyName": "Ku",
							"givenName": "Mark"
						},
						"photoUrl": "//lh3.googleusercontent.com/a/ACg8ocIF3VpPffD8-J-IVoTPgmVeE6k45g5aoLFuIkyTsv2CdFz8TKM=mo",
						"emailAddress": "349932921@gapps.yrdsb.ca",
						"id": "115009994018138969054"
					},
					"submissionCount": 0,
					"name": "Mark Ku",
					"id": "115009994018138969054",
					"userId": "115009994018138969054",
					"courseId": "737123279360",
					"email": "349932921@gapps.yrdsb.ca"
				},
				{
					"lastName": "Ji",
					"firstName": "Nathan",
					"gradedSubmissionCount": 0,
					"displayName": "Nathan Ji",
					"profile": {
						"name": {
							"fullName": "Nathan Ji",
							"familyName": "Ji",
							"givenName": "Nathan"
						},
						"photoUrl": "//lh3.googleusercontent.com/a-/ALV-UjUwdyjx5BxVXQX7OlbpYoO8djmcq9iF3oWIj7cH0Ap10gYE9UMXsonbOODqcHYg14v38j9oYJ2H5ObpZzOrrMbgpp0ae-BHFa1OSz3d1mocUtcTK_3E3mgqQj1uFXMZyi0gpKfeW4st8-NiySZzz3vOQhKW66uIlAppgYb9LosGnCZUktVdDYCr4eaBvAarbVayp1SrSpaa5KR_R3vG5-f35Y6pmNVoh9Zu5PCXrKtWvbFxqHBEZpBmW2wO-o9dF3XUw8YOrLRCstbI9gfJ8QdZoH4_9t7e_ZamAZ5NREO0TNDrJeGULXwJ9YueJMidm10TY2iLvek6jXh1rH6faD1bJNlPwJMBPcRXjJ8zoJBRC8avDDUq8vZlyG5k5aJH8LFHlgGsWN0YFyl1kQsBwdtjCgbP0vDbv6o-vh-ivb-eawm_7VH-LWy8s2hOze6thoiAoUCiMlYCZVwYvRImAYuoEHsuJVwDMVMYtqFyWFSm7s8rphtDOt-4dx2PhF376vcMce6OxEcbjTwVurw2H4fGyJNjs6-r96i7TvNXQbLLAIxfEV0jrZXJ5mpqFzCayWG-xQdaXrjW0IZXSRYsmp-zj51P3LMv1z52wik1E3Kex54zJCiWOgGyUvCnuMfeLWE9Bh620G07IQgmUNgGqQNfvNYt9sQfsC2mLW_JKkpVUynztgC51UG0nxJmecXM1lmIysoWgBKFvS-TGyI-LS4AGDWeb9qKYuwxR5Z5XseqdwLmKUKBvSf9W7GZg7xAczw9h9OALjoU3QWn9h45-6fwBJtsSTDaUfvZqWF7XMMxNY1Mt1CCBeN-AvdA0_9Rv2lEsWF39rVcvSFuiOOHyWh26TnormSDZeolEXxmO1cYv8w4V4h7GnJuDPd5VLxoOiOjMrPBdmxlZHy5zuFop7L93WGlsqVzUZ77dwH-nR-vXsQPIfa1I8C0hRqPlKjVovN51hVb_EqSoXzkjlDfNc2Oc0eRcfw",
						"emailAddress": "349045377@gapps.yrdsb.ca",
						"id": "107676755417854538820"
					},
					"submissionCount": 0,
					"name": "Nathan Ji",
					"id": "107676755417854538820",
					"userId": "107676755417854538820",
					"courseId": "737123279360",
					"email": "349045377@gapps.yrdsb.ca"
				}
			],
			"section": "05",
			"updateTime": "2025-08-07T18:13:46.327Z",
			"enrollmentCode": "",
			"assignmentCount": 30,
			"ownerId": "112484954830087908606",
			"totalSubmissions": 0,
			"room": "223",
			"ungradedSubmissions": 0,
			"calendarId": "c_classroom21310a30@group.calendar.google.com",
			"courseState": "ACTIVE",
			"submissions": [
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.221Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"id": "Cg0Isq_W0gkQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-11T11:48:42.990Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-11T22:53:43.337Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:48:43.027Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.224Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IwJXv6QsQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-06-11T11:48:44.111Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-06-11T22:34:01.070Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:48:44.148Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.227Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Ik7DJrAwQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-06-11T11:47:47.446Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-06-12T02:18:29.694Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:47:47.479Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.230Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-11T11:49:06.538Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-11T21:06:43.618Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QmLHHyeAW",
					"submittedAt": "2025-06-11T11:49:06.575Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.232Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-06-11T11:48:38.656Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-06-11T18:14:40.007Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQmLHHyeAW",
					"submittedAt": "2025-06-11T11:48:38.698Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.234Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Io-SHlhwQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-06-11T11:51:39.854Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-06-11T18:18:40.513Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:51:39.864Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.237Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-06-11T11:50:00.538Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-06-11T22:12:39.285Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:50:00.548Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.240Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ine-5hUQQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-11T11:50:54.872Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-12T16:59:18.450Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:50:54.884Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.244Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-06-11T11:49:30.236Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-06-12T00:17:58.170Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQmLHHyeAW",
					"submittedAt": "2025-06-11T11:49:30.247Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.247Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"id": "Cg0IvNTT8mcQmLHHyeAW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-06-11T11:48:03.283Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-06-12T17:39:23.435Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:48:03.294Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.250Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "[No content available]",
					"id": "Cg4Iwe6fnb8OEJixx8ngFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-06-11T11:49:50.657Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-06-12T02:56:05.958Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:49:50.667Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.253Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I05uw78AOEJixx8ngFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-06-11T11:47:58.794Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-06-11T18:26:59.985Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:47:58.803Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.255Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iurzi88AOEJixx8ngFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-06-11T11:50:29.756Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-06-11T18:27:38.927Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:50:29.789Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.258Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEJixx8ngFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-06-11T11:50:07.383Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-06-11T18:27:49.410Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:50:07.422Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.260Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEJixx8ngFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-06-11T11:49:20.770Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-06-13T19:40:20.417Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:49:20.778Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:52.263Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "781838309528",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzgxODM4MzA5NTI4/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"id": "Cg4I55juyqAPEJixx8ngFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-06-11T11:49:07.465Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-06-11T22:20:13.406Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-11T11:49:07.502Z",
					"assignmentName": "Play Games / Give Github Issue Feedback",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:53.961Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": true,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"id": "Cg0IvfCrsQEQqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-06-06T11:59:17.398Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-06-13T17:33:16.433Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-06-13T17:33:20.698Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-06-13T17:33:23.113Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:59:17.408Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:55.837Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-06T11:59:37.691Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-12T00:41:00.410Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-12T00:41:24.408Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-12T17:42:47.482Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQqKqFgLoV",
					"submittedAt": "2025-06-06T11:59:37.730Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:57.754Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"id": "Cg0I_qLZkQsQqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-06-06T11:59:01.333Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-06-13T00:31:28.964Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:59:01.371Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:37:59.544Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"id": "Cg0IwJXv6QsQqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-06-06T11:59:29.398Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-06-11T18:05:16.478Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:59:29.436Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:01.248Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-06-06T11:58:40.257Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-06-12T21:55:20.330Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQqKqFgLoV",
					"submittedAt": "2025-06-06T11:58:40.294Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:03.024Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"id": "Cg0I5qyc4Q4QqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-06T12:00:03.040Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-06T12:13:28.402Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-12T15:06:05.936Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-12T15:14:36.611Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-13T01:23:21.006Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-13T01:23:25.188Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T12:00:03.056Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:05.023Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-06-06T11:59:39.343Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-06-12T20:32:38.980Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:59:39.357Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:06.785Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-06-06T12:01:37.738Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-06-11T18:29:42.678Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQqKqFgLoV",
					"submittedAt": "2025-06-06T12:01:37.773Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:08.540Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": true,
					"studentName": "Clark Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ik_u42h8QqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-06-06T12:00:48.448Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-06-13T17:56:24.124Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T12:00:48.483Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:10.271Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-06-06T12:01:55.350Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-06-12T21:53:02.453Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQqKqFgLoV",
					"submittedAt": "2025-06-06T12:01:55.361Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:11.894Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": true,
					"studentName": "Leo So",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-06-06T11:58:43.053Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-06-14T18:53:18.418Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQqKqFgLoV",
					"submittedAt": "2025-06-06T11:58:43.091Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:13.714Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-06T12:02:07.456Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-06T17:35:57.833Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-06T17:37:27.212Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-12T16:59:00.132Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQqKqFgLoV",
					"submittedAt": "2025-06-06T12:02:07.497Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:15.384Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"I succeeded in accomplishing what I set out to do.": "5",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQqKqFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-06-06T12:00:50.671Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-06-12T01:13:29.768Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T12:00:50.707Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:17.928Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-06-06T11:59:01.595Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-06-12T17:39:03.391Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQqKqFgLoV",
					"submittedAt": "2025-06-06T11:59:01.635Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:20.177Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4Iwe6fnb8OEKiqhYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-06-06T12:00:16.169Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-06-12T20:49:29.817Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-06-12T20:49:38.070Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T12:00:16.183Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:22.020Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "John Ning",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"id": "Cg4I05uw78AOEKiqhYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-06-06T11:58:55.871Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-06-11T18:27:07.377Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-06-11T18:28:43.970Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:58:55.880Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:23.610Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-06-06T12:01:00.921Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-06-13T03:05:48.721Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEKiqhYC6FQ",
					"submittedAt": "2025-06-06T12:01:00.959Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:25.312Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"formTitle": "Project and Course Reflection",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-06-06T12:00:20.588Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-06-11T18:36:17.003Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEKiqhYC6FQ",
					"submittedAt": "2025-06-06T12:00:20.631Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:27.025Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEKiqhYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-06-06T12:00:15.146Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-06-13T00:27:44.491Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T12:00:15.155Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:29.430Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-06-06T12:00:46.277Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-06-11T22:55:31.074Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-06-11T22:55:43.099Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEKiqhYC6FQ",
					"submittedAt": "2025-06-06T12:00:46.287Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:31.266Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Last Name": "So",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved."
						}
					},
					"late": true,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"id": "Cg4I7ZHxyucSEKiqhYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-06-06T11:59:37.415Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-06-13T17:34:49.569Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-06-13T17:35:05.111Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:59:37.444Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:32.964Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 7,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"First Name": "Leo ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": true,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iu8ODue4SEKiqhYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-06-06T12:01:16.325Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-06-12T17:52:31.787Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-06-13T17:37:46.800Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T12:01:16.362Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:34.685Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 10,
					"assignmentId": "737123849512",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"questionCount": 7,
								"matchedByEmail": false,
								"responseTime": "2025-06-14T18:53:18.315Z",
								"totalFormResponses": 25,
								"extractionMethod": "FormApp",
								"formTitle": "Project and Course Reflection",
								"contentType": "form",
								"email": "anonymous",
								"responseId": "2_ABaOnufyfXOFplrFNv8qasziAV04bA8xUMXQxEUMaq8j9H8m1M7WYSbkPjKwF_Ew3Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: I succeeded in accomplishing what I set out to do.\nA: 5\n\nQ: What were your 3 favorite games that you played from our class? Explain briefly.\nA: Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. \n\nQ: Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?\nA: I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.\n\nQ: I am proud of what I have learned and accomplished.\nA: 5\n\nQ: Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?\nA: I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
						"structuredData": {
							"I am proud of what I have learned and accomplished.": "5",
							"I succeeded in accomplishing what I set out to do.": "5",
							"Share about your Greenfoot project experience.  What game features were you particularly proud of? Were there features you spent a considerable amount of time on? What was challenging? What was rewarding? If you were on a team, how did that work out?": "I had a lot of fun creating this project on Greenfoot, it was a new experience that I found fun throughout the whole proccess. A game feature that I am proud of and took the most time is the randomized bomb feature. This feature made bombs spawn anywhere at anytime during each wave. Not only does this make it harder for the player to hit meteors but they also need to dodge so that they don't get hit by it. One thing that was challenging for me was the collisions. A lot of the images we used had invisible backgrounds, which made it so that it would detect the hit way too early and end the game since it would detect the background of the image, not the actual object in the image. This was fixed through finding better fitting images and cropping the background as much as possible without affecting the object. The most rewarding throughout this project was witnessing our vision of the game slowly come to life. With every feature added, a sense of accomplishment was felt and it motivated me more to continue working hard to add more features to produce a better game. Working in a team worked out extremely well for us. The work load was split and we both worked on our own respective tasks which made the process so much easier. There were some times where there was some miscommunication and merge conflicts occured but that is an easy fix. Other than that, our teamwork was well structured and we went throuhg this project pretty smoothly.",
							"First Name": "Leo ",
							"What were your 3 favorite games that you played from our class? Explain briefly.": "Jiayu and Saiful's (The Hollow Quest)\n- This game had awesome graphics and a very interesting storyline. Instructions were easy to follow and there were cool features that made the game better, for example, being able to change your controls and a shop where you can upgrade your character.\n\nCayden and John (Boss Fight)\n- Even though this game had a simple concept, it was super fun. The new stages of bosses were very challenging but that is what made it addictive. It made me determined to beat the bosses, which in turn, kept me playing. The sond effects were also nice.\n\nAbithan an Clark (2048)\n- This game is a recreation of the original 2048 which I love and grew up playing as a kid. Playing this game gave me tons of nostalgia and I was extremely surprised that they were able to recreate it so perfectly. ",
							"Please leave a comment about your experience with Greenfoot, Github, CodeHS, programming, or anything related to this course.  Was there something you really enjoyed?  Is there something that you feel could be improved?": "I like how we started off with CodeHS since it helped us learn the basics and fundamentals of coding before we transitioned into the more complicated Github and Greenfoot tasks. For me personally, I was struggling with trying to understand Github at first but the brief explanations at the start of every class was very helpful and ultimately burned it into my head. I enjoyed this final project the most because we were able to use our own creativity and see what my classmates were able to come up with. Overall, I loved my time in this course and there is nothing I feel like needs to be improved.",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NTEy/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTEKiqhYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-06-06T11:58:32.125Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-06-13T02:39:05.760Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-06-06T11:58:32.166Z",
					"assignmentName": "Project and Course Reflection",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:36.991Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T17:53:46.299Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349168732@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudTErr9IWOlUlPbOuQQYeVDCOusEPwc4Sc7YJQV9GHHzcDsgpZjImrA4ylftw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Joe\n\nQ: Last Name\nA: Zhuo\n\nQ: public int sum(int[] arr)\nA: {\n    int total = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) total += arr[i];\n    }\n\n    return total;\n}\n\nQ: public int f(int d) {\nA:     int doubledValue = 2 * d;\n    int sum = 0;\n \n    while (true) {\n        int onesDigit = doubledValue % 10;\n\n        sum += onesDigit;\n\n        doubledValue -= onesDigit;\n        doubledValue /= 10;\n\n        if (doubledValue == 0) break;\n    }\n\n    return sum;\n}\n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = 0;\n\n    for (int i = 0; i < account.length; i++) {\n        if (i % 2 == 0) sum += account[i];\n        else sum += f(account[i]);\n    }\n    \n    if (sum % 10 == 0) return true;\n    return false;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "    int doubledValue = 2 * d;\n    int sum = 0;\n \n    while (true) {\n        int onesDigit = doubledValue % 10;\n\n        sum += onesDigit;\n\n        doubledValue -= onesDigit;\n        doubledValue /= 10;\n\n        if (doubledValue == 0) break;\n    }\n\n    return sum;\n}",
							"First Name": "Joe",
							"Last Name": "Zhuo",
							"Give the value of banana[3]": "2",
							"Give the value of apple[0]": "1",
							"public boolean checkSum(int[] account) {": "    int sum = 0;\n\n    for (int i = 0; i < account.length; i++) {\n        if (i % 2 == 0) sum += account[i];\n        else sum += f(account[i]);\n    }\n    \n    if (sum % 10 == 0) return true;\n    return false;\n}",
							"public int sum(int[] arr)": "{\n    int total = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) total += arr[i];\n    }\n\n    return total;\n}"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IvfCrsQEQ9KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-14T17:37:25.255Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-14T17:51:58.056Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:25.264Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:39.090Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:31:16.457Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudSksuD0jsa9q8ZVIQkvOsmO2s6j2L64oFgKnaKK00pPFYeKWH0pb2YAblzZg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Abithan \n\nQ: Last Name\nA: Paskaranathan\n\nQ: public int sum(int[] arr)\nA:     int negSum = 0;\n\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (Math.abs(arr[i]) !=arr[i])\n        {\n            negSum += arr[i];\n        }\n    }\n    return negSum;\n}\n\nQ: public int f(int d) {\nA:     int sum = 0;\n\n    int doubleDig= d* 2; \n\n    // ex : 13   -->      26    -     ((int)(26   /   10) = 2  *  10  = 20  )  = 6  \n    int lastDig = doubleDig - ((int)(doubleDig /10) * 10);\n\n    //26 ex:                                         (int)(26/10) = 2   + 6 == 8\n    sum = doubleDig.length == 1 ? (int)(doubleDig / 10) + lastDig : doubleDig;\n   \n    return sum;\n}\n\nQ: public boolean checkSum(int[] account) {\nA:     int sumTotal = 0;\n    String str = \"\" + account;\n\n    for (int i = 0; i < account.length; i++)\n    {\n        char ch = str.charAt(i);\n        int digit = Character.digitOf(ch);   //gets the digit of the character\n\n        if (i % 2 != 0)\n        {\n            sumTotal += f(digit);\n        }\n    }\n\n    return sumTotal;\n}\n\nQ: Give the value of apple[0]\nA:    1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: \"error\"\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "\"error\"",
							"public int f(int d) {": "    int sum = 0;\n\n    int doubleDig= d* 2; \n\n    // ex : 13   -->      26    -     ((int)(26   /   10) = 2  *  10  = 20  )  = 6  \n    int lastDig = doubleDig - ((int)(doubleDig /10) * 10);\n\n    //26 ex:                                         (int)(26/10) = 2   + 6 == 8\n    sum = doubleDig.length == 1 ? (int)(doubleDig / 10) + lastDig : doubleDig;\n   \n    return sum;\n}",
							"First Name": "Abithan ",
							"Last Name": "Paskaranathan",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "   1",
							"public boolean checkSum(int[] account) {": "    int sumTotal = 0;\n    String str = \"\" + account;\n\n    for (int i = 0; i < account.length; i++)\n    {\n        char ch = str.charAt(i);\n        int digit = Character.digitOf(ch);   //gets the digit of the character\n\n        if (i % 2 != 0)\n        {\n            sumTotal += f(digit);\n        }\n    }\n\n    return sumTotal;\n}",
							"public int sum(int[] arr)": "    int negSum = 0;\n\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (Math.abs(arr[i]) !=arr[i])\n        {\n            negSum += arr[i];\n        }\n    }\n    return negSum;\n}"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-14T17:37:22.689Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-14T18:31:16.560Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:22.697Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:41.000Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:13:17.289Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufXT83VJXJ6o8wgRkv1hvKjnw-7pNgjhhZuq7k_KX9EmEiVdxClr66RinyNmg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: public int sum(int[] arr)\nA: int sum = 0;\nfor(int i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n        sum = sum + arr[i];\n    }\n}\nreturn sum;\n\nQ: public int f(int d) {\nA: int sum = 0;\nd = d * 2;\nif (d >= 10){\n    sum = 1 + (d%10);\n} else {\n    sum = d;\n}\nreturn sum;\n\nQ: public boolean checkSum(int[] account) {\nA: int total = 0;\nfor (int i = 0; i < account.length; i++){\n    if(i % 2 == 0){\n        total = total + account[i];\n    } else {\n        total = total + f(account[i]);\n    }\n}\nreturn (total % 10 == 0);\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "int sum = 0;\nd = d * 2;\nif (d >= 10){\n    sum = 1 + (d%10);\n} else {\n    sum = d;\n}\nreturn sum;",
							"First Name": "Owen",
							"Last Name": "Lee",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public boolean checkSum(int[] account) {": "int total = 0;\nfor (int i = 0; i < account.length; i++){\n    if(i % 2 == 0){\n        total = total + account[i];\n    } else {\n        total = total + f(account[i]);\n    }\n}\nreturn (total % 10 == 0);",
							"public int sum(int[] arr)": "int sum = 0;\nfor(int i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n        sum = sum + arr[i];\n    }\n}\nreturn sum;"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"id": "Cg0I_qLZkQsQ9KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-14T17:37:25.369Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-14T18:13:17.429Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:25.392Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:43.675Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:11:44.204Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueOVwLYMzeDMjxZG_6dmzNu6WLXi7tYkeKaQ65gv7cV9V1cPYx8cJvnn2IpqA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kian\n\nQ: Last Name\nA: Mistry\n\nQ: public int sum(int[] arr)\nA: if (sum[] < 0)\n{\n    return sum;\n}\n\nQ: public int f(int d) {\nA: int doubled = 2 * d;\nint digit1 = doubled.substring(1);\nint digit2 = doubled.substring(2);\nreturn digit 1 + digit 2;\n\nQ: public boolean checkSum(int[] account) {\nA:     int add = account[0] + f(account[1]) + account[2] + f(account[3]);\n    int check = add % 10;\n\n    if (check == 0)\n    {\n        return true;\n    }\n    return false;\n}\n\nQ: Give the value of apple[0]\nA: 0.33\n\nQ: Give the value of banana[3]\nA: 1.25\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"First Name": "Kian",
							"public int f(int d) {": "int doubled = 2 * d;\nint digit1 = doubled.substring(1);\nint digit2 = doubled.substring(2);\nreturn digit 1 + digit 2;",
							"Last Name": "Mistry",
							"Give the value of banana[3]": "1.25",
							"public boolean checkSum(int[] account) {": "    int add = account[0] + f(account[1]) + account[2] + f(account[3]);\n    int check = add % 10;\n\n    if (check == 0)\n    {\n        return true;\n    }\n    return false;\n}",
							"public int sum(int[] arr)": "if (sum[] < 0)\n{\n    return sum;\n}",
							"Give the value of apple[0]": "0.33"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-14T17:37:20.205Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-14T18:11:44.302Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:20.212Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:45.617Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:13:45.026Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf4t_XmUK1DbrFlinJYmXIhCD9xMVLXZLYhEGpXhG1iu-HIK9KWfzFHBUvJAg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: public int sum(int[] arr)\nA: public int sum(int[] arr) {\n    int nSum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            nSum += arr[i];\n        }\n    }\n    return nSum;\n}\n\nQ: public int f(int d) {\nA: public int f(int d) {\n    int sum = 0;\n    int twiceD = d* 2;\n    \n    for (int i = 1; i <= d * 2; i *= 10) {\n        sum += twiceD % 10;\n        twiceD = (twiceD - twiceD % 10) / 10;\n    }\n    \n    return sum;\n}\n\nQ: public boolean checkSum(int[] account) {\nA: public boolean checkSum(int[] account) {\n    int sum = 0;\n    for (int i = 0; i < account.length; i++) {\n        if (i % 2 == 0) {\n            sum += account[i];\n        } else {\n            sum += f(account[i]);\n        }\n    }\n    return sum % 10 == 0;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"First Name": "Kelton",
							"public int f(int d) {": "public int f(int d) {\n    int sum = 0;\n    int twiceD = d* 2;\n    \n    for (int i = 1; i <= d * 2; i *= 10) {\n        sum += twiceD % 10;\n        twiceD = (twiceD - twiceD % 10) / 10;\n    }\n    \n    return sum;\n}",
							"Last Name": "Kuan",
							"Give the value of banana[3]": "2",
							"public boolean checkSum(int[] account) {": "public boolean checkSum(int[] account) {\n    int sum = 0;\n    for (int i = 0; i < account.length; i++) {\n        if (i % 2 == 0) {\n            sum += account[i];\n        } else {\n            sum += f(account[i]);\n        }\n    }\n    return sum % 10 == 0;\n}",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "public int sum(int[] arr) {\n    int nSum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            nSum += arr[i];\n        }\n    }\n    return nSum;\n}"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"id": "Cg0Ik7DJrAwQ9KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-14T17:37:20.291Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-14T18:13:45.148Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:20.298Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:47.546Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T17:57:52.271Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudYr1nHmChI1gh_DF_fFX0WrpGM_PbT0i7Dqap5DNUyLZolK36cSA3-8w4c2Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: public int sum(int[] arr)\nA: {    \n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nQ: public int f(int d) {\nA:     int sum = 0;\n    if (d <= 4) {\n        sum = d * 2;\n    } else if (d <= 9) {\n        sum = (d * 2) % 10 + 1;\n    }\n    return sum;\n}\n\nQ: public boolean checkSum(int[] account) {\nA:     int total = 0;\n    for (int i = 0; i < account.length; i++) {\n        if (account[i] % 2 != 0) {\n            total += f(account[i]);\n        } else {\n            total += account[i];\n        }\n    }\n    return total % 10 == 0;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "    int sum = 0;\n    if (d <= 4) {\n        sum = d * 2;\n    } else if (d <= 9) {\n        sum = (d * 2) % 10 + 1;\n    }\n    return sum;\n}",
							"First Name": "Jiayu",
							"Last Name": "Chen",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "{    \n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
							"public boolean checkSum(int[] account) {": "    int total = 0;\n    for (int i = 0; i < account.length; i++) {\n        if (account[i] % 2 != 0) {\n            total += f(account[i]);\n        } else {\n            total += account[i];\n        }\n    }\n    return total % 10 == 0;\n}"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-14T17:37:28.371Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-14T17:57:52.359Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:28.442Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:50.091Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:20:56.743Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuet-nmIRepsscYaIiD05M_sYGwF-TW6zAi91fsX8mNT6Xyk6U_WMOkYbcvklg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Veznu \n\nQ: Last Name\nA: Premathas \n\nQ: public int sum(int[] arr)\nA: int negativeSum = 0;\n\n    for(int i=0; i<nums.length; i++)\n    {\n        if(nums[i] < 0)\n        {\n            negativeSum += nums[i];\n        }\n    }\n\nreturn negativeSum;\n\nQ: public int f(int d) {\nA: int sum = 0;\n\n//if even number it will double and find the sum of the first and second digit of the multiple \nif( d % 2 == 0) \n{\n    int multiplied  = d * 2;\n    \n    //add the first digit \n    int firstDigit = multiplied/10;\n    sum += firstDigit;\n\n    //add the second digit to the sum\n    int secondDigit = multiplied%10;\n    sum+= secondDigit;\n}\nelse \n{\n    sum = d;\n}\nreturn sum; \n\nQ: public boolean checkSum(int[] account) {\nA: boolean validAccount = true \nint cardNumSum = 0;\n\nfor(int i=0 ; i<account.length ; i++)\n{\n    cardNumSum += f(account[i]);\n}\n\nif(cardNumSum % 10 != 0)\n{\n    validAccount = false;\n} \n\nreturn validAccount;\n    \n\nQ: Give the value of apple[0]\nA: 2\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: error \n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\", \"B\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\", \"B\"}",
							"Give the value of apple[4]": "error ",
							"public int f(int d) {": "int sum = 0;\n\n//if even number it will double and find the sum of the first and second digit of the multiple \nif( d % 2 == 0) \n{\n    int multiplied  = d * 2;\n    \n    //add the first digit \n    int firstDigit = multiplied/10;\n    sum += firstDigit;\n\n    //add the second digit to the sum\n    int secondDigit = multiplied%10;\n    sum+= secondDigit;\n}\nelse \n{\n    sum = d;\n}\nreturn sum; ",
							"First Name": "Veznu ",
							"Last Name": "Premathas ",
							"Give the value of banana[3]": "2",
							"public boolean checkSum(int[] account) {": "boolean validAccount = true \nint cardNumSum = 0;\n\nfor(int i=0 ; i<account.length ; i++)\n{\n    cardNumSum += f(account[i]);\n}\n\nif(cardNumSum % 10 != 0)\n{\n    validAccount = false;\n} \n\nreturn validAccount;\n    ",
							"Give the value of apple[0]": "2",
							"public int sum(int[] arr)": "int negativeSum = 0;\n\n    for(int i=0; i<nums.length; i++)\n    {\n        if(nums[i] < 0)\n        {\n            negativeSum += nums[i];\n        }\n    }\n\nreturn negativeSum;"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"id": "Cg0IhKbr2BYQ9KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-14T17:37:26.945Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-14T18:20:56.858Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:26.959Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:52.483Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T17:58:49.810Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349045377@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueolDoA7gN5B5T-vRXzJWVX-WKvDn-41aBQQ8bgdu6LDo118OTsHbp2nJPW3A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nathan\n\nQ: Last Name\nA: Ji\n\nQ: public int sum(int[] arr)\nA: {\n    int sum = 0;\n\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] < 0) {\n            sum += arr[i];\n        }\n    }\n\n    return sum;\n}\n\nQ: public int f(int d) {\nA:     int doubled = 2 * d;\n    int sum = (doubled / 10) + (doubled % 10);\n    return sum;\n}\n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = 0;\n    \n    for (int i = 0; i < account.length; i++) {\n        if (i % 2 == 0) {\n            sum += account[i];\n        } else { \n            sum += f(account[i]); \n        }\n    }\n    return sum % 10 == 0;\n}\n\nQ: Give the value of apple[0]\nA: 0\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "    int doubled = 2 * d;\n    int sum = (doubled / 10) + (doubled % 10);\n    return sum;\n}",
							"First Name": "Nathan",
							"Last Name": "Ji",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "0",
							"public int sum(int[] arr)": "{\n    int sum = 0;\n\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] < 0) {\n            sum += arr[i];\n        }\n    }\n\n    return sum;\n}",
							"public boolean checkSum(int[] account) {": "    int sum = 0;\n    \n    for (int i = 0; i < account.length; i++) {\n        if (i % 2 == 0) {\n            sum += account[i];\n        } else { \n            sum += f(account[i]); \n        }\n    }\n    return sum % 10 == 0;\n}"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-14T17:37:25.515Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-14T17:58:49.934Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:25.523Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:54.789Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:47:39.995Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucedKK40sCX8c7pYukyZXIhe3nHJKwTSn2cqCb504zMhOaRukcBILQloCOtXg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: public int sum(int[] arr)\nA: int sum = 0;\nfor(int i = 0; i < nums.length; i++)\n{\n    sum += nums[i];\n}\nreturn sum;\n\nQ: public int f(int d) {\nA: int value = 2*d;\nint sumDigits = 0;\n\nint sumDigits = (value % 10 + 1)  \nreturn sumDigits;\n\n\n\n\n\n\n\nQ: public boolean checkSum(int[] account) {\nA: \n\nint storeAmount = 0;\n\nfor(int i = 0; i < account.length; i++)\n{\n    if(account[i] % 2 == 1)\n    {\n         storeAmount += account[i];\n     }\n}\n\nfor(int i = 0; i < account.length; i++)\n{\n    if(i % 2 == 0)\n    {\n        storeAmount += account[i]; \n     }\n}\nif(storeAmount % 10 == 0)\n{\n    return true;\n}\nreturn false;\n\n        \n   \n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "int value = 2*d;\nint sumDigits = 0;\n\nint sumDigits = (value % 10 + 1)  \nreturn sumDigits;\n\n\n\n\n\n",
							"First Name": "Clark",
							"Last Name": "Chen",
							"Give the value of banana[3]": "2",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "int sum = 0;\nfor(int i = 0; i < nums.length; i++)\n{\n    sum += nums[i];\n}\nreturn sum;",
							"public boolean checkSum(int[] account) {": "\n\nint storeAmount = 0;\n\nfor(int i = 0; i < account.length; i++)\n{\n    if(account[i] % 2 == 1)\n    {\n         storeAmount += account[i];\n     }\n}\n\nfor(int i = 0; i < account.length; i++)\n{\n    if(i % 2 == 0)\n    {\n        storeAmount += account[i]; \n     }\n}\nif(storeAmount % 10 == 0)\n{\n    return true;\n}\nreturn false;\n\n        \n   "
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ik_u42h8Q9KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-05-14T17:37:24.602Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-05-14T18:47:40.090Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:24.610Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:56.841Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:11:02.431Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucctnRdCvJnmAMLyHifHvYXPvzsalr1ioo7gHUPcL9SQEW1RNuur9qHU7MZyA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Edward\n\nQ: Last Name\nA: Wang\n\nQ: public int sum(int[] arr)\nA: public int sum (int[] arr)\n{\n    int sum = 0;\n\n    for (int i = 0 ; i < arr.length ; i++)\n    {\n        if (arr[i] < 0)\n        {\n             sum+=arr[i];   \n        }\n    }    \n    return sum;\n}\n\nQ: public int f(int d) {\nA:     int product = 2*d;\n    \n    int sum = 1 + product%10;\n\n    if (product==0)\n    {\n        sum = 0;\n    }\n    return sum;\n} \n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = 0;  \n    for (int i = 0; i < account.length ; i++)\n    {\n        if (i%2 != 0 )\n        {\n            sum+= f(account[i]);            \n        }\n        else\n        {\n            sum+= account[i];\n        }      \n    }\n    if (sum%10 == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nQ: Give the value of apple[0]\nA: 0\n\nQ: Give the value of banana[3]\nA: 0\n\nQ: Give the value of apple[4]\nA: 1\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\", \"B\"}\n\nQ: aMethod({\"a\"})\nA: A",
						"structuredData": {
							"aMethod({\"a\"})": "A",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\", \"B\"}",
							"Give the value of apple[4]": "1",
							"public int f(int d) {": "    int product = 2*d;\n    \n    int sum = 1 + product%10;\n\n    if (product==0)\n    {\n        sum = 0;\n    }\n    return sum;\n} ",
							"First Name": "Edward",
							"Last Name": "Wang",
							"Give the value of banana[3]": "0",
							"public int sum(int[] arr)": "public int sum (int[] arr)\n{\n    int sum = 0;\n\n    for (int i = 0 ; i < arr.length ; i++)\n    {\n        if (arr[i] < 0)\n        {\n             sum+=arr[i];   \n        }\n    }    \n    return sum;\n}",
							"Give the value of apple[0]": "0",
							"public boolean checkSum(int[] account) {": "    int sum = 0;  \n    for (int i = 0; i < account.length ; i++)\n    {\n        if (i%2 != 0 )\n        {\n            sum+= f(account[i]);            \n        }\n        else\n        {\n            sum+= account[i];\n        }      \n    }\n    if (sum%10 == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-14T17:37:25.181Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-14T18:11:02.532Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:25.186Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:38:58.967Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:27:42.874Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucwvzGiOSUPWEMsbnXVW-WFI9BBlH76Fx9YFaciDlYOVfGzHTPGd4qZWR4q4Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: public int sum(int[] arr)\nA:     int sum = 0;\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] < 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\nQ: public int f(int d) {\nA:     int sum = 0;\n    int doubled = 2 * d;\n    if(doubled >= 10)\n    {\n        int remainder = doubled % 10;\n        sum = 1 + remainder; \n    }\n    else \n    {\n        return doubled;\n    }\n    return sum;\n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = 0;\n    for(int i = 1; i < account.length; i+=2)\n    {\n        sum += f(arr[i]);\n    }\n    for(int i = 0; i < account length: i+=2)\n    {\n        sum += arr[i];\n    }\n    \n    if(sum % 10 != 0)\n    {\n        return false;\n    }\n    return true;  \n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: A",
						"structuredData": {
							"aMethod({\"a\"})": "A",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "    int sum = 0;\n    int doubled = 2 * d;\n    if(doubled >= 10)\n    {\n        int remainder = doubled % 10;\n        sum = 1 + remainder; \n    }\n    else \n    {\n        return doubled;\n    }\n    return sum;",
							"First Name": "Leo",
							"Last Name": "So",
							"Give the value of banana[3]": "4",
							"public int sum(int[] arr)": "    int sum = 0;\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] < 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;",
							"public boolean checkSum(int[] account) {": "    int sum = 0;\n    for(int i = 1; i < account.length; i+=2)\n    {\n        sum += f(arr[i]);\n    }\n    for(int i = 0; i < account length: i+=2)\n    {\n        sum += arr[i];\n    }\n    \n    if(sum % 10 != 0)\n    {\n        return false;\n    }\n    return true;  ",
							"Give the value of apple[0]": "1"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-14T17:37:32.698Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-14T18:27:43.016Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:32.708Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:01.078Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:19:07.846Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudzeq9jK_8_AoyFyBCPqXvBAYmJ0EPfLR9dSRFFpNB4HCfwB5c2yZooD8A5YQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: public int sum(int[] arr)\nA: int sum = 0;\nfor (int i=0; i<arr.length; i++)\n{\n    if arr[i] < 0;\n    {\n        sum += arr[i];\n    }\n}\nreturn sum;\n\nQ: public int f(int d) {\nA: int twiceD = 2 * d;\nint sumDigits = 0;\nif(twiceD > 0) \n{\n    sumDigits += twiceD % 10;\n    twiceD /= 10;\n}\nreturn sumDigits;\n\n\nQ: public boolean checkSum(int[] account) {\nA: int sum = 0;\nfor (int i=0; i<account.length; i++) \n{\n    sum += f(account[i]);\n}\nif (sum % 10 == 0)\n{\n    return true;\n}\nreturn false;\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\", \"B\"}\n\nQ: aMethod({\"a\"})\nA: A",
						"structuredData": {
							"aMethod({\"a\"})": "A",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\", \"B\"}",
							"Give the value of apple[4]": "error",
							"First Name": "Mark",
							"public int f(int d) {": "int twiceD = 2 * d;\nint sumDigits = 0;\nif(twiceD > 0) \n{\n    sumDigits += twiceD % 10;\n    twiceD /= 10;\n}\nreturn sumDigits;\n",
							"Last Name": "Ku",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "int sum = 0;\nfor (int i=0; i<arr.length; i++)\n{\n    if arr[i] < 0;\n    {\n        sum += arr[i];\n    }\n}\nreturn sum;",
							"public boolean checkSum(int[] account) {": "int sum = 0;\nfor (int i=0; i<account.length; i++) \n{\n    sum += f(account[i]);\n}\nif (sum % 10 == 0)\n{\n    return true;\n}\nreturn false;"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-14T17:37:23.359Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-14T18:19:07.951Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:23.367Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:02.955Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:42:44.698Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufmMiwPQvu_sqI-9op8YNeB5s3XNHtVK-maaSGeh6HaLGMkZYcd9xJUHp3BRQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: public int sum(int[] arr)\nA: public int sum(int[] arr) \n{\n    int sum = 0; \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nQ: public int f(int d) {\nA:     int count = d*2; \n    int x = count%10;\n    int y = count/10; \n    return x+y; \n} \n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = account[0]; \n    for (int i = 1; i < account.length; i++)\n    {\n        if (account[i]%2 == 0)\n        {\n            sum+=f(account[i]);\n        }\n        if (account[i]%2 !=0)\n        {\n            sum+=account[i];\n        }\n    }\n    if(sum%10 == 0)\n    {\n        return true; \n    }\n    else\n    {\n        return false;\n    }\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "    int count = d*2; \n    int x = count%10;\n    int y = count/10; \n    return x+y; \n} ",
							"First Name": "Carmen",
							"Last Name": "Cheung",
							"Give the value of banana[3]": "4",
							"public boolean checkSum(int[] account) {": "    int sum = account[0]; \n    for (int i = 1; i < account.length; i++)\n    {\n        if (account[i]%2 == 0)\n        {\n            sum+=f(account[i]);\n        }\n        if (account[i]%2 !=0)\n        {\n            sum+=account[i];\n        }\n    }\n    if(sum%10 == 0)\n    {\n        return true; \n    }\n    else\n    {\n        return false;\n    }\n}",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "public int sum(int[] arr) \n{\n    int sum = 0; \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-14T17:37:22.275Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-14T18:42:44.785Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQ9KmFgLoV",
					"submittedAt": "2025-05-14T17:37:22.282Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:05.770Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:20:47.231Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue81gT90j2qdJ78LHih9zjMo4o6KP6_cuk567N-PWraarLBqmKsv81uQdS63Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena\n\nQ: Last Name\nA: Godek\n\nQ: public int sum(int[] arr)\nA: {\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] <= 0)\n        {\n            sum+= arr[i];\n        }\n    }\n    return sum;\n}\n\nQ: public int f(int d) {\nA: {\n    int doubleD = 2*d;\n    int lastDigit =  doubleD%10;\n    int firstDigit = doubleD / 10;\n    return firstDigit + lastDigit;\n}\n\nQ: public boolean checkSum(int[] account) {\nA: {\n    int sum = 0;\n    for(int i = 0; i < account.length; i++)\n    {\n        if(i%2 != 0)\n        {\n            sum += f(account[i]);\n        }\n        else\n        {\n            sum+= account[i];\n        }\n    }\n\n    if(sum%10 == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n\n}\n\nQ: Give the value of apple[0]\nA: 0\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"First Name": "Sena",
							"public int f(int d) {": "{\n    int doubleD = 2*d;\n    int lastDigit =  doubleD%10;\n    int firstDigit = doubleD / 10;\n    return firstDigit + lastDigit;\n}",
							"Last Name": "Godek",
							"Give the value of banana[3]": "2",
							"public int sum(int[] arr)": "{\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] <= 0)\n        {\n            sum+= arr[i];\n        }\n    }\n    return sum;\n}",
							"Give the value of apple[0]": "0",
							"public boolean checkSum(int[] account) {": "{\n    int sum = 0;\n    for(int i = 0; i < account.length; i++)\n    {\n        if(i%2 != 0)\n        {\n            sum += f(account[i]);\n        }\n        else\n        {\n            sum+= account[i];\n        }\n    }\n\n    if(sum%10 == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n\n}"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"id": "Cg0IvNTT8mcQ9KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-14T17:37:24.491Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-14T18:20:47.345Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:24.498Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:08.354Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:23:27.348Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueqEmMYvJJyl7oAe-QIrKXFCz63BcZz1p-9MM5lE4rjgBHn8McN8UBvsHnDwQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: public int sum(int[] arr)\nA: int sum = 0;\nfor (int i = 0; i < arr.length; i++) {\n    sum = (arr[i] < 0) ? sum + arr[i] : sum;\n}\nreturn sum;\n\nQ: public int f(int d) {\nA: int sum = 0;\nint doubled = 2 * d;\nwhile (doubled > 0) {\n    sum += doubled % 10;\n    doubled /= 10;\n}\nreturn sum;\n\nQ: public boolean checkSum(int[] account) {\nA: int sum = 0;\nfor (int i = 0; i < account.length; i++) {\n    sum = (i % 2 == 1) ? sum + f(account[i]) : sum + account[i];\n}\nreturn sum % 10 == 0;\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "int sum = 0;\nint doubled = 2 * d;\nwhile (doubled > 0) {\n    sum += doubled % 10;\n    doubled /= 10;\n}\nreturn sum;",
							"First Name": "Saiful",
							"Last Name": "Shaik",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public boolean checkSum(int[] account) {": "int sum = 0;\nfor (int i = 0; i < account.length; i++) {\n    sum = (i % 2 == 1) ? sum + f(account[i]) : sum + account[i];\n}\nreturn sum % 10 == 0;",
							"public int sum(int[] arr)": "int sum = 0;\nfor (int i = 0; i < arr.length; i++) {\n    sum = (arr[i] < 0) ? sum + arr[i] : sum;\n}\nreturn sum;"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"id": "Cg4Iwe6fnb8OEPSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-14T17:40:01.171Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-14T18:23:06.931Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-14T18:23:27.454Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:40:01.180Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:10.519Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:15:22.649Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350797049@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufxqxq_gukOXppj9fZgFA8XlFvzlg1IUugvOg2wSDlDYytykWb1BOofnI5lAQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: John\n\nQ: Last Name\nA: Ning\n\nQ: public int sum(int[] arr)\nA: int result = 0;\nfor(int i = 0; i < arr.length; i++) {\n    if(arr[i] < 0) {\n        result += arr[i];\n    }\n}\nreturn result;\n\nQ: public int f(int d) {\nA: int doubled = 2 * d;\nint digit1 = (doubled / 10);\nint digit2 = (doubled % 10);\nint result = digit1+ digit2\nreturn result;\n\nQ: public boolean checkSum(int[] account) {\nA: int total = 0;\nfor(int i = 0; i < account.length; i++) {\n    if(i % 2 ==0) {\n        total += account[i];\n    } else {\n        total += f(account[i]);\n    }\n}\nif(total % 10 == 0) {\n    return true;\n    } else {\n    return false;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"First Name": "John",
							"public int f(int d) {": "int doubled = 2 * d;\nint digit1 = (doubled / 10);\nint digit2 = (doubled % 10);\nint result = digit1+ digit2\nreturn result;",
							"Last Name": "Ning",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public boolean checkSum(int[] account) {": "int total = 0;\nfor(int i = 0; i < account.length; i++) {\n    if(i % 2 ==0) {\n        total += account[i];\n    } else {\n        total += f(account[i]);\n    }\n}\nif(total % 10 == 0) {\n    return true;\n    } else {\n    return false;\n}",
							"public int sum(int[] arr)": "int result = 0;\nfor(int i = 0; i < arr.length; i++) {\n    if(arr[i] < 0) {\n        result += arr[i];\n    }\n}\nreturn result;"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4I05uw78AOEPSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-14T17:37:32.603Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-14T17:40:42.756Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-14T17:50:06.723Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-14T18:15:22.756Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:32.780Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:12.626Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:16:21.254Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufrI7yAu9kLR1FimXLttQvGJ6k0sqDzDBL9Bf_XTItaergDkJtGUuJY8z6ULQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: public int sum(int[] arr)\nA: {\n     int sum = 0;\n     for(int i = 0; i < arr.length; i++)\n     {\n          if(arr[i] < 0)\n          {\n               sum += arr[i];\n          }\n     }\n     return sum; \n}\n\nQ: public int f(int d) {\nA:      int a = (2*d);\n     if(a >= 10)\n     {\n          return 1 + (a%10);\n     }\n     else {\n          return a;\n     }\n}\n\nQ: public boolean checkSum(int[] account) {\nA:      int sum = 0;\n     for (int i = 0; i < account.length; i++)\n     {\n          if (i==0 || i%2 == 0)\n          {\n               sum += account[i];\n          }\n          else {\n               sum += f(account[i]);\n          }\n     }\n     return sum%10 == 0;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "     int a = (2*d);\n     if(a >= 10)\n     {\n          return 1 + (a%10);\n     }\n     else {\n          return a;\n     }\n}",
							"First Name": "Nereyal",
							"Last Name": "Jeyakumar",
							"Give the value of banana[3]": "4",
							"public int sum(int[] arr)": "{\n     int sum = 0;\n     for(int i = 0; i < arr.length; i++)\n     {\n          if(arr[i] < 0)\n          {\n               sum += arr[i];\n          }\n     }\n     return sum; \n}",
							"public boolean checkSum(int[] account) {": "     int sum = 0;\n     for (int i = 0; i < account.length; i++)\n     {\n          if (i==0 || i%2 == 0)\n          {\n               sum += account[i];\n          }\n          else {\n               sum += f(account[i]);\n          }\n     }\n     return sum%10 == 0;\n}",
							"Give the value of apple[0]": "1"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-14T17:37:27.130Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-14T18:16:21.383Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEPSphYC6FQ",
					"submittedAt": "2025-05-14T17:37:27.160Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:14.923Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-16T17:52:07.711Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudo0vT_aHCh4buR7psVXHACCltWBe2_rsbujPqtJXvLtZm16FAAV92tj-T3Fg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: public int sum(int[] arr)\nA: int sum = 0;\n\nfor(int i = 0; i < arr.length; i++) {\n    if(arr[i] < 0) {\n        sum += arr[i];\n    }\n}\n\nreturn sum;\n\nQ: public int f(int d) {\nA: int twice = 2 * d;\nreturn (twice / 10) + (twice % 10);\n\nQ: public boolean checkSum(int[] account) {\nA: int sum = 0;\n\nfor(int i = 0; i < account.length; i++) {\n    if(i % 2 == 0) {\n        sum += account[i];\n    } else {\n        sum += f(account[i]);\n    }\n}\n\nif(sum % 10 == 0) {\n    return true;\n} else {\n    return false;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "int twice = 2 * d;\nreturn (twice / 10) + (twice % 10);",
							"First Name": "Cayden",
							"Last Name": "Chiu",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "int sum = 0;\n\nfor(int i = 0; i < arr.length; i++) {\n    if(arr[i] < 0) {\n        sum += arr[i];\n    }\n}\n\nreturn sum;",
							"public boolean checkSum(int[] account) {": "int sum = 0;\n\nfor(int i = 0; i < account.length; i++) {\n    if(i % 2 == 0) {\n        sum += account[i];\n    } else {\n        sum += f(account[i]);\n    }\n}\n\nif(sum % 10 == 0) {\n    return true;\n} else {\n    return false;\n}"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-14T17:38:33.218Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-16T17:52:07.845Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-16T17:52:16.852Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEPSphYC6FQ",
					"submittedAt": "2025-05-14T17:38:33.258Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:16.797Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:28:34.255Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufGkeIps6K50Q-sD8LcpYy_wMwXNEEqQ_L2n8mNo42cqyY33CyqwiGl-DxBLw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: public int sum(int[] arr)\nA: int sum =0;\nfor(int i=0; i<arr.length; i++)\n{\n   if(arr[i] < 0)\n   {\n      sum += arr[i];\n   }\n}\nreturn sum;\n\nQ: public int f(int d) {\nA: int timesTwo = 2*d;\nint digtisSum = timesTwo%10 + timesTwo/10 ;\nreturn digitsSum; \n\nQ: public boolean checkSum(int[] account) {\nA: int sum = 0;\nfor(int i =0; I<account.length; i++)\n{\n     if( i %2 != 0)\n     {\n          sum + = account[i];\n     }\n     else if ( i%2 ==0)\n     {\n          sum +=  f(account[i]);\n     }\n}\nif(sum%10==0)\n{\n     return true;\n}\nelse\n{\n     return false;\n}\n\nQ: Give the value of apple[0]\nA: error\n\nQ: Give the value of banana[3]\nA: 10  \n\nQ: Give the value of apple[4]\nA: 1\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "1",
							"First Name": "Owen",
							"public int f(int d) {": "int timesTwo = 2*d;\nint digtisSum = timesTwo%10 + timesTwo/10 ;\nreturn digitsSum; ",
							"Last Name": "Kung",
							"Give the value of banana[3]": "10  ",
							"Give the value of apple[0]": "error",
							"public int sum(int[] arr)": "int sum =0;\nfor(int i=0; i<arr.length; i++)\n{\n   if(arr[i] < 0)\n   {\n      sum += arr[i];\n   }\n}\nreturn sum;",
							"public boolean checkSum(int[] account) {": "int sum = 0;\nfor(int i =0; I<account.length; i++)\n{\n     if( i %2 != 0)\n     {\n          sum + = account[i];\n     }\n     else if ( i%2 ==0)\n     {\n          sum +=  f(account[i]);\n     }\n}\nif(sum%10==0)\n{\n     return true;\n}\nelse\n{\n     return false;\n}"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEPSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-14T17:37:18.812Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-14T18:28:34.374Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:18.825Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:18.765Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:08:57.793Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Test: Arrays",
								"contentType": "form",
								"email": "440021905@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucH8lU2sOGGuXqIO75AO_7y3syaaMo5JkFWVm_zkla_Yg3f2GUVAdnvM3-hKQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clifton\n\nQ: Last Name\nA: Lin\n\nQ: public int sum(int[] arr)\nA: {\n    int sum = 0;\n\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n        sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nQ: public int f(int d) {\nA:     int firstDigit = 0;\n    int secondDigit = 0;\n    int tempNum = 0;\n    int total = 0;\n\n    tempNum = 2 * d;\n    charAt(0) = firstDigit;\n    charAt(1) = secondDigit;\n    total = firstDigit + secondDigit;\n    return total;\n}\n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = 0;\n\n    for(int i = 1; i < account.length; i+= 2){\n        sum += f([i]);\n    }\n    for(int i = 0; i < account.length; i+=2){\n        sum += [i];\n    }\n\n    if(sum %10 == 0){\n        return true;\n    }else{\n        return false;\n    \n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: error\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\", \"B\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\", \"B\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "    int firstDigit = 0;\n    int secondDigit = 0;\n    int tempNum = 0;\n    int total = 0;\n\n    tempNum = 2 * d;\n    charAt(0) = firstDigit;\n    charAt(1) = secondDigit;\n    total = firstDigit + secondDigit;\n    return total;\n}",
							"First Name": "Clifton",
							"Last Name": "Lin",
							"Give the value of banana[3]": "error",
							"public boolean checkSum(int[] account) {": "    int sum = 0;\n\n    for(int i = 1; i < account.length; i+= 2){\n        sum += f([i]);\n    }\n    for(int i = 0; i < account.length; i+=2){\n        sum += [i];\n    }\n\n    if(sum %10 == 0){\n        return true;\n    }else{\n        return false;\n    \n}",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "{\n    int sum = 0;\n\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n        sum += arr[i];\n        }\n    }\n    return sum;\n}"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "[No content available]",
					"id": "Cg4I55juyqAPEPSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-14T17:38:22.445Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-14T18:08:57.891Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:38:22.454Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:21.356Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:06:16.172Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudJJ-LF4e2y4kI-IuhuxpZ3gNHGYgGonAv3q7TgxQLhnr0AZXPifFfCISHRMg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: public int sum(int[] arr)\nA: {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 0)\n        {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\nQ: public int f(int d) {\nA: int doubleD = d * 2;\nint ones = doubleD % 10;\nint tens = d / 10;\nint result = ones + tens;\nreturn result;\n\nQ: public boolean checkSum(int[] account) {\nA: int result = 0;\nfor (int i = 0; i < account.length; i++)\n{\n    if (i % 2 == 0)\n    {\n        result += account[i];\n    }\n    else\n    {\n        result += f(account[i]);\n    }\n    if (result % 10 != 0)\n    {\n        return false;\n    }\n}\nreturn true;\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"public int f(int d) {": "int doubleD = d * 2;\nint ones = doubleD % 10;\nint tens = d / 10;\nint result = ones + tens;\nreturn result;",
							"First Name": "Jennifer",
							"Last Name": "Zheng",
							"Give the value of banana[3]": "4",
							"public int sum(int[] arr)": "{\n    int result = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 0)\n        {\n            result += arr[i];\n        }\n    }\n    return result;\n}",
							"public boolean checkSum(int[] account) {": "int result = 0;\nfor (int i = 0; i < account.length; i++)\n{\n    if (i % 2 == 0)\n    {\n        result += account[i];\n    }\n    else\n    {\n        result += f(account[i]);\n    }\n    if (result % 10 != 0)\n    {\n        return false;\n    }\n}\nreturn true;",
							"Give the value of apple[0]": "1"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-14T17:37:25.436Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-14T18:06:16.281Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEPSphYC6FQ",
					"submittedAt": "2025-05-14T17:37:25.444Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:23.936Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:07:31.238Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucbqNI0hKAjxcYz4qwn3SuZTuiqD5b9xgITPR3_fCOx9BZmn4FvFyrCaE5-7w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: public int sum(int[] arr)\nA: int count = 0;\nfor(int i = 0; i < arr.length; i++)\n{\n    if(arr[i] < 0)\n    {\n        count += arr[i];\n    }\n}\nreturn count;\n\nQ: public int f(int d) {\nA:     int digit = 2 * d;\n    if(digit < 10)\n    {\n        return digit % 10;\n    }\n    else\n    {\n        int first = digit / 10;\n        int second = digit % 10;\n    }\n    return first + second;\n}\n\nQ: public boolean checkSum(int[] account) {\nA: int count = 0;\nfor(int i = 0; i < account.length; i++)\n{\n    if(i % 2 == 0)\n    {\n        count += account[i];\n    }\n    else\n    {\n        count += f(account[i]);\n    }\n}\nif(count % 10 == 0)\n{\n    return true;\n}\nreturn false;\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"First Name": "Lionson",
							"public int f(int d) {": "    int digit = 2 * d;\n    if(digit < 10)\n    {\n        return digit % 10;\n    }\n    else\n    {\n        int first = digit / 10;\n        int second = digit % 10;\n    }\n    return first + second;\n}",
							"Last Name": "Meng",
							"Give the value of banana[3]": "2",
							"public boolean checkSum(int[] account) {": "int count = 0;\nfor(int i = 0; i < account.length; i++)\n{\n    if(i % 2 == 0)\n    {\n        count += account[i];\n    }\n    else\n    {\n        count += f(account[i]);\n    }\n}\nif(count % 10 == 0)\n{\n    return true;\n}\nreturn false;",
							"Give the value of apple[0]": "1",
							"public int sum(int[] arr)": "int count = 0;\nfor(int i = 0; i < arr.length; i++)\n{\n    if(arr[i] < 0)\n    {\n        count += arr[i];\n    }\n}\nreturn count;"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-14T17:37:19.858Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-14T18:07:31.329Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEPSphYC6FQ",
					"submittedAt": "2025-05-14T17:37:19.866Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:26.422Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"questionCount": 10,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:00:07.822Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440030068@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueH46V05sBdr09mHKNzcfI_v0QNLedGKAnG4ZVZZ1XzB5kEOHGPOuw10uq_Pg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Moses\n\nQ: Last Name\nA: He\n\nQ: public int sum(int[] arr)\nA: {\n    int result = 0 ;\n    for(int i = 0 ; i < arr.length ; i++)\n    {\n        if(arr[i] < 0 )\n        {\n            result += arr[i] ;\n        }\n    }\n    return result ;\n}\n\nQ: public int f(int d) {\nA:     int D = 2*d ;\n    int oneDigit = D % 10 ;\n    int secondDigit =  D - oneDigit ;\n    return oneDigit + secondDigit ;\n}\n\nQ: public boolean checkSum(int[] account) {\nA: \n    int total = 0;\n    for(int i = 0 ; i < account.length ; i++)\n    {\n        if(i % 2 == 0)\n        {\n            total += account[i];\n        }\n        else\n        {\n            total += f(account[i]) ;\n        }\n    }\n    return total % 10 == 0 ;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 2\n\nQ: Give the value of apple[4]\nA: 2\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "2",
							"First Name": "Moses",
							"public int f(int d) {": "    int D = 2*d ;\n    int oneDigit = D % 10 ;\n    int secondDigit =  D - oneDigit ;\n    return oneDigit + secondDigit ;\n}",
							"Last Name": "He",
							"Give the value of banana[3]": "2",
							"public int sum(int[] arr)": "{\n    int result = 0 ;\n    for(int i = 0 ; i < arr.length ; i++)\n    {\n        if(arr[i] < 0 )\n        {\n            result += arr[i] ;\n        }\n    }\n    return result ;\n}",
							"Give the value of apple[0]": "1",
							"public boolean checkSum(int[] account) {": "\n    int total = 0;\n    for(int i = 0 ; i < account.length ; i++)\n    {\n        if(i % 2 == 0)\n        {\n            total += account[i];\n        }\n        else\n        {\n            total += f(account[i]) ;\n        }\n    }\n    return total % 10 == 0 ;\n}"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-05-14T17:37:17.661Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-05-14T17:59:24.878Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IuZzI4aUTEPSphYC6FQ",
					"submittedAt": "2025-05-14T17:37:17.670Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:28.426Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:06:22.107Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucsSmc3pLX74HIN9JyCLQF82HylW9pnq71ksAtXEgxRGPGI5BjLHt2M3gZKIA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: steven\n\nQ: Last Name\nA: wang \n\nQ: public int sum(int[] arr)\nA: for (int i = 0; i < arr.length; i++)\n{\n    if (arr[i] > 0)\n    {\n        return arr[i];\n    }\n}\n\nQ: public int f(int d) {\nA: int sum = 0;\nsum = d * 2;\nreturn sum;\n\nQ: public boolean checkSum(int[] account) {\nA: int sumTotal1 = 0\nint sum1 = 0\nint sumTotal = 0\nint sum2 = 0\nint sumTotal = 0\n\nfor (int i = 0; i < account.length; i++)\n{\n    if ( i % 2 = 0)\n    {\n        sum2 = arry[i]\n        sumTotal2 = arry[i] + sum2 \n    }\n    else \n    {\n        sum1 = arry [i];\n        sum.f();\n        sumTotal1 = sumTotal1 + sum1;  \n    }\n}\n\nsumTotal = sumTotal1 + sumTotal \n\nif ( sumTotal % 2 == 0)\n{\n    return false ;\n}\nelse \n{\n    return true;\n}\n\n\n\nQ: Give the value of apple[0]\nA: error\n\nQ: Give the value of banana[3]\nA: 5\n\nQ: Give the value of apple[4]\nA: 2\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "2",
							"public int f(int d) {": "int sum = 0;\nsum = d * 2;\nreturn sum;",
							"First Name": "steven",
							"Last Name": "wang ",
							"Give the value of banana[3]": "5",
							"public boolean checkSum(int[] account) {": "int sumTotal1 = 0\nint sum1 = 0\nint sumTotal = 0\nint sum2 = 0\nint sumTotal = 0\n\nfor (int i = 0; i < account.length; i++)\n{\n    if ( i % 2 = 0)\n    {\n        sum2 = arry[i]\n        sumTotal2 = arry[i] + sum2 \n    }\n    else \n    {\n        sum1 = arry [i];\n        sum.f();\n        sumTotal1 = sumTotal1 + sum1;  \n    }\n}\n\nsumTotal = sumTotal1 + sumTotal \n\nif ( sumTotal % 2 == 0)\n{\n    return false ;\n}\nelse \n{\n    return true;\n}\n\n",
							"public int sum(int[] arr)": "for (int i = 0; i < arr.length; i++)\n{\n    if (arr[i] > 0)\n    {\n        return arr[i];\n    }\n}",
							"Give the value of apple[0]": "error"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"attachmentCount": 0,
					"id": "Cg4Ik8mXwcMUEPSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-05-14T17:37:22.714Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-05-14T18:06:22.253Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:22.723Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.658Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849460",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 10,
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T18:24:47.472Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 5 Test: Arrays",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuclH8j7OGoauZ3rguCqc-Ud2NnHaARGrTnJpnxyQIrMr959eGt-XIz_m2EgpA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: public int sum(int[] arr)\nA: {\n    int negSum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] < 0)\n        {\n            negSum += arr[i];\n        }\n    }\n    return negSum;\n}\n\n\nQ: public int f(int d) {\nA: \n    int first = d * 2;\n    if(first >= 10)\n    {\n        int digit = first % 10;\n        return digit + 1;\n    }\n    return first;\n}\n    \n\nQ: public boolean checkSum(int[] account) {\nA:     int sum = account[0];\n    for(int i = 1; i < account.length; i++)\n    {\n        if(account[i] % 2 != 0)\n        {\n            int num = f(account[i]);\n            sum += num;\n        }\n        else\n        {\n            sum += account[i];\n        }\n    }\n    return sum % 10 == 0;\n}\n\nQ: Give the value of apple[0]\nA: 1\n\nQ: Give the value of banana[3]\nA: 4\n\nQ: Give the value of apple[4]\nA: error\n\nQ: aMethod({\"a\", \"b\", \"c\"})\nA: {\"A\"}\n\nQ: aMethod({\"a\"})\nA: error",
						"structuredData": {
							"aMethod({\"a\"})": "error",
							"aMethod({\"a\", \"b\", \"c\"})": "{\"A\"}",
							"Give the value of apple[4]": "error",
							"First Name": "Vivian",
							"public int f(int d) {": "\n    int first = d * 2;\n    if(first >= 10)\n    {\n        int digit = first % 10;\n        return digit + 1;\n    }\n    return first;\n}\n    ",
							"Last Name": "Li",
							"Give the value of banana[3]": "4",
							"Give the value of apple[0]": "1",
							"public boolean checkSum(int[] account) {": "    int sum = account[0];\n    for(int i = 1; i < account.length; i++)\n    {\n        if(account[i] % 2 != 0)\n        {\n            int num = f(account[i]);\n            sum += num;\n        }\n        else\n        {\n            sum += account[i];\n        }\n    }\n    return sum % 10 == 0;\n}",
							"public int sum(int[] arr)": "{\n    int negSum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] < 0)\n        {\n            negSum += arr[i];\n        }\n    }\n    return negSum;\n}\n"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDYw/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"id": "Cg4Iz_iw9dcUEPSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-14T17:37:27.453Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-14T18:24:47.606Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-14T17:37:27.461Z",
					"assignmentName": "Unit 5 Test: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.661Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "108625539120933569850",
					"score": 100,
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"draftGrade": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.967Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.967Z",
						"percentage": 100
					},
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-16T17:33:37.939Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-06-10T23:51:22.692Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:38:49.558Z",
								"pointsEarned": 33.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:38:52.664Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:40:54.846Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.966Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.966Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0IvfCrsQEQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:33:37.974Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.664Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"score": 97.22,
					"draftGrade": 97.22,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.630Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.630Z",
						"percentage": 97
					},
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-16T17:33:48.815Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-06-11T02:57:31.684Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:05:30.211Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 16.67,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:05:31.274Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 50,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:05:34.427Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 83.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:26:28.072Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:46:41.995Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.630Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.630Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:33:48.844Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.667Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "107243305699666934434",
					"score": 97.22,
					"draftGrade": 97.22,
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.503Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.503Z",
						"percentage": 97
					},
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I_qLZkQsQ-qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-16T17:33:41.332Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-06-11T15:26:51.651Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:58:22.605Z",
								"pointsEarned": 80.56,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:36:22.299Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.503Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.503Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:33:41.373Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.670Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "114799240624991928862",
					"score": 91.67,
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"draftGrade": 91.67,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.523Z",
					"grade": {
						"feedback": "",
						"score": 91.67,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.523Z",
						"percentage": 92
					},
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-16T17:33:45.383Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-06-11T17:39:36.622Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:18:21.195Z",
								"pointsEarned": 27.78,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:18:24.300Z",
								"pointsEarned": 44.44,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:18:26.411Z",
								"pointsEarned": 58.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:18:29.551Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 72.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:19:11.502Z",
								"pointsEarned": 75,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T14:52:24.489Z",
								"pointsEarned": 91.67,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.523Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.523Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 91.67,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0IwJXv6QsQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:33:45.393Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.674Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "101103182210295183966",
					"score": 100,
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"draftGrade": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "GitHub - yrdsb-peths/final-project-final-kelton-joe: p5-ics3u-final-project-greenfoot-vscode created by GitHub Classroom",
									"type": "link",
									"url": "https://github.com/yrdsb-peths/final-project-final-kelton-joe"
								}
							]
						},
						"text": "[Link: GitHub - yrdsb-peths/final-project-final-kelton-joe: p5-ics3u-final-project-greenfoot-vscode created by GitHub Classroom] https://github.com/yrdsb-peths/final-project-final-kelton-joe",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.465Z",
					"studentName": "Kelton Kuan",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.465Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "[Link: https://github.com/yrdsb-peths/final-project-final-kelton-joe]\n",
					"id": "Cg0Ik7DJrAwQ-qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-16T17:33:02.842Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-06-11T03:06:02.274Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:38:35.867Z",
								"pointsEarned": 33.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:38:39.021Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:32:16.082Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.465Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.465Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:33:02.852Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.677Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "101614213510204563567",
					"draftGrade": 100,
					"score": 100,
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.138Z",
					"studentName": "Jiayu Chen",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.138Z",
						"percentage": 100
					},
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"id": "Cg0I5qyc4Q4Q-qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-16T17:34:00.586Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-06-11T01:45:10.304Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:57:21.135Z",
								"pointsEarned": 50,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:57:22.488Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 66.67,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:57:23.897Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T14:47:08.565Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.138Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.138Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:34:00.597Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.680Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"score": 91.67,
					"draftGrade": 91.67,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.760Z",
					"grade": {
						"feedback": "",
						"score": 91.67,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.760Z",
						"percentage": 92
					},
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-16T17:34:12.249Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:18:40.032Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 13.89,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:18:43.172Z",
								"pointsEarned": 75,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:19:02.065Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 77.78,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:19:20.938Z",
								"pointsEarned": 75,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:30:12.395Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 91.67,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.760Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.760Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 91.67,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:34:12.258Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.682Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "107676755417854538820",
					"feedback": "",
					"score": 97.22,
					"draftGrade": 97.22,
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.168Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.168Z",
						"percentage": 97
					},
					"studentName": "Nathan Ji",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-16T17:35:35.507Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-06-09T18:49:07.021Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:58:41.477Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 80.56,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:24:16.396Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.168Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.168Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:35:35.515Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.685Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "101394730938804923153",
					"score": 97.22,
					"draftGrade": 97.22,
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.135Z",
					"studentName": "Clark Chen",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.135Z",
						"percentage": 97
					},
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-05-16T17:34:42.456Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:06:46.785Z",
								"pointsEarned": 33.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:06:49.916Z",
								"pointsEarned": 66.67,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:06:51.003Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:38:34.037Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:38:37.626Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:46:33.697Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.135Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.135Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Ik_u42h8Q-qmFgLoV",
					"submittedAt": "2025-05-16T17:34:42.468Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.688Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "115626057019275215839",
					"feedback": "",
					"draftGrade": 100,
					"score": 100,
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.815Z",
					"studentName": "Edward Wang",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.815Z",
						"percentage": 100
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-16T17:36:22.264Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-06-10T17:53:03.172Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:30:04.061Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 50,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:30:08.237Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:31:50.642Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.815Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.815Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:36:22.274Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.692Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "106702075817947945830",
					"score": 77.78,
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"draftGrade": 77.78,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.807Z",
					"studentName": "Leo So",
					"grade": {
						"feedback": "",
						"score": 77.78,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.807Z",
						"percentage": 78
					},
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQ-qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-16T17:33:11.017Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:40.516Z",
								"pointsEarned": 11.11,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:42.697Z",
								"pointsEarned": 25,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:44.814Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 33.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:48.994Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 41.67,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:51.075Z",
								"pointsEarned": 52.78,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:41:24.289Z",
								"pointsEarned": 66.67,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:42:16.260Z",
								"pointsEarned": 69.44,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:43:42.955Z",
								"pointsEarned": 72.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:43:57.314Z",
								"pointsEarned": 75,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:44:18.933Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 77.78,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.807Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.807Z",
								"pointsEarned": 77.78,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:33:11.058Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.694Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"draftGrade": 100,
					"score": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.237Z",
					"studentName": "Mark Ku",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.237Z",
						"percentage": 100
					},
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"id": "Cg0Ine-5hUQQ-qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-16T17:36:12.260Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-11T00:20:41.364Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:30:14.559Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 33.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:30:15.642Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T14:50:01.886Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.237Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.237Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:36:12.301Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.697Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "105982258071886610739",
					"draftGrade": 97.22,
					"score": 97.22,
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.169Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.169Z",
						"percentage": 97
					},
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-16T17:34:52.473Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-06-09T18:27:09.772Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:04:17.026Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 80.56,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:27:38.046Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.169Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.169Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0I0ruNqlsQ-qmFgLoV",
					"submittedAt": "2025-05-16T17:34:52.483Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.700Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "101472071522836988061",
					"feedback": "",
					"score": 97.22,
					"draftGrade": 97.22,
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.138Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.138Z",
						"percentage": 97
					},
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IvNTT8mcQ-qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-16T17:33:14.983Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-06-09T18:27:13.398Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:04:00.240Z",
								"pointsEarned": 16.67,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:04:03.375Z",
								"pointsEarned": 63.89,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:04:04.450Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 80.56,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:28:12.973Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.138Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.138Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:33:15.017Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.703Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "107600481194027020763",
					"draftGrade": 100,
					"score": 100,
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.802Z",
					"studentName": "Saiful Shaik",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.802Z",
						"percentage": 100
					},
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-16T17:35:52.162Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-06-11T02:39:16.054Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:57:28.364Z",
								"pointsEarned": 16.67,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:57:32.763Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 66.67,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:57:34.572Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:30:58.710Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.802Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.802Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEPqphYC6FQ",
					"submittedAt": "2025-05-16T17:35:52.214Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.706Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "104593047842018851679",
					"score": 86.11,
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"draftGrade": 86.11,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.611Z",
					"studentName": "John Ning",
					"grade": {
						"feedback": "",
						"score": 86.11,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.611Z",
						"percentage": 86
					},
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"id": "Cg4I05uw78AOEPqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-16T17:33:18.514Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:58:05.352Z",
								"pointsEarned": 44.44,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:58:07.530Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 77.78,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T14:52:47.984Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 86.11,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.611Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.611Z",
								"pointsEarned": 86.11,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:33:18.526Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.709Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"score": 97.22,
					"draftGrade": 97.22,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "GitHub - yrdsb-peths/final-project-final-nereyal-jennifer: p5-ics3u-final-project-greenfoot-vscode created by GitHub Classroom",
									"url": "https://github.com/yrdsb-peths/final-project-final-nereyal-jennifer"
								}
							]
						},
						"text": "[Link: GitHub - yrdsb-peths/final-project-final-nereyal-jennifer: p5-ics3u-final-project-greenfoot-vscode created by GitHub Classroom] https://github.com/yrdsb-peths/final-project-final-nereyal-jennifer",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.161Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.161Z",
						"percentage": 97
					},
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[Link: https://github.com/yrdsb-peths/final-project-final-nereyal-jennifer]\n",
					"attachmentCount": 1,
					"id": "Cg4Iurzi88AOEPqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-16T17:35:11.094Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-06-11T03:42:37.781Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:28.572Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 80.56,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:38:05.856Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.161Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.161Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:35:11.128Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.711Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "101721674440588752421",
					"feedback": "",
					"draftGrade": 94.44,
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"score": 94.44,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.237Z",
					"studentName": "Cayden Chiu",
					"grade": {
						"feedback": "",
						"score": 94.44,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.237Z",
						"percentage": 94
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-16T17:34:32.837Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-06-11T04:15:22.209Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:07:26.626Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 13.89,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:14:09.869Z",
								"pointsEarned": 47.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:14:11.960Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 63.89,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:14:13.035Z",
								"pointsEarned": 77.78,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:24:58.992Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 94.44,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.237Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.237Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 94.44,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEPqphYC6FQ",
					"submittedAt": "2025-05-16T17:34:32.847Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.714Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"score": 100,
					"draftGrade": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.477Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.477Z",
						"percentage": 100
					},
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-16T17:34:15.156Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-06-11T12:36:18.842Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:58:49.190Z",
								"pointsEarned": 33.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:58:51.967Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 83.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:34:08.019Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.477Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.477Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4I5dKR18sOEPqphYC6FQ",
					"submittedAt": "2025-05-16T17:34:15.195Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.717Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"draftGrade": 100,
					"score": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.498Z",
					"studentName": "Clifton Lin",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.498Z",
						"percentage": 100
					},
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"id": "Cg4I55juyqAPEPqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-16T17:34:20.675Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-06-11T01:08:31.526Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:58:40.168Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 50,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T13:58:42.913Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 83.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:25:36.114Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.498Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.498Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:34:20.685Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.720Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "109110963825415956180",
					"score": 97.22,
					"draftGrade": 97.22,
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.933Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.933Z",
						"percentage": 97
					},
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I7ZHxyucSEPqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-16T17:33:59.186Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:05.499Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 13.89,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:06.611Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 27.78,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:08.649Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 30.56,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:10.747Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 47.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:14.945Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 63.89,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T17:46:17.036Z",
								"pointsEarned": 80.56,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:40:22.759Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.933Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.933Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:33:59.195Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.723Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "115055209797540041904",
					"score": 97.22,
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"draftGrade": 97.22,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.492Z",
					"grade": {
						"feedback": "",
						"score": 97.22,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.492Z",
						"percentage": 97
					},
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-16T17:35:56.204Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-06-11T17:36:37.992Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:48:12.665Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 33.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:48:15.805Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 83.33,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:28:29.323Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 97.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.492Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.492Z",
								"pointsEarned": 97.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEPqphYC6FQ",
					"submittedAt": "2025-05-16T17:35:56.216Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.726Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"score": 100,
					"draftGrade": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.144Z",
					"studentName": "Moses He",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.144Z",
						"percentage": 100
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4IuZzI4aUTEPqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-05-16T17:32:54.152Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:48:03.228Z",
								"pointsEarned": 33.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:48:06.372Z",
								"pointsEarned": 83.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-13T15:37:03.312Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.144Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.144Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:32:54.164Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.729Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"feedback": "",
					"studentId": "102479132795602540628",
					"draftGrade": 77.78,
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"score": 77.78,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.839Z",
					"studentName": "Steven Wang",
					"grade": {
						"feedback": "",
						"score": 77.78,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.839Z",
						"percentage": 78
					},
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-05-16T17:36:29.230Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:53.200Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 22.22,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-11T18:41:57.366Z",
								"pointsEarned": 52.78,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:39:03.043Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 66.67,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:42:10.013Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 69.44,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:44:27.230Z",
								"pointsEarned": 72.22,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-16T18:44:28.986Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 77.78,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.839Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.839Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 77.78,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEPqphYC6FQ",
					"submittedAt": "2025-05-16T17:36:29.301Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.733Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849466",
					"studentId": "103612229036956651130",
					"feedback": "",
					"score": 58.33,
					"draftGrade": 58.33,
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "driveFile",
									"mimeType": ""
								}
							],
							"file_1ib15kSXdkUisZ-L85A8Hm_h6ZYsu3Fyyjw3UhCR_ymY": {
								"title": "Unsupported file type",
								"contentType": "other",
								"mimeType": ""
							}
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-06-23T13:33:26.499Z",
					"grade": {
						"feedback": "",
						"score": 58.33,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-06-23T13:33:26.499Z",
						"percentage": 58
					},
					"studentName": "Vivian Li",
					"studentWork": "[Drive File: undefined]\n",
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDY2/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"id": "Cg4Iz_iw9dcUEPqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-16T17:34:31.970Z",
								"state": "CREATED"
							}
						},
						{},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:30:40.039Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 50,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-12T18:30:42.154Z",
								"pointsEarned": 58.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-06-23T13:33:26.499Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-06-23T13:33:26.499Z",
								"pointsEarned": 58.33,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-05-16T17:34:31.980Z",
					"assignmentName": "Final Project: Your Awesome Game (Team)",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.736Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-12T12:03:36.736Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-16T21:42:21.496Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQmoS9wpsW",
					"submittedAt": "2025-05-12T12:03:36.746Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.739Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"id": "Cg0Isq_W0gkQmoS9wpsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-12T12:03:55.692Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-13T18:40:39.889Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-12T12:03:55.728Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.742Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I_qLZkQsQmoS9wpsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-12T12:03:46.293Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-16T18:24:13.045Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-12T12:03:46.329Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.745Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-12T12:03:07.670Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-16T18:47:02.832Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQmoS9wpsW",
					"submittedAt": "2025-05-12T12:03:07.713Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.748Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-12T12:04:28.445Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-13T18:48:23.306Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QmoS9wpsW",
					"submittedAt": "2025-05-12T12:04:28.455Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.751Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-12T12:04:11.171Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-19T13:09:59.258Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQmoS9wpsW",
					"submittedAt": "2025-05-12T12:04:11.208Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.754Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-12T12:05:36.082Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-15T18:01:18.018Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQmoS9wpsW",
					"submittedAt": "2025-05-12T12:05:36.124Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.757Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQmoS9wpsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-12T12:03:18.670Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-20T17:52:02.951Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-12T12:03:18.706Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.760Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-12T12:05:58.674Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-16T18:46:44.715Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQmoS9wpsW",
					"submittedAt": "2025-05-12T12:05:58.711Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.763Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-12T12:04:52.120Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-18T20:05:09.775Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQmoS9wpsW",
					"submittedAt": "2025-05-12T12:04:52.129Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.766Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-12T12:03:23.717Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-18T20:05:18Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQmoS9wpsW",
					"submittedAt": "2025-05-12T12:03:23.758Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.769Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iwe6fnb8OEJqEvcKbFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-12T12:04:53.294Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-20T03:30:23.368Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-12T12:04:53.329Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.774Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-12T12:03:20.196Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-16T18:09:55.080Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOEJqEvcKbFg",
					"submittedAt": "2025-05-12T12:03:20.237Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.778Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-12T12:06:03.256Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-16T15:35:42.174Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEJqEvcKbFg",
					"submittedAt": "2025-05-12T12:06:03.304Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.781Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-12T12:05:14.764Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-16T18:30:15.642Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEJqEvcKbFg",
					"submittedAt": "2025-05-12T12:05:14.773Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.784Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-12T12:04:16.296Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-19T17:15:02.164Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEJqEvcKbFg",
					"submittedAt": "2025-05-12T12:04:16.306Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.786Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"id": "Cg4I55juyqAPEJqEvcKbFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-12T12:05:17.149Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-17T16:59:27.840Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-12T12:05:17.185Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:30.789Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763301413402",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMzAxNDEzNDAy/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-12T12:05:41.974Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-19T15:01:30.187Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEJqEvcKbFg",
					"submittedAt": "2025-05-12T12:05:42.012Z",
					"assignmentName": "Tutorial: Animal (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:32.419Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-05-14T17:16:26.985Z",
								"totalFormResponses": 14,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucOk-5deKN6uXWQWQvMmFi23cdMN_X8wYld16D98litMLxCXBdM3LgX_0GTyA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: String[] studentList= new String[100];\nreturn studentLIst;\n\nQ: public double largest(double[] a)\nA: double largestDouble = 0.0;\nfor (int i = 1; i < a.length; i++)\n{\n     if (a[i] >a [i + 1])\n     {\n          largestDouble = a[i]\n     }\n}\nreturn largestDouble;\n\nQ: \nA: int[] nums = {1, 4, -2, 5};\nfor (int i =0; i < nums.length; i++)\n{\n     int n = Randomizer.nextInt(1, 10);\n     nums[i] += n;\n}\nreturn largest(nums);\n\n\nQ: Write a brief and concise API description for this method.\nA: This method creates an array with the length of N and each integer in the array is randomly assigned the integer lo or hi. Finally, the array is returned.",
						"structuredData": {
							"": "int[] nums = {1, 4, -2, 5};\nfor (int i =0; i < nums.length; i++)\n{\n     int n = Randomizer.nextInt(1, 10);\n     nums[i] += n;\n}\nreturn largest(nums);\n",
							"First Name": "Nereyal",
							"public double largest(double[] a)": "double largestDouble = 0.0;\nfor (int i = 1; i < a.length; i++)\n{\n     if (a[i] >a [i + 1])\n     {\n          largestDouble = a[i]\n     }\n}\nreturn largestDouble;",
							"Write a brief and concise API description for this method.": "This method creates an array with the length of N and each integer in the array is randomly assigned the integer lo or hi. Finally, the array is returned.",
							"Last Name": "Jeyakumar",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "String[] studentList= new String[100];\nreturn studentLIst;"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IvfCrsQEQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-08T11:50:14.246Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-14T17:36:35.813Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:50:14.285Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:34.049Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-08T18:08:48.671Z",
								"totalFormResponses": 14,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf9GZ2Et0kGmtjPD0a1BGacAwhixvj6ahjfextlTGberUY7cTVykEYYMExW0w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranthan\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: Student[] arr = new Student[100];\nSystem.out.println(arr);\n\nQ: public double largest(double[] a)\nA:     double large = a[0];\n    for (int i = 0; i < a.length - 1; i++)\n    {\n        if (a[i] > large)\n        {\n            large = a[i];\n        }\n\n    return large;\n    }\n\nQ: \nA: int[] nums = {1, 4, -2, 5};\n\nfor (int i = 0; i < 4; i ++)\n{\n    int n = Randomizer.nextInt(1, 10)\n    nums[i] += n;\n}\n\nlargest(nums);\n\nQ: Write a brief and concise API description for this method.\nA: /**\n   *This program takes in the length for a required array and the random min and max    \n   * values generated\n   *@param N number of elements in the array\n   *@param lo min number for the randomizer\n   *@param hi max number for the randomizer\n**/@return the new random array",
						"structuredData": {
							"": "int[] nums = {1, 4, -2, 5};\n\nfor (int i = 0; i < 4; i ++)\n{\n    int n = Randomizer.nextInt(1, 10)\n    nums[i] += n;\n}\n\nlargest(nums);",
							"First Name": "Abithan",
							"Write a brief and concise API description for this method.": "/**\n   *This program takes in the length for a required array and the random min and max    \n   * values generated\n   *@param N number of elements in the array\n   *@param lo min number for the randomizer\n   *@param hi max number for the randomizer\n**/@return the new random array",
							"public double largest(double[] a)": "    double large = a[0];\n    for (int i = 0; i < a.length - 1; i++)\n    {\n        if (a[i] > large)\n        {\n            large = a[i];\n        }\n\n    return large;\n    }",
							"Last Name": "Paskaranthan",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "Student[] arr = new Student[100];\nSystem.out.println(arr);"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"id": "Cg0Isq_W0gkQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-08T11:50:14.808Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-08T18:08:48.765Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:50:14.846Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:35.671Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-09T00:59:02.872Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc4665nsUdf6TeG40FhW8mTlf_S126hCPCgCuWP7PYgTq5TehN8xIslbxN9SA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: Student [] students = new Student [100];\nfor (int i = 0; i < student.length; i++){\n    System.out.println(students[i]);\n}\n\nQ: public double largest(double[] a)\nA: double largest = 0.0;\n\nfor (int i = 0; i < a.length; i++){\n    if(a[i] > largest){\n        largest = a[i];\n    }\n}\n\nreturn largest;\n\nQ: \nA: int [] arr = {1, 4, -2, 5};\ndouble[] arr2= new Double [4]\nfor (int i = 0; i < 4; i++){\n    arr[i] = arr[i] + Randomizer.nextInt(1,10);\n    arr2[i] = arr[i]; \n}\n\nSystem.out.println(largest(arr2));\n\n\nQ: Write a brief and concise API description for this method.\nA: Creates and returns an array of N integers with randomized values ranging from \"lo\" to \"hi\";",
						"structuredData": {
							"": "int [] arr = {1, 4, -2, 5};\ndouble[] arr2= new Double [4]\nfor (int i = 0; i < 4; i++){\n    arr[i] = arr[i] + Randomizer.nextInt(1,10);\n    arr2[i] = arr[i]; \n}\n\nSystem.out.println(largest(arr2));\n",
							"First Name": "Owen",
							"Write a brief and concise API description for this method.": "Creates and returns an array of N integers with randomized values ranging from \"lo\" to \"hi\";",
							"public double largest(double[] a)": "double largest = 0.0;\n\nfor (int i = 0; i < a.length; i++){\n    if(a[i] > largest){\n        largest = a[i];\n    }\n}\n\nreturn largest;",
							"Last Name": "Lee",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "Student [] students = new Student [100];\nfor (int i = 0; i < student.length; i++){\n    System.out.println(students[i]);\n}"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I_qLZkQsQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-08T11:49:58.862Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-09T00:59:03.008Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:49:58.901Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:37.066Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T16:32:38.397Z",
								"totalFormResponses": 14,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufkGOAilcTaC04N9m2TRGqh6-lkAsLOPLqt2aAlBrVKw9ifvDrsoZeWRDwmvg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kian\n\nQ: Last Name\nA: Mistry\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: \n\nQ: public double largest(double[] a)\nA: \n\nQ: \nA: \n\nQ: Write a brief and concise API description for this method.\nA: ",
						"structuredData": {
							"": "",
							"First Name": "Kian",
							"public double largest(double[] a)": "",
							"Write a brief and concise API description for this method.": "",
							"Last Name": "Mistry",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": ""
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IwJXv6QsQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-08T11:50:10.810Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-14T16:32:38.499Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:50:10.846Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:38.521Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-09T17:01:29.005Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudSWLql-0d8cdpYpdRMdVS6Ae5G2jzlrRkWChc9izoQjI6kL73j7vyYleROFA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: \n\nQ: public double largest(double[] a)\nA: {\n    double largest = 0;\n    for (int i =0; i < a.length; i++) {\n        if (a[i] > largest) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n\nQ: \nA: Integer[] nums = new Integer[1, 4, -2, 5];\nfor (int i = 0; i < nums.length; i++) {\n    nums[i] += Randomizer.nextInt(1, 10);\n}\nSystem.out.println(largest(nums));\n\nQ: Write a brief and concise API description for this method.\nA: ",
						"structuredData": {
							"": "Integer[] nums = new Integer[1, 4, -2, 5];\nfor (int i = 0; i < nums.length; i++) {\n    nums[i] += Randomizer.nextInt(1, 10);\n}\nSystem.out.println(largest(nums));",
							"First Name": "Jiayu",
							"public double largest(double[] a)": "{\n    double largest = 0;\n    for (int i =0; i < a.length; i++) {\n        if (a[i] > largest) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}",
							"Write a brief and concise API description for this method.": "",
							"Last Name": "Chen",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": ""
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-08T11:50:39.482Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-09T17:01:29.081Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q6amFgLoV",
					"submittedAt": "2025-05-08T11:50:39.490Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:39.941Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": false,
								"responseTime": "2025-05-14T17:16:26.985Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucOk-5deKN6uXWQWQvMmFi23cdMN_X8wYld16D98litMLxCXBdM3LgX_0GTyA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: String[] studentList= new String[100];\nreturn studentLIst;\n\nQ: public double largest(double[] a)\nA: double largestDouble = 0.0;\nfor (int i = 1; i < a.length; i++)\n{\n     if (a[i] >a [i + 1])\n     {\n          largestDouble = a[i]\n     }\n}\nreturn largestDouble;\n\nQ: \nA: int[] nums = {1, 4, -2, 5};\nfor (int i =0; i < nums.length; i++)\n{\n     int n = Randomizer.nextInt(1, 10);\n     nums[i] += n;\n}\nreturn largest(nums);\n\n\nQ: Write a brief and concise API description for this method.\nA: This method creates an array with the length of N and each integer in the array is randomly assigned the integer lo or hi. Finally, the array is returned.",
						"structuredData": {
							"": "int[] nums = {1, 4, -2, 5};\nfor (int i =0; i < nums.length; i++)\n{\n     int n = Randomizer.nextInt(1, 10);\n     nums[i] += n;\n}\nreturn largest(nums);\n",
							"First Name": "Nereyal",
							"public double largest(double[] a)": "double largestDouble = 0.0;\nfor (int i = 1; i < a.length; i++)\n{\n     if (a[i] >a [i + 1])\n     {\n          largestDouble = a[i]\n     }\n}\nreturn largestDouble;",
							"Write a brief and concise API description for this method.": "This method creates an array with the length of N and each integer in the array is randomly assigned the integer lo or hi. Finally, the array is returned.",
							"Last Name": "Jeyakumar",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "String[] studentList= new String[100];\nreturn studentLIst;"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"id": "Cg0Io-SHlhwQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-08T11:53:01.058Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-14T18:06:18.620Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:53:01.066Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:41.572Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T01:42:54.790Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc7_TGhx6yS4YFxvny2BSiAbkIh0AlvuuOWqdRaiparcnhwtUQU7aTMg80jQg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: Students[] students = new Student[100]\n\nfor(int i = 0; i < students.length; i++)\n{\n    students[i] = new Student;\n}\n\nfor(int i = 0; i < students.length; i++)\n{\n    System.out.println(students[i]);\n}\n\nQ: public double largest(double[] a)\nA: double largest = a[0];\n\nfor(int i = 0; i < a.length; i++)\n{\n    double cur = a[i];\n    if(cur > largest)\n    {\n        largest = cur;\n    }\n}\nreturn largest;\n\nQ: \nA: int[] arr = new int[] {1, 4, -2, 5}\n\nfor(int i = 0; i < arr.length; i++)\n{\n    int n = Randomizer.nextInt(1, 10);\n    arr[i] += n;\n}\n\ndouble[] convert = new double[arr.length];\nfor(int i = 0; i < arr.length; i++)\n{\n    convert[i] = arr[i];\n}\n\nSystem.out.println(largest(convert));\n\nQ: Write a brief and concise API description for this method.\nA: Description:\nGenerates and returns an array of N random integers, each in the range (lo, hi), using a randomizer\n\nParemeters:\nN: number of integers to generate\nlo: minimum integer value to be generated\nhi: maximum integer value to be generated\n\nReturn:\nAn array of N random integers between lo and hi",
						"structuredData": {
							"": "int[] arr = new int[] {1, 4, -2, 5}\n\nfor(int i = 0; i < arr.length; i++)\n{\n    int n = Randomizer.nextInt(1, 10);\n    arr[i] += n;\n}\n\ndouble[] convert = new double[arr.length];\nfor(int i = 0; i < arr.length; i++)\n{\n    convert[i] = arr[i];\n}\n\nSystem.out.println(largest(convert));",
							"First Name": "Leo",
							"public double largest(double[] a)": "double largest = a[0];\n\nfor(int i = 0; i < a.length; i++)\n{\n    double cur = a[i];\n    if(cur > largest)\n    {\n        largest = cur;\n    }\n}\nreturn largest;",
							"Write a brief and concise API description for this method.": "Description:\nGenerates and returns an array of N random integers, each in the range (lo, hi), using a randomizer\n\nParemeters:\nN: number of integers to generate\nlo: minimum integer value to be generated\nhi: maximum integer value to be generated\n\nReturn:\nAn array of N random integers between lo and hi",
							"Last Name": "So",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "Students[] students = new Student[100]\n\nfor(int i = 0; i < students.length; i++)\n{\n    students[i] = new Student;\n}\n\nfor(int i = 0; i < students.length; i++)\n{\n    System.out.println(students[i]);\n}"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-08T11:49:32.519Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-14T01:42:54.977Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ6amFgLoV",
					"submittedAt": "2025-05-08T11:49:32.561Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:43.262Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T12:58:01.908Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudzQpea4DfrLoYbUVrq1tf1nzdDx1GkxH2rewh7L6GWl35TsB2IpQjnCUqYuQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: int[] student = new[100]; \nfor (int i = 0; i < student.length; i ++)\n{\n    System.out.println(student[i]);\n} \n\nQ: public double largest(double[] a)\nA: public double largest(double[] a)\n{\n    int largest = a[0];\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] > first)\n        {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n\nQ: \nA: int nums = new nums{1, 4, -2, 5};\nfor (int i = 0; i < nums.length; i++)\n{\n    int n = Randomizer.nextInt(low, high); \n    nums[i] = nums[i] + n; \n}\nreturn largest(nums); \n\nQ: Write a brief and concise API description for this method.\nA: /**\n *This method return the an array of the int lo and hi in random position with the length of N\n *@param N, lo, hi\n**/",
						"structuredData": {
							"": "int nums = new nums{1, 4, -2, 5};\nfor (int i = 0; i < nums.length; i++)\n{\n    int n = Randomizer.nextInt(low, high); \n    nums[i] = nums[i] + n; \n}\nreturn largest(nums); ",
							"First Name": "Carmen",
							"Write a brief and concise API description for this method.": "/**\n *This method return the an array of the int lo and hi in random position with the length of N\n *@param N, lo, hi\n**/",
							"public double largest(double[] a)": "public double largest(double[] a)\n{\n    int largest = a[0];\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] > first)\n        {\n            largest = a[i];\n        }\n    }\n    return largest;\n}",
							"Last Name": "Cheung",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "int[] student = new[100]; \nfor (int i = 0; i < student.length; i ++)\n{\n    System.out.println(student[i]);\n} "
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-08T11:51:30.520Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-14T12:58:02.053Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:51:30.531Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:44.747Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-13T19:53:24.642Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueG5KGPTAD9KLdvBBHAY7fDrHdjmULt4nl8xZw9VqUvXUCv4osaN_mnUROheA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena\n\nQ: Last Name\nA: Godek\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: public void run()\n{\n    int[] students = new int[100];\n    for(int i = 0; i < students.length; i++)\n    {\n        student[i] = i + 1;\n        System.out.println(\"This is student number\" + student[i]);\n    }\n}\n\nQ: public double largest(double[] a)\nA: {\n\n    double max = a[0];\n    for(int i = 0; i < a.length; i++)\n    {\n        if( max < a[i])\n        {\n            max = a[i]\n        }\n    }\n    return max;\n\n}\n\nQ: \nA: public void run()\n{\n    int arr[] = {1,4,-2,5};\n    int n = Randomizer\n    for(int i = 0; i < arr.length; i++)\n    {\n        int n = Randomizer(1, 10);\n        arr[i] = n;\n    }\n    largest(arr);\n}\n\nQ: Write a brief and concise API description for this method.\nA: /**\n* @param N is the number of elements in array arr\n* @param lo is the lower value for the randomizer;\n* @param hi is the higher value for the randomizer;\n* @return returns the final array arr with randomized values between lowest and highs \n* value.\n*/",
						"structuredData": {
							"": "public void run()\n{\n    int arr[] = {1,4,-2,5};\n    int n = Randomizer\n    for(int i = 0; i < arr.length; i++)\n    {\n        int n = Randomizer(1, 10);\n        arr[i] = n;\n    }\n    largest(arr);\n}",
							"First Name": "Sena",
							"Write a brief and concise API description for this method.": "/**\n* @param N is the number of elements in array arr\n* @param lo is the lower value for the randomizer;\n* @param hi is the higher value for the randomizer;\n* @return returns the final array arr with randomized values between lowest and highs \n* value.\n*/",
							"public double largest(double[] a)": "{\n\n    double max = a[0];\n    for(int i = 0; i < a.length; i++)\n    {\n        if( max < a[i])\n        {\n            max = a[i]\n        }\n    }\n    return max;\n\n}",
							"Last Name": "Godek",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "public void run()\n{\n    int[] students = new int[100];\n    for(int i = 0; i < students.length; i++)\n    {\n        student[i] = i + 1;\n        System.out.println(\"This is student number\" + student[i]);\n    }\n}"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IvNTT8mcQ6amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-08T11:49:50.097Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-13T19:53:24.755Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:49:50.132Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:46.148Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-14T17:16:26.985Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucOk-5deKN6uXWQWQvMmFi23cdMN_X8wYld16D98litMLxCXBdM3LgX_0GTyA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: String[] studentList= new String[100];\nreturn studentLIst;\n\nQ: public double largest(double[] a)\nA: double largestDouble = 0.0;\nfor (int i = 1; i < a.length; i++)\n{\n     if (a[i] >a [i + 1])\n     {\n          largestDouble = a[i]\n     }\n}\nreturn largestDouble;\n\nQ: \nA: int[] nums = {1, 4, -2, 5};\nfor (int i =0; i < nums.length; i++)\n{\n     int n = Randomizer.nextInt(1, 10);\n     nums[i] += n;\n}\nreturn largest(nums);\n\n\nQ: Write a brief and concise API description for this method.\nA: This method creates an array with the length of N and each integer in the array is randomly assigned the integer lo or hi. Finally, the array is returned.",
						"structuredData": {
							"": "int[] nums = {1, 4, -2, 5};\nfor (int i =0; i < nums.length; i++)\n{\n     int n = Randomizer.nextInt(1, 10);\n     nums[i] += n;\n}\nreturn largest(nums);\n",
							"First Name": "Nereyal",
							"public double largest(double[] a)": "double largestDouble = 0.0;\nfor (int i = 1; i < a.length; i++)\n{\n     if (a[i] >a [i + 1])\n     {\n          largestDouble = a[i]\n     }\n}\nreturn largestDouble;",
							"Write a brief and concise API description for this method.": "This method creates an array with the length of N and each integer in the array is randomly assigned the integer lo or hi. Finally, the array is returned.",
							"Last Name": "Jeyakumar",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "String[] studentList= new String[100];\nreturn studentLIst;"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-08T11:52:19.662Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-14T17:16:27.133Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEOmphYC6FQ",
					"submittedAt": "2025-05-08T11:52:19.697Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:47.568Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-14T00:27:57.610Z",
								"totalFormResponses": 14,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueVt43NbbBAYah5_omGYknPNXMS8PpkFGTUdUMdtojJV8KR3BBl0L120P_6xA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: \n\nQ: public double largest(double[] a)\nA: public double largest(double[] a) {\n    for(int i = 0; i < a.length; i++) {\n        largest = a[0];\n        if(a[0] < a[i]) {\n            largest = a[i];\n        }\n        return largest; \n    }\n}\n\nQ: \nA: int [] nums = {1, 4, -2, 5};\n\nfor(int i = 0; i < nums.length; i++) {\n    nums[i] += Randomizer.nextInt(1, 10);\n}\n\nSystem.out.println(largest(nums));\n\nQ: Write a brief and concise API description for this method.\nA: Generates and returns an array of N random integers, each in the range lo, hi. Uses Randomizer.nextInt to produce each random value. ",
						"structuredData": {
							"": "int [] nums = {1, 4, -2, 5};\n\nfor(int i = 0; i < nums.length; i++) {\n    nums[i] += Randomizer.nextInt(1, 10);\n}\n\nSystem.out.println(largest(nums));",
							"First Name": "Cayden",
							"Write a brief and concise API description for this method.": "Generates and returns an array of N random integers, each in the range lo, hi. Uses Randomizer.nextInt to produce each random value. ",
							"public double largest(double[] a)": "public double largest(double[] a) {\n    for(int i = 0; i < a.length; i++) {\n        largest = a[0];\n        if(a[0] < a[i]) {\n            largest = a[i];\n        }\n        return largest; \n    }\n}",
							"Last Name": "Chiu",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": ""
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"id": "Cg4IvpGn9MAOEOmphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-08T11:51:09.128Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-14T00:27:57.752Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:51:09.170Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:49.083Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-05-08T18:37:21.188Z",
								"totalFormResponses": 14,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudnbusL1RR7yEwWiM_SSEF7FEY7z8RK8DJOUjjjy7nKGTlUWKz2loaqXcN9JA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: Student [] students = new Student [100];\n\nQ: public double largest(double[] a)\nA: double largestDouble = 0;\nfor(int i=0;  i< a.length; i++)\n{\n    if( a[ i ] > largestDouble )\n    {\n        largestDouble = a[ i ];\n    }\n    return largestDouble;\n}\n\nQ: \nA: int [ ] nums = {1, 4, -2, 5};\nint [ ] newArr = new int [4];\n\nfor(int i=0; i < 4; i ++)\n{\n    newArr[i] = nums[i] + Randomizer.nextInt(1, 11);\n}\nSystem.out.println(largest(newArr));\n\nQ: Write a brief and concise API description for this method.\nA: /**\n* Creates a new array that has length N, and randomize the intetrgers\n*\n*@param N the length of the array\n*@param lo the lowest random number\n*@param hi the highest (exclusive)  random number\n*@return an array that is N in length, and random integers between lo and hi\n*/\n\n",
						"structuredData": {
							"": "int [ ] nums = {1, 4, -2, 5};\nint [ ] newArr = new int [4];\n\nfor(int i=0; i < 4; i ++)\n{\n    newArr[i] = nums[i] + Randomizer.nextInt(1, 11);\n}\nSystem.out.println(largest(newArr));",
							"First Name": "Owen",
							"Write a brief and concise API description for this method.": "/**\n* Creates a new array that has length N, and randomize the intetrgers\n*\n*@param N the length of the array\n*@param lo the lowest random number\n*@param hi the highest (exclusive)  random number\n*@return an array that is N in length, and random integers between lo and hi\n*/\n\n",
							"public double largest(double[] a)": "double largestDouble = 0;\nfor(int i=0;  i< a.length; i++)\n{\n    if( a[ i ] > largestDouble )\n    {\n        largestDouble = a[ i ];\n    }\n    return largestDouble;\n}",
							"Last Name": "Kung",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "Student [] students = new Student [100];"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-08T11:50:36.186Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-08T18:37:21.260Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEOmphYC6FQ",
					"submittedAt": "2025-05-08T11:50:36.194Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:50.583Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-08T18:40:43.815Z",
								"totalFormResponses": 14,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufFylrgaC9uu9nOv1A6iA7w56sq_wXHSBGr0st6sULm4pPBqJBr39lqJE_r8w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: Student [] arr = new Student[100];\n\nQ: public double largest(double[] a)\nA: double result = 0;\nfor (int i = 0; i < a.length; i++)\n{\n    if (a[i] > result)\n    {\n        result = a[i];\n    }\n}\nreturn result;\n\nQ: \nA: int[] nums = {1, 4, -2, 5};\nfor (int i = 0; i < 4; i++)\n{\n    int n = Randomizer.nextInt(1, 10);\n    nums[i] += n;\n}\nreturn nums.largest();\n\n\nQ: Write a brief and concise API description for this method.\nA: return an array with n integers. The integers are random from lo to hi",
						"structuredData": {
							"": "int[] nums = {1, 4, -2, 5};\nfor (int i = 0; i < 4; i++)\n{\n    int n = Randomizer.nextInt(1, 10);\n    nums[i] += n;\n}\nreturn nums.largest();\n",
							"First Name": "Jennifer",
							"public double largest(double[] a)": "double result = 0;\nfor (int i = 0; i < a.length; i++)\n{\n    if (a[i] > result)\n    {\n        result = a[i];\n    }\n}\nreturn result;",
							"Write a brief and concise API description for this method.": "return an array with n integers. The integers are random from lo to hi",
							"Last Name": "Zheng",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "Student [] arr = new Student[100];"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"id": "Cg4I7ZHxyucSEOmphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-08T11:50:11.386Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-08T18:40:43.922Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:50:11.422Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:52.071Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849449",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-13T18:12:48.500Z",
								"totalFormResponses": 14,
								"formTitle": "Unit 5 Quiz: Arrays (Practice)",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuch1sGNypGL2krafj1NUZqIrsRHCZgf389SisKbOuSqHUxZyPuc7s8J3c5lLw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.\nA: Student huge[] = new Student[100];\n System.out.println(huge[]);\n\nQ: public double largest(double[] a)\nA: double large = a[0];\nfor(int i = 1; i < a.length; i++)\n{\n    if(a[i] > large)\n    {\n        large = wow;\n    }\n}\nreturn large;\n\nQ: \nA: int a[] = int{1, 4, -2, 5};\nfor(int i = 0; i < 4; i++)\n{\n    int n = Randomizer.nextInt(0, 10)\n    a[i] = n;\n}\nreturn largest(a[]);\n\nQ: Write a brief and concise API description for this method.\nA: /**\n * N equals to length of array;\n * lo equals to lowest of random range\n * hi equals to highest of random range\n */",
						"structuredData": {
							"": "int a[] = int{1, 4, -2, 5};\nfor(int i = 0; i < 4; i++)\n{\n    int n = Randomizer.nextInt(0, 10)\n    a[i] = n;\n}\nreturn largest(a[]);",
							"First Name": "Lionson",
							"Write a brief and concise API description for this method.": "/**\n * N equals to length of array;\n * lo equals to lowest of random range\n * hi equals to highest of random range\n */",
							"public double largest(double[] a)": "double large = a[0];\nfor(int i = 1; i < a.length; i++)\n{\n    if(a[i] > large)\n    {\n        large = wow;\n    }\n}\nreturn large;",
							"Last Name": "Meng",
							"Recall the Student class from the last test that creates a random student when the default constructor is called. Write the code that creates an array of 100 Student objects and outputs the string representation of that object.": "Student huge[] = new Student[100];\n System.out.println(huge[]);"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ5/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iu8ODue4SEOmphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-08T11:52:25.621Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-13T18:12:48.616Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-08T11:52:25.632Z",
					"assignmentName": "Unit 5 Quiz: Arrays (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:39:56.914Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:16:47.973Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "349168732@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufEfjeAZsDuxP18me79P__czsnjz13DIgsYeUJleOND9og8bRdq3-dqFJzXvQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Joe\n\nQ: Last Name\nA: Zhuo\n\nQ: Implement the Product class here:\nA: public class Product {\n    public int totalItems = 0;\n    private double cost ;\n\n    public Product(double theCost) {\n        this.cost = theCost;\n        totalItems++;\n    }\n\n    public double tax() {\n        return this.cost  * 0.1;\n    }\n\n    public double tax(double taxPercent) {\n        return this.cost * taxPercent;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    private int minAge;\n\n    public Toy(double theCost, int minimumAge) {\n        super(theCost);\n        this.minAge = minimumAge;\n    }\n\n    public double tax() {\n        return super(0.13);\n    }\n}\n\nQ: Implement your code here:\nA: public void run() {\n    // creates the math course\n    Course math = new Course(\"Math\", 2);\n\n    // creates the students\n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n\n    // attempts to enroll students and outputs whether they are enrolled\n    System.out.println(math.enrol(alice));\n    System.out.println(math.enrol(bob));\n    System.out.println(math.enrol(celia));\n\n    // prints out course name and students who are over 15 years old\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n\n    // creates the computer course\n    Course comp = new Course(\"computers\");\n\n    // attempts to add 10 random students into the course\n    for (int i = 0; i < 10; i++) {\n        Student s = new Student();\n        System.out.println(comp.enrol(s));\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: True\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string of the memory used from creating the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: public\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    private int minAge;\n\n    public Toy(double theCost, int minimumAge) {\n        super(theCost);\n        this.minAge = minimumAge;\n    }\n\n    public double tax() {\n        return super(0.13);\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement your code here:": "public void run() {\n    // creates the math course\n    Course math = new Course(\"Math\", 2);\n\n    // creates the students\n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n\n    // attempts to enroll students and outputs whether they are enrolled\n    System.out.println(math.enrol(alice));\n    System.out.println(math.enrol(bob));\n    System.out.println(math.enrol(celia));\n\n    // prints out course name and students who are over 15 years old\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n\n    // creates the computer course\n    Course comp = new Course(\"computers\");\n\n    // attempts to add 10 random students into the course\n    for (int i = 0; i < 10; i++) {\n        Student s = new Student();\n        System.out.println(comp.enrol(s));\n    }\n}",
							"Which is an instance method?": "bark",
							"Implement the Product class here:": "public class Product {\n    public int totalItems = 0;\n    private double cost ;\n\n    public Product(double theCost) {\n        this.cost = theCost;\n        totalItems++;\n    }\n\n    public double tax() {\n        return this.cost  * 0.1;\n    }\n\n    public double tax(double taxPercent) {\n        return this.cost * taxPercent;\n    }\n}",
							"First Name": "Joe",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "True",
							"What keyword to you use to make a class method?": "public",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"A constructor is called whenever an object is instantiated.": "True",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string of the memory used from creating the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Zhuo"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-02T17:36:26.094Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-02T18:21:51.355Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-02T18:21:53.917Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:36:26.100Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:01.985Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:12:28.579Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf9laP06O4eID3hVEXt4nF0CadynCiACGouByZFZF1t06lNNEGY9rClL5UP8A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: Implement the Product class here:\nA: public class Product\n{\n    public static int totalItems;\n    private double cost;\n\n    public Product(double cost)\n    {\n        this.cost = cost;\n        totalItems++;\n    }\n\n    public double tax()\n    {\n        return this.cost * 0.10;\n    }\n\n    public double tax(double percent)\n    {\n        return this.cost * percent;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int minAge;\n\n    public Toy(double cost, int minAge)\n    {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public double tax()\n    {\n        return super.tax(0.13);\n    }\n}\n\nQ: Implement your code here:\nA: public void run()\n{\n    Course math = new Course(\"Math\", 2);\n\n    Student a = new Student(\"Alice\", 14);\n    Student b  = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n\n    math.enrol(a);\n    math.enrol(b);\n    math.enrol(c);\n\n    math.getCourseName();\n    math.summary(15);\n\n    Course comp = new Course(\"computers\");\n\n    for (int i = 0; i < 10; i++)\n    {\n        Student random = new Student();\n        comp.enrol(random);\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: True\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int minAge;\n\n    public Toy(double cost, int minAge)\n    {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public double tax()\n    {\n        return super.tax(0.13);\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Which is an instance method?": "bark",
							"Implement your code here:": "public void run()\n{\n    Course math = new Course(\"Math\", 2);\n\n    Student a = new Student(\"Alice\", 14);\n    Student b  = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n\n    math.enrol(a);\n    math.enrol(b);\n    math.enrol(c);\n\n    math.getCourseName();\n    math.summary(15);\n\n    Course comp = new Course(\"computers\");\n\n    for (int i = 0; i < 10; i++)\n    {\n        Student random = new Student();\n        comp.enrol(random);\n    }\n}",
							"Implement the Product class here:": "public class Product\n{\n    public static int totalItems;\n    private double cost;\n\n    public Product(double cost)\n    {\n        this.cost = cost;\n        totalItems++;\n    }\n\n    public double tax()\n    {\n        return this.cost * 0.10;\n    }\n\n    public double tax(double percent)\n    {\n        return this.cost * percent;\n    }\n}",
							"Which of the following belongs to the instance and not the class?": "name",
							"First Name": "Abithan",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "True",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Paskaranathan"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-02T17:36:20.929Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-02T18:12:28.687Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:36:20.937Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:06.827Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:22:35.486Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf3jrO9H9SbPUFzHuN2uqUgGRLOGOVaW0eNW9SP4eyf6FVry2VXxz3m1fDAWQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: Implement the Product class here:\nA: public class Product {\n    public static int totalItems;\n    public double cost;\n    \n    public Product(double cost) {\n        this.cost = cost;\n        totalItems++;\n    }\n    \n    public double tax() {\n        return cost * 0.1;\n    }\n    \n    public double tax(int taxPercentage) {\n        return cost * taxPercentage;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    public int minAge;\n    \n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n    \n    public double tax() {\n        return cost * 0.13;\n    }\n}\n\nQ: Implement your code here:\nA: public void run() {\n    Course math = new Course(\"Math\", 2);\n    \n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n    \n    math.enrol(alice);\n    math.enrol(bob);\n    math.enrol(celia);\n    \n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n    \n    Course comp = new Course(\"Computers\");\n    \n    for (int i = 0; i < 10; i++) {\n        Student student = new Student();\n        comp.enrol(student);\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string of the memory used from creating the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    public int minAge;\n    \n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n    \n    public double tax() {\n        return cost * 0.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Which is an instance method?": "bark",
							"Implement your code here:": "public void run() {\n    Course math = new Course(\"Math\", 2);\n    \n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n    \n    math.enrol(alice);\n    math.enrol(bob);\n    math.enrol(celia);\n    \n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n    \n    Course comp = new Course(\"Computers\");\n    \n    for (int i = 0; i < 10; i++) {\n        Student student = new Student();\n        comp.enrol(student);\n    }\n}",
							"Implement the Product class here:": "public class Product {\n    public static int totalItems;\n    public double cost;\n    \n    public Product(double cost) {\n        this.cost = cost;\n        totalItems++;\n    }\n    \n    public double tax() {\n        return cost * 0.1;\n    }\n    \n    public double tax(int taxPercentage) {\n        return cost * taxPercentage;\n    }\n}",
							"First Name": "Kelton",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string of the memory used from creating the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Kuan"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-02T17:36:20.780Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-02T18:22:35.590Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:36:20.820Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:11.597Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-06T17:56:24.882Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuesweGMhdqdXRQZEMv1jF4B0N60OUGVx0kBqr-GKkEWz2FeT04uWXjfOOtwSw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: Implement the Product class here:\nA: public class Product {\n    public static int totalNumItems;\n    public double cost;\n    public double taxPercentage;\n\n    public Product(double cost) {\n        this.cost = cost;\n        totalNumItems++;\n    }\n\n    public double tax() {\n        return 0.1 * cost;\n    }\n\n    public double tax(double percentage) {\n        this.taxPercentage = taxPercentage;\n        return taxPercentage;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    int minAge;\n\n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    @Override\n    public double tax() {\n        return 0.13 * super(cost);\n    }\n}\n\nQ: Implement your code here:\nA: public void run() {\n    Course math = new Course(\"Math\", 2);\n\n    Student x = new Student(\"Alice\", 14);\n    Student y = new Student(\"Bob\", 16);\n    Student z = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(x));\n    System.out.println(math.enrol(y));\n    System.out.println(math.enrol(z));\n\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n\n    Course comp = new Course(\"Computers\");\n    for (int i = 0; i < 10; i++) {\n        Student student = new Student();\n        System.out.println(comp.enrol(student));\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    int minAge;\n\n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    @Override\n    public double tax() {\n        return 0.13 * super(cost);\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product {\n    public static int totalNumItems;\n    public double cost;\n    public double taxPercentage;\n\n    public Product(double cost) {\n        this.cost = cost;\n        totalNumItems++;\n    }\n\n    public double tax() {\n        return 0.1 * cost;\n    }\n\n    public double tax(double percentage) {\n        this.taxPercentage = taxPercentage;\n        return taxPercentage;\n    }\n}",
							"Which is an instance method?": "bark",
							"Implement your code here:": "public void run() {\n    Course math = new Course(\"Math\", 2);\n\n    Student x = new Student(\"Alice\", 14);\n    Student y = new Student(\"Bob\", 16);\n    Student z = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(x));\n    System.out.println(math.enrol(y));\n    System.out.println(math.enrol(z));\n\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n\n    Course comp = new Course(\"Computers\");\n    for (int i = 0; i < 10; i++) {\n        Student student = new Student();\n        System.out.println(comp.enrol(student));\n    }\n}",
							"First Name": "Jiayu",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Class names should be capitalized (first letter is capital).": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Chen"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"id": "Cg0I5qyc4Q4Q5KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-02T17:37:12.271Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-06T17:56:25.038Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:37:12.311Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:16.763Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:15:35.439Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueRA52Z6IHvin4tGj77i79KmHdzKUh64qSF3wMAW5Lvv2smoge6dhPX59bYbg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Veznu \n\nQ: Last Name\nA: Premathas \n\nQ: Implement the Product class here:\nA: public class Product\n{\n    //Counts total # item \n    public static int totalItems = 0; \n    private double cost;\n    \n    //Constructor \n    //Product detergent = new Product($4.90)\n    public Product(double productCost)\n    {\n        cost = productCost;\n        totalItems += 1;\n    }\n    \n    public double tax( )\n    {\n        return cost * 0.10;\n    }\n    \n    public double tax(double taxPercentage)\n    {\n        return cost * (taxPercentage/100);\n    }\n}\n\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int minAge;\n    \n    public Toy(double productCost, int minAge)\n    {\n        super(productCost);\n        this.minAge = minAge;\n    }\n    \n    public double tax()\n    {\n        return cost * 0.13;\n    }\n}\n\n\nQ: Implement your code here:\nA: Course math = new Course(\"functions\", 2);\n\nStudent alice = new Student(Alice, 14);\nStudent bob = new Student(Bob, 16);\nStudent celia = new Student(Celia, 17);\n\nSystem.out.println(math.enrol(alice)); \nSystem.out.println(math.enrol(bob)); \nSystem.out.println(math.enrol(celia));\n\nSystem.out.println(\"Course: \" + math.getCourseName());\nSystem.out.println(\"Students that are 15 or older:\");\nSystem.out.print(math.summary(15)); \n\nCourse comp = new Course(\"computers\");\n\nfor (int i = 0; i < 10; i++) {\n    Student random = new Student(); \n    System.out.println(comp.enrol(random)); \n}\n\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int minAge;\n    \n    public Toy(double productCost, int minAge)\n    {\n        super(productCost);\n        this.minAge = minAge;\n    }\n    \n    public double tax()\n    {\n        return cost * 0.13;\n    }\n}\n",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement your code here:": "Course math = new Course(\"functions\", 2);\n\nStudent alice = new Student(Alice, 14);\nStudent bob = new Student(Bob, 16);\nStudent celia = new Student(Celia, 17);\n\nSystem.out.println(math.enrol(alice)); \nSystem.out.println(math.enrol(bob)); \nSystem.out.println(math.enrol(celia));\n\nSystem.out.println(\"Course: \" + math.getCourseName());\nSystem.out.println(\"Students that are 15 or older:\");\nSystem.out.print(math.summary(15)); \n\nCourse comp = new Course(\"computers\");\n\nfor (int i = 0; i < 10; i++) {\n    Student random = new Student(); \n    System.out.println(comp.enrol(random)); \n}\n",
							"Which is an instance method?": "bark",
							"Implement the Product class here:": "public class Product\n{\n    //Counts total # item \n    public static int totalItems = 0; \n    private double cost;\n    \n    //Constructor \n    //Product detergent = new Product($4.90)\n    public Product(double productCost)\n    {\n        cost = productCost;\n        totalItems += 1;\n    }\n    \n    public double tax( )\n    {\n        return cost * 0.10;\n    }\n    \n    public double tax(double taxPercentage)\n    {\n        return cost * (taxPercentage/100);\n    }\n}\n",
							"First Name": "Veznu ",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"A constructor is called whenever an object is instantiated.": "True",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Premathas "
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-02T17:37:07.712Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-02T18:15:35.560Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:37:07.753Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:21.485Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:08:09.471Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349045377@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufbtHtxWpRrVpE6-eVeGIcVNUAqoF_5AEb-3_Cd8GLWuTDEH0aaRIKv2x2ovw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nathan\n\nQ: Last Name\nA: Ji\n\nQ: Implement the Product class here:\nA: public class Product {\n    public static int totalItems = 0;\n    private double cost;\n  \n    public Product(double cost) {\n        this.cost = cost;\n        totalItems++;\n    }\n  \n    public double tax() {\n        return cost * 0.1;\n    }\n  \n    public double tax(double percentage) {\n        return cost * (percentage / 100.0);\n    }\n  \n    public double getCost() {\n        return cost;\n    }\n  \n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    private int minAge;\n  \n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public int getMinAge() {\n        return minAge;\n    }\n  \n    public void setMinAge(int minAge) {\n        this.minAge = minAge;\n    }\n  \n    public double tax() {\n        return getCost() * 0.13;\n    }\n}\n\nQ: Implement your code here:\nA: Course math = new Course(Math, 2);\n\nStudent a =  new Student(Alice, 14);\nStudent b = new Student(Bob, 16);\nStudent c = new Student(Celia, 17);\n\nmath.enrol(a);\nmath.enrol(b);\nmath.enrol(c);\n\nmath.getCourseName();\na.summary(15);\nb.summary(15);\nc.summary(15);\n\nCourse comp = new Course(computers, \"(default)\");\n\nfor(int i = 0, i < 10, i++) {\n    comp.enrol(i);\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: True\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: True\n\nQ: Which is an instance method?\nA: reset\n\nQ: 'totalDogs' is called a(n):\nA: instance variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: totalDogs\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overriden\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: void\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: primitive\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    private int minAge;\n  \n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public int getMinAge() {\n        return minAge;\n    }\n  \n    public void setMinAge(int minAge) {\n        this.minAge = minAge;\n    }\n  \n    public double tax() {\n        return getCost() * 0.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product {\n    public static int totalItems = 0;\n    private double cost;\n  \n    public Product(double cost) {\n        this.cost = cost;\n        totalItems++;\n    }\n  \n    public double tax() {\n        return cost * 0.1;\n    }\n  \n    public double tax(double percentage) {\n        return cost * (percentage / 100.0);\n    }\n  \n    public double getCost() {\n        return cost;\n    }\n  \n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n}",
							"Implement your code here:": "Course math = new Course(Math, 2);\n\nStudent a =  new Student(Alice, 14);\nStudent b = new Student(Bob, 16);\nStudent c = new Student(Celia, 17);\n\nmath.enrol(a);\nmath.enrol(b);\nmath.enrol(c);\n\nmath.getCourseName();\na.summary(15);\nb.summary(15);\nc.summary(15);\n\nCourse comp = new Course(computers, \"(default)\");\n\nfor(int i = 0, i < 10, i++) {\n    comp.enrol(i);\n}",
							"Which is an instance method?": "reset",
							"Which of the following belongs to the instance and not the class?": "totalDogs",
							"First Name": "Nathan",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "primitive",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "True",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "void",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "instance variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overriden",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Ji"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-02T17:36:25.653Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-02T18:08:09.574Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:36:25.660Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:26.068Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:43:19.000Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuedVPMji03y3F2a_zNU8pLsATJwwl_1cFCQOz62ZXpfpHC9CIHMHJgz4PrC-g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: Implement the Product class here:\nA: public class Product\n{\n    public static int total = 0;\n    public double cost;\n\n    public Product(cost)\n    {\n        this.cost = cost; \n        total++;\n    }\n    public void double tax()\n    {\n        tax = return this.cost*0.10;\n    }\n    public getTax()\n    {\n        return tax;\n    }\n}\n\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    public class Toy\n    {\n        private boolean ageRequired; \n    }\n    public Toy (theCost, theAgeRequired)\n    {\n        this.cost = theCost;\n        ageRequired = theAgeRequired;\n    }\n    public void double tax()\n    {\n        tax = this.cost * 0.13;\n    }\n}\n        \n\n\n\n\nQ: Implement your code here:\nA: public run ()\n{\n    Course Math = new Course(\"Math\", 2);\n    Student Alice =  new Student(\"Alice\", 14);\n    Student Bob = new Student(\"Bob\", 16); \n    Student Celia = new Student(\"Celia\", 17); \n    enrol(Alice, Bob, Celia);\n    System.out.println(false);\n    System.out.println(\"Math \" + Bob + \" \" + Celia); \n    Course comp = new Course(\"Computers\");\n    for(int i = 0, i < 10 i++)\n    {\n        boolean enrol(Student())\n    }\n    if(boolean enrol == true)\n    {\n        System.out.println(\"true\");\n    }\n    else\n    {\n        System.out.println(\"false\");\n    }\n}\n\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: False\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: True\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: public\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: object\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    public class Toy\n    {\n        private boolean ageRequired; \n    }\n    public Toy (theCost, theAgeRequired)\n    {\n        this.cost = theCost;\n        ageRequired = theAgeRequired;\n    }\n    public void double tax()\n    {\n        tax = this.cost * 0.13;\n    }\n}\n        \n\n\n",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Which is an instance method?": "bark",
							"Implement your code here:": "public run ()\n{\n    Course Math = new Course(\"Math\", 2);\n    Student Alice =  new Student(\"Alice\", 14);\n    Student Bob = new Student(\"Bob\", 16); \n    Student Celia = new Student(\"Celia\", 17); \n    enrol(Alice, Bob, Celia);\n    System.out.println(false);\n    System.out.println(\"Math \" + Bob + \" \" + Celia); \n    Course comp = new Course(\"Computers\");\n    for(int i = 0, i < 10 i++)\n    {\n        boolean enrol(Student())\n    }\n    if(boolean enrol == true)\n    {\n        System.out.println(\"true\");\n    }\n    else\n    {\n        System.out.println(\"false\");\n    }\n}\n",
							"Implement the Product class here:": "public class Product\n{\n    public static int total = 0;\n    public double cost;\n\n    public Product(cost)\n    {\n        this.cost = cost; \n        total++;\n    }\n    public void double tax()\n    {\n        tax = return this.cost*0.10;\n    }\n    public getTax()\n    {\n        return tax;\n    }\n}\n",
							"Which of the following belongs to the instance and not the class?": "name",
							"First Name": "Clark",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "object",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "True",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "public",
							"A constructor is called whenever an object is instantiated.": "False",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Chen"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"id": "Cg0Ik_u42h8Q5KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-05-02T17:38:33.392Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-05-02T18:43:19.113Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:38:33.400Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:30.975Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:18:03.997Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufgaE0IdB4oETq5gJXrUtC_oh8DCWOp9-raEWCsdFC5Lh0zyJYLzXKTeGdjAA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Edward Wang\n\nQ: Last Name\nA: Wang\n\nQ: Implement the Product class here:\nA: public class Product()\n{\n    public static int numItems;\n    private double cost;\n\n    public Product(productCost)\n    {\n        cost = productCost;\n        numItems++;\n    }    \n\n    public double tax()\n    {\n        return cost*.10;\n    }\n\n    public double tax(double taxRate)\n    {\n        return cost*taxRate;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product()\n{\n    private int minAge;\n    \n    public Toy(double cost, int minAge)\n    {\n        super(cost);\n        this.minAge = minAge;  \n    }\n\n    public double tax()\n    {\n        return cost*.13;\n    }\n}\n\nQ: Implement your code here:\nA: public void run()\n{\n    Course math = new Course (\"Math\", 2);\n    \n    Student a = new Student(\"Alice\", 14);\n    Student b = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(a));\n    System.out.println(math.enrol(b));\n    System.out.println(math.enrol(c));\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary());\n\n    Course comp = new Course (\"computers\");\n    for(int i = 0 ; i < 10 ; i++)\n    {\n        Student i  = new Student();\n        System.out.println(comp.enrol(i));\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: True\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product()\n{\n    private int minAge;\n    \n    public Toy(double cost, int minAge)\n    {\n        super(cost);\n        this.minAge = minAge;  \n    }\n\n    public double tax()\n    {\n        return cost*.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "True",
							"Implement the Product class here:": "public class Product()\n{\n    public static int numItems;\n    private double cost;\n\n    public Product(productCost)\n    {\n        cost = productCost;\n        numItems++;\n    }    \n\n    public double tax()\n    {\n        return cost*.10;\n    }\n\n    public double tax(double taxRate)\n    {\n        return cost*taxRate;\n    }\n}",
							"Implement your code here:": "public void run()\n{\n    Course math = new Course (\"Math\", 2);\n    \n    Student a = new Student(\"Alice\", 14);\n    Student b = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(a));\n    System.out.println(math.enrol(b));\n    System.out.println(math.enrol(c));\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary());\n\n    Course comp = new Course (\"computers\");\n    for(int i = 0 ; i < 10 ; i++)\n    {\n        Student i  = new Student();\n        System.out.println(comp.enrol(i));\n    }\n}",
							"Which is an instance method?": "bark",
							"First Name": "Edward Wang",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Wang"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I7-PGhEAQ5KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-02T17:36:25.286Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-12T17:51:50.714Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:36:25.293Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:35.647Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:19:27.138Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc0fyfI3wUU_DSUwQhLoepu5R_FU9NQR9rhRP3qhbzndWeDhj5ZhSrpAj1ZWQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: Implement the Product class here:\nA: public class Product()\n{\n    public static int = totalItems;\n    private double cost;\n\n    public Product(double cost)\n    {\n        this.cost = cost;\n        totalItems++;\n    }\n\n    public double tax()\n    {\n        return cost * 0.10;\n    }\n\n    public double tax(int percentage)\n    {\n        return cost * (percentage / 100.0);\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int minAge;\n\n    public Toy(int minAge)\n    {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public double tax()\n    {\n        return super(tax(13));\n    }\n}\n\nQ: Implement your code here:\nA: public void run()\n{\n    Course math = new Course(\"Math\", 2);\n\n    Student alice = new Student(\"Alice\", 14);\n    Stduent bob = new Student(\"Bob\", 16);\n    Student celia = new Stdudent(\"Celia\", 17);\n\n    System.out.println(math.enrol(alice));\n    System.out.println(math.enrol(bob));\n    System.out.println(math.enrol(celia));\n\n    System.out.println(\"Course name: \" + math.getCourseName());\n    System.out.println(\"Students 15 or older: \" + math.summary(15));\n\n    Course comp = new Course(\"Computers\")\n\n    for(int i = 0; i < 10; i++)\n    {\n        Student s = new Student();\n        System.out.println(comp.enrol(s));\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overriding\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: extends\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: primitive\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int minAge;\n\n    public Toy(int minAge)\n    {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public double tax()\n    {\n        return super(tax(13));\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement your code here:": "public void run()\n{\n    Course math = new Course(\"Math\", 2);\n\n    Student alice = new Student(\"Alice\", 14);\n    Stduent bob = new Student(\"Bob\", 16);\n    Student celia = new Stdudent(\"Celia\", 17);\n\n    System.out.println(math.enrol(alice));\n    System.out.println(math.enrol(bob));\n    System.out.println(math.enrol(celia));\n\n    System.out.println(\"Course name: \" + math.getCourseName());\n    System.out.println(\"Students 15 or older: \" + math.summary(15));\n\n    Course comp = new Course(\"Computers\")\n\n    for(int i = 0; i < 10; i++)\n    {\n        Student s = new Student();\n        System.out.println(comp.enrol(s));\n    }\n}",
							"Implement the Product class here:": "public class Product()\n{\n    public static int = totalItems;\n    private double cost;\n\n    public Product(double cost)\n    {\n        this.cost = cost;\n        totalItems++;\n    }\n\n    public double tax()\n    {\n        return cost * 0.10;\n    }\n\n    public double tax(int percentage)\n    {\n        return cost * (percentage / 100.0);\n    }\n}",
							"Which is an instance method?": "bark",
							"First Name": "Leo",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "primitive",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overriding",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "extends",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"A constructor is called whenever an object is instantiated.": "True",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Ir5z7q0AQ5KmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-02T17:36:31.806Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-02T18:19:27.250Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:36:31.842Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:40.447Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:38:27.432Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudfv3zGo_po6sOkwywWXGXsHgyxdfSJxnCFpUcn1L_wVvRiXvus1LIv6SIUPw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Carmen \n\nQ: Last Name\nA: Cheung\n\nQ: Implement the Product class here:\nA: public class Product\n{\n    public static int totalItems = 0; \n    private double cost; \n    \n    public Product(double cost)\n    {\n        this.cost = cost; \n        totalItems++; \n    } \n    public double Tax()\n    {\n        return cost*0.10;\n    }\n    public double Tax(double percent)\n    {\n        double p = percent / 100; \n        return p*cost; \n    }\n}  \n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int age; \n\n    public Toy(int age)\n    {\n        super(cost); \n        this.age = age;\n    }\n    public double Tax()\n    {\n        return  cost*0.13; \n    }\n}\n\nQ: Implement your code here:\nA: public void run()\n{\n    Course math = new Course(\"Math\", 2);\n\n    Student s1 = new Student(\"Alice\", 14);\n    Student s2 = new Student(\"Bob\", 16);\n    Student s3 = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(s1)); \n    System.out.println(math.enrol(s2));\n    System.out.println(math.enrol(s3));\n\n    System.out.println(math.getCourseName()); \n    System.out.println(math.summary(15)); \n\n    Course comp = new Course(\"Computers\"); \n    for (int i = 0; i < 10; i++)\n    {\n        Student s = new Student(); \n        System.out.println(comp.enrol(s)); \n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int age; \n\n    public Toy(int age)\n    {\n        super(cost); \n        this.age = age;\n    }\n    public double Tax()\n    {\n        return  cost*0.13; \n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement your code here:": "public void run()\n{\n    Course math = new Course(\"Math\", 2);\n\n    Student s1 = new Student(\"Alice\", 14);\n    Student s2 = new Student(\"Bob\", 16);\n    Student s3 = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(s1)); \n    System.out.println(math.enrol(s2));\n    System.out.println(math.enrol(s3));\n\n    System.out.println(math.getCourseName()); \n    System.out.println(math.summary(15)); \n\n    Course comp = new Course(\"Computers\"); \n    for (int i = 0; i < 10; i++)\n    {\n        Student s = new Student(); \n        System.out.println(comp.enrol(s)); \n    }\n}",
							"Which is an instance method?": "bark",
							"Implement the Product class here:": "public class Product\n{\n    public static int totalItems = 0; \n    private double cost; \n    \n    public Product(double cost)\n    {\n        this.cost = cost; \n        totalItems++; \n    } \n    public double Tax()\n    {\n        return cost*0.10;\n    }\n    public double Tax(double percent)\n    {\n        double p = percent / 100; \n        return p*cost; \n    }\n}  ",
							"First Name": "Carmen ",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"A constructor is called whenever an object is instantiated.": "True",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Cheung"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-02T17:36:20.319Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-02T18:38:34.382Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:36:20.326Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:45.368Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:24:27.873Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuccJEIuNZXF1OqHOpiOglKwPnHPIN52DD4DEc6sHX8nDP8OIz0UE-T89ujvUQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena \n\nQ: Last Name\nA: Godek\n\nQ: Implement the Product class here:\nA: public class Product\n{\n    private static int numItems;\n    private double cost;\n\n    public Product(Double theCost)\n    {\n        cost = theCost;\n        numItems ++;\n    }\n\n    public Double tax()\n    {\n        return cost*0.1;\n    }\n\n    public Double tax(Double percentage)\n    {\n        return*percentage;\n    }\n\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int age;\n    \n    public Toy(Double cost, int minAge)\n    {\n        super(cost);\n        age = minAge;\n    }\n\n    public Double tax()\n    {\n        return*0.13;\n    }\n\n}\n\nQ: Implement your code here:\nA: public void run()\n{\n    Cours math = new Cours(\"Math\", 2);\n    \n    Student s1 = new Student(\"Alice\", 14);\n    Student s2 = new Student(\"Bob\", 16);\n    Student s3 = new Student(\"Celia\", 17);\n\n    math.enrol(s1);\n    math.enrol(s2);\n    math.enrol(s3);\n    math.summary(15);\n\n    Cours comp = new Cours(\"Computers\");\n\n    for(int i = 0; i < 10; i++)\n    {\n        Student s = new Student();\n        comp.enrol(s);\n    }\n\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: True\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Rename the method",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int age;\n    \n    public Toy(Double cost, int minAge)\n    {\n        super(cost);\n        age = minAge;\n    }\n\n    public Double tax()\n    {\n        return*0.13;\n    }\n\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product\n{\n    private static int numItems;\n    private double cost;\n\n    public Product(Double theCost)\n    {\n        cost = theCost;\n        numItems ++;\n    }\n\n    public Double tax()\n    {\n        return cost*0.1;\n    }\n\n    public Double tax(Double percentage)\n    {\n        return*percentage;\n    }\n\n}",
							"Implement your code here:": "public void run()\n{\n    Cours math = new Cours(\"Math\", 2);\n    \n    Student s1 = new Student(\"Alice\", 14);\n    Student s2 = new Student(\"Bob\", 16);\n    Student s3 = new Student(\"Celia\", 17);\n\n    math.enrol(s1);\n    math.enrol(s2);\n    math.enrol(s3);\n    math.summary(15);\n\n    Cours comp = new Cours(\"Computers\");\n\n    for(int i = 0; i < 10; i++)\n    {\n        Student s = new Student();\n        comp.enrol(s);\n    }\n\n}",
							"Which is an instance method?": "bark",
							"Which of the following belongs to the instance and not the class?": "name",
							"First Name": "Sena ",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A method with 'private' visibility can be called from a client class.": "True",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Rename the method",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Godek"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-02T17:36:24.592Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-02T18:24:27.994Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ5KmFgLoV",
					"submittedAt": "2025-05-02T17:36:24.599Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:49.995Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:08:52.285Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudKyXEKeK8eLtNoWetK0gdaRcTLzu2b58uNepiLtzWAbBJCZ0Pse_WWwWs5Ag"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: Implement the Product class here:\nA: public class Product {\n    public static int totalItems = 0;\n    private double cost;\n\n    public Product(double cost) {\n        this.cost = cost;\n        totalItems++;\n    }\n\n    public double getCost() {\n        return cost;\n    }\n\n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n\n    public double tax() {\n        return cost * 0.10;\n    }\n\n    public double tax(double percentage) {\n        return cost * (percentage / 100);\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    private int minAge;\n\n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public int getMinAge() {\n        return minAge;\n    }\n\n    public void setMinAge(int minAge) {\n        this.minAge = minAge;\n    }\n\n    public double tax() {\n        return getCost() * 0.13;\n    }\n}\n\nQ: Implement your code here:\nA: public static void run() {\n    Course math = new Course(\"Math\", 2);\n\n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(alice));\n    System.out.println(math.enrol(bob)); \n    System.out.println(math.enrol(celia));\n\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n\n    Course comp = new Course(\"Computers\");\n\n    for (int i = 0; i < 10; i++) {\n        Student randomStudent = new Student();\n        System.out.println(comp.enrol(randomStudent));\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: False\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overriding\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: public\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    private int minAge;\n\n    public Toy(double cost, int minAge) {\n        super(cost);\n        this.minAge = minAge;\n    }\n\n    public int getMinAge() {\n        return minAge;\n    }\n\n    public void setMinAge(int minAge) {\n        this.minAge = minAge;\n    }\n\n    public double tax() {\n        return getCost() * 0.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Which is an instance method?": "bark",
							"Implement the Product class here:": "public class Product {\n    public static int totalItems = 0;\n    private double cost;\n\n    public Product(double cost) {\n        this.cost = cost;\n        totalItems++;\n    }\n\n    public double getCost() {\n        return cost;\n    }\n\n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n\n    public double tax() {\n        return cost * 0.10;\n    }\n\n    public double tax(double percentage) {\n        return cost * (percentage / 100);\n    }\n}",
							"Implement your code here:": "public static void run() {\n    Course math = new Course(\"Math\", 2);\n\n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n\n    System.out.println(math.enrol(alice));\n    System.out.println(math.enrol(bob)); \n    System.out.println(math.enrol(celia));\n\n    System.out.println(math.getCourseName());\n    System.out.println(math.summary(15));\n\n    Course comp = new Course(\"Computers\");\n\n    for (int i = 0; i < 10; i++) {\n        Student randomStudent = new Student();\n        System.out.println(comp.enrol(randomStudent));\n    }\n}",
							"First Name": "Saiful",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overriding",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "public",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "False",
							"Last Name": "Shaik"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-02T17:36:23.587Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-02T18:08:59.102Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEOSphYC6FQ",
					"submittedAt": "2025-05-02T17:36:23.617Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:54.699Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:15:48.921Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350797049@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueonl0a4kjidkpWVQU8_H4QFxlz6Ot751XYuZQrij7k0k7tk1H02KxXuKB1xw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: John\n\nQ: Last Name\nA: Ning\n\nQ: Implement the Product class here:\nA: public class Product {\n    public static int numItems = 0;\n    private double cost; \n    public Product(double inputCost) {\n        cost = inputCost;\n        numItems++;\n    }\n    private double tax() {\n        return cost * 0.10; \n    }\n    private double tax(double percent) {\n        return cost * percent/100; \n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    private int minAge; \n    public Toy(double cost, int age) {\n        super(cost);\n        minAge = age;\n    } \n    private double tax() {\n        return cost * 0.13; \n    }\n}\n\nQ: Implement your code here:\nA: public void run() {\n    Course math = new Course(\"Math\", 2);\n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n    math.enrol(alice);\n    math.enrol(bob);\n    math.enrol(celia)\n    math.summary(15);\n    Course comp = new Course(\"computers\");\n    for(int i = 0; i < 10; i++) {\n        Student random = new Student();\n        comp.enrol(random);\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string of the name of the class\n\nQ: An instance method...\nA: Adds functionality to a class by creating private fields\n\nQ: What keyword to you use to make a class method?\nA: public\n\nQ: Which of these is NOT a call to a class method?\nA: Character.isLetter('a');\n\nQ: The Integer class in java is more commonly referred to as a\nA: primitive\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Change the return type",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    private int minAge; \n    public Toy(double cost, int age) {\n        super(cost);\n        minAge = age;\n    } \n    private double tax() {\n        return cost * 0.13; \n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product {\n    public static int numItems = 0;\n    private double cost; \n    public Product(double inputCost) {\n        cost = inputCost;\n        numItems++;\n    }\n    private double tax() {\n        return cost * 0.10; \n    }\n    private double tax(double percent) {\n        return cost * percent/100; \n    }\n}",
							"Which is an instance method?": "bark",
							"Implement your code here:": "public void run() {\n    Course math = new Course(\"Math\", 2);\n    Student alice = new Student(\"Alice\", 14);\n    Student bob = new Student(\"Bob\", 16);\n    Student celia = new Student(\"Celia\", 17);\n    math.enrol(alice);\n    math.enrol(bob);\n    math.enrol(celia)\n    math.summary(15);\n    Course comp = new Course(\"computers\");\n    for(int i = 0; i < 10; i++) {\n        Student random = new Student();\n        comp.enrol(random);\n    }\n}",
							"First Name": "John",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "primitive",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "public",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "Character.isLetter('a');",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Adds functionality to a class by creating private fields",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Change the return type",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string of the name of the class",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Ning"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-02T17:36:44.339Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-02T18:15:56.414Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOEOSphYC6FQ",
					"submittedAt": "2025-05-02T17:36:44.377Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:40:59.310Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:30:59.776Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuerULbyhx52icsWwof7Udeu2GZ7ZTdVBbN-kcVvo6D_6ZP4hiLn1ShbNfb47g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Implement the Product class here:\nA: public class Product \n{\n     public static int totalItems;\n     private double cost;\n\n     public Product(double itemCost)\n     {\n          cost = itemCost;\n          totalItems++;\n     }\n\n     public double tax()\n     {\n          return cost * 0.10;\n     }\n\n     public double tax(double percentTax)\n     {\n          return cost * ((double)percentTax / 100.0);\n     }\n\n}    \n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n     private int minAge;\n\n     public Toy(double toyCost, int minimumAge)\n     {\n          super(toyCost);\n          minAge = minimumAge;\n     }\n\n     public double tax(double percentTax)\n     {\n          return toyCost * 0.13;\n     }\n          \n}\n\nQ: Implement your code here:\nA: public run()\n{\n     Course math = new Course(\"math\", 2);\n     Student a = new Student(\"Alice\", 14);\n     Student b = new Student(\"Bob\", 16);\n     Student c = new Student(\"Celia\", 17);\n     math.enrol(a);\n     math.enrol(b);\n     math.enrol(c);\n     math.getCourseName();\n     math.summary(15);\n\n     Course comp = new Course(\"computers\");\n     for (int i = 0; i < 10; i++) \n     {\n          Student random = new Student();\n          comp.enrol(random);\n     }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n     private int minAge;\n\n     public Toy(double toyCost, int minimumAge)\n     {\n          super(toyCost);\n          minAge = minimumAge;\n     }\n\n     public double tax(double percentTax)\n     {\n          return toyCost * 0.13;\n     }\n          \n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product \n{\n     public static int totalItems;\n     private double cost;\n\n     public Product(double itemCost)\n     {\n          cost = itemCost;\n          totalItems++;\n     }\n\n     public double tax()\n     {\n          return cost * 0.10;\n     }\n\n     public double tax(double percentTax)\n     {\n          return cost * ((double)percentTax / 100.0);\n     }\n\n}    ",
							"Implement your code here:": "public run()\n{\n     Course math = new Course(\"math\", 2);\n     Student a = new Student(\"Alice\", 14);\n     Student b = new Student(\"Bob\", 16);\n     Student c = new Student(\"Celia\", 17);\n     math.enrol(a);\n     math.enrol(b);\n     math.enrol(c);\n     math.getCourseName();\n     math.summary(15);\n\n     Course comp = new Course(\"computers\");\n     for (int i = 0; i < 10; i++) \n     {\n          Student random = new Student();\n          comp.enrol(random);\n     }\n}",
							"Which is an instance method?": "bark",
							"First Name": "Nereyal",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Class names should be capitalized (first letter is capital).": "True",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Jeyakumar"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"id": "Cg4Iurzi88AOEOSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-02T17:36:42.247Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-02T18:30:59.884Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:36:42.275Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:03.815Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:04:45.864Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudckGGfKrco_w7UAQszrTZySvserfgxwTQP7hZR575LQ_1WWcb03qvqQyEaHg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: Implement the Product class here:\nA: public class Product {\n    public static int items = 0; \n    private double cost; \n\n    public Product(double c){\n        cost = c;\n        items++; \n    }\n\n    public double tax() {\n        return cost * 0.1; \n    }\n\n    public double tax(int percentage) {\n        return cost * percentage/100.0; \n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product {\n    private int minAge; \n\n    public Toy(double cost, int minA) {\n        super(cost);\n        minAge = minA;\n    }\n\n    public double tax() {\n        return cost * 0.13; \n    }\n}\n\nQ: Implement your code here:\nA: public void run() {\n    Course math = new Course (\"Math\", 2);\n\n    Student a = new Student(\"Alice\", 16);\n    Student b = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n\n    math.enrol(a);\n    math.enrol(b);\n    math.enrol(c);\n\n    math.getCourseName();\n\n    math.summary(15);\n\n    Course comp = new Course(\"Computers\");\n\n    for(int i = 0; i < 10; i++) {\n        Student x = new Student();\n        comp.enrol(x);\n    }\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: True\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overriden\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overloading\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product {\n    private int minAge; \n\n    public Toy(double cost, int minA) {\n        super(cost);\n        minAge = minA;\n    }\n\n    public double tax() {\n        return cost * 0.13; \n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product {\n    public static int items = 0; \n    private double cost; \n\n    public Product(double c){\n        cost = c;\n        items++; \n    }\n\n    public double tax() {\n        return cost * 0.1; \n    }\n\n    public double tax(int percentage) {\n        return cost * percentage/100.0; \n    }\n}",
							"Implement your code here:": "public void run() {\n    Course math = new Course (\"Math\", 2);\n\n    Student a = new Student(\"Alice\", 16);\n    Student b = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n\n    math.enrol(a);\n    math.enrol(b);\n    math.enrol(c);\n\n    math.getCourseName();\n\n    math.summary(15);\n\n    Course comp = new Course(\"Computers\");\n\n    for(int i = 0; i < 10; i++) {\n        Student x = new Student();\n        comp.enrol(x);\n    }\n}",
							"Which is an instance method?": "bark",
							"First Name": "Cayden",
							"Which of the following belongs to the instance and not the class?": "name",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overloading",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "True",
							"Class names should be capitalized (first letter is capital).": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overriden",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Chiu"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4IvpGn9MAOEOSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-02T17:36:28.320Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-02T18:15:40.456Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:36:28.328Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:08.227Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:49:46.767Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudEDMFiVvDF7E_IH3mye-GcHypkey5UfT5QvlyOV7M9JKXQrTpp-tZQIO9Q6w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: Implement the Product class here:\nA: public class Product\n{\n    public static int numItems = 0;\n    private double cost;\n    \n    public Product(double cost)\n    {\n        this.cost = cost;\n        numItems ++;\n    }\n\n    public double tax()\n    {\n        return cost/10;\n    }\n\n    public double tax(int taxPercentage)\n    {\n        return cost* (taxPercentage/100.0);\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int minAge;\n    \n    public Toy(double cost, int minAge)\n    {\n        super(cost)\n        this.minAge = minAge;\n    }\n    public double tax()\n    {\n        return cost* 0.13;\n    }\n}\n\nQ: Implement your code here:\nA: Class math = new Class(\"math\", 2);\nStudent alice = new Student(\"Alice\", 14);\nmath.enroll(\"Alice\");\nStudent Bob = new Student(\"Bob\", 16);\nmath.enroll(\"Bob\");\nStudent celia = new Student(\"Celia\", 17);\nmath.enroll(\"Celia\");\nSystem.out.println(math.getCourseName);\nSystem.out.println(math.summary(15));\n\n\nClass comp = new  Class(\"computers\")\nfor (int i=0, i<=10, i++)\n{\n    \n}\n\n\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: name\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overloading\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int minAge;\n    \n    public Toy(double cost, int minAge)\n    {\n        super(cost)\n        this.minAge = minAge;\n    }\n    public double tax()\n    {\n        return cost* 0.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement the Product class here:": "public class Product\n{\n    public static int numItems = 0;\n    private double cost;\n    \n    public Product(double cost)\n    {\n        this.cost = cost;\n        numItems ++;\n    }\n\n    public double tax()\n    {\n        return cost/10;\n    }\n\n    public double tax(int taxPercentage)\n    {\n        return cost* (taxPercentage/100.0);\n    }\n}",
							"Which is an instance method?": "name",
							"Implement your code here:": "Class math = new Class(\"math\", 2);\nStudent alice = new Student(\"Alice\", 14);\nmath.enroll(\"Alice\");\nStudent Bob = new Student(\"Bob\", 16);\nmath.enroll(\"Bob\");\nStudent celia = new Student(\"Celia\", 17);\nmath.enroll(\"Celia\");\nSystem.out.println(math.getCourseName);\nSystem.out.println(math.summary(15));\n\n\nClass comp = new  Class(\"computers\")\nfor (int i=0, i<=10, i++)\n{\n    \n}\n\n",
							"Which of the following belongs to the instance and not the class?": "name",
							"First Name": "Owen",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overloading",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"Last Name": "Kung"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"id": "Cg4I5dKR18sOEOSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-02T17:36:30.896Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-02T18:49:46.887Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:36:30.904Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:12.760Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-06T18:26:23.753Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "440021905@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuck-W0KKFMZpnyNOe05oTGn9Dw3ldoB7rsZYEqzzicpHtkNjjqdiRvxj7Io7w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clifton\n\nQ: Last Name\nA: Lin\n\nQ: Implement the Product class here:\nA: public class Product{\n    public static int totalItems = 0;\n    public double cost;\n    \n    public Product(double cost){\n    this.cost = cost;\n    }\n    \n    public void newItem(){\n        Product product = new Product();\n        totalItems++;\n    }\n\n    public void tax(){\n        return cost * 0.10; \n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product{\n    private int minAge;\n \n    public Toy(double cost, int minAge){\n        super this.cost = cost;\n        super this.minAge = minAge;\n    }\n\n    public void tax(){\n        return cost * 0.13;\n    }\n}\n\nQ: Implement your code here:\nA: public class Course{\n    private String name;\n    private int limit;\n    private static bool enrol = false;\n    \n    public Course(String name, int limit){\n        this.name.equals(name);\n        this.limit = limit;\n    }\n\n    Course math = new Course(Math, 2);\n\n    public static boolean enrol(Student Alice){\n        if(age >= 15){\n            return true;\n        }\n    }    \n\n    public static boolean enrol(Student Bob){\n        if(age >= 15){\n            return true;\n        }\n    }\n\n    public static boolean enrol(Student Celia){\n        if(age >= 15){\n            return true;\n        }\n    }\n\n    public void String getCourseName(){\n         return name;\n    }\n\n    public void String summary(){\n        return (Student name);\n    }\n}\n\npublic class Student extends Course{\n    private String name;\n    private int age;\n\n    public Student(String name, int age){\n        super this.name.equals(name);\n        super this.age = age;\n    }\n\n    Student Alice = new Student(Alice, 14);\n    Student Bob = new Student(Bob, 16);\n    Student Celia = new Student(Celia, 17);\n}\n\nQ: Classes are templates or blueprints for objects.\nA: False\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: True\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: True\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: instance method\n\nQ: Which of the following belongs to the instance and not the class?\nA: reset\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: shadowing\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: public\n\nQ: Which of these is NOT a call to a class method?\nA: Math.abs(-1);\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product{\n    private int minAge;\n \n    public Toy(double cost, int minAge){\n        super this.cost = cost;\n        super this.minAge = minAge;\n    }\n\n    public void tax(){\n        return cost * 0.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "True",
							"Implement the Product class here:": "public class Product{\n    public static int totalItems = 0;\n    public double cost;\n    \n    public Product(double cost){\n    this.cost = cost;\n    }\n    \n    public void newItem(){\n        Product product = new Product();\n        totalItems++;\n    }\n\n    public void tax(){\n        return cost * 0.10; \n    }\n}",
							"Implement your code here:": "public class Course{\n    private String name;\n    private int limit;\n    private static bool enrol = false;\n    \n    public Course(String name, int limit){\n        this.name.equals(name);\n        this.limit = limit;\n    }\n\n    Course math = new Course(Math, 2);\n\n    public static boolean enrol(Student Alice){\n        if(age >= 15){\n            return true;\n        }\n    }    \n\n    public static boolean enrol(Student Bob){\n        if(age >= 15){\n            return true;\n        }\n    }\n\n    public static boolean enrol(Student Celia){\n        if(age >= 15){\n            return true;\n        }\n    }\n\n    public void String getCourseName(){\n         return name;\n    }\n\n    public void String summary(){\n        return (Student name);\n    }\n}\n\npublic class Student extends Course{\n    private String name;\n    private int age;\n\n    public Student(String name, int age){\n        super this.name.equals(name);\n        super this.age = age;\n    }\n\n    Student Alice = new Student(Alice, 14);\n    Student Bob = new Student(Bob, 16);\n    Student Celia = new Student(Celia, 17);\n}",
							"Which is an instance method?": "bark",
							"First Name": "Clifton",
							"Which of the following belongs to the instance and not the class?": "reset",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "shadowing",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "True",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "public",
							"Which of these is NOT a call to a class method?": "Math.abs(-1);",
							"A constructor is called whenever an object is instantiated.": "True",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "instance method",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "False",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Class names should be capitalized (first letter is capital).": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Lin"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-02T17:38:19.646Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-06T18:26:31.889Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEOSphYC6FQ",
					"submittedAt": "2025-05-02T17:38:19.657Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:18.096Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 29,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:25:22.157Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufhYB1vJJXLf9rHrJDQ-erRq8qtVx-iFJfzZ3EVCXappMN3IB8EenGTMHdYMA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: Implement the Product class here:\nA: public class Product\n{\n    public int totalNumber;\n    public double cost;\n    public Product (double cost)\n    {\n        this.cost = cost;\n        totalNumber += 1;\n    }\n    public double tax()\n    {    \n        return cost * 0.1;\n    }\n    public double tax(double taxPercent)\n    {\n        return cost * taxPercent;\n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    public int ageRequirement;\n    public Toy (int age)\n    {\n        ageRequirement = age;\n        super (cost);\n    }\n    public double tax()\n    {\n        double taxes = super.tax(0.13);\n        return taxes;\n    }\n}\n\nQ: Implement your code here:\nA: Course math = new Course(\"Math\", 2);\nStudent a = new Student(\"Alice\", 14);\nStudent b = new Student(\"Bob\", 16);\nStudent c = new Student(\"Celia\", 17);\nSystem.out.println(math.enrol(a));\nSystem.out.println(math.enrol(b));\nSystem.out.println(math.enrol(c));\nSystem.out.println(math.getCourseName());\nSystem.out.println(math.summary(15));\nCourse comp = new Course(\"Computer\");\nfor (int i = 0; i < 10; i++)\n{\n    Student random = new Student();\n    System.out.println(comp.enrol(random));\n}\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: True\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: instance variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: totalDogs\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overriding\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: wrapper\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    public int ageRequirement;\n    public Toy (int age)\n    {\n        ageRequirement = age;\n        super (cost);\n    }\n    public double tax()\n    {\n        double taxes = super.tax(0.13);\n        return taxes;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement your code here:": "Course math = new Course(\"Math\", 2);\nStudent a = new Student(\"Alice\", 14);\nStudent b = new Student(\"Bob\", 16);\nStudent c = new Student(\"Celia\", 17);\nSystem.out.println(math.enrol(a));\nSystem.out.println(math.enrol(b));\nSystem.out.println(math.enrol(c));\nSystem.out.println(math.getCourseName());\nSystem.out.println(math.summary(15));\nCourse comp = new Course(\"Computer\");\nfor (int i = 0; i < 10; i++)\n{\n    Student random = new Student();\n    System.out.println(comp.enrol(random));\n}",
							"Implement the Product class here:": "public class Product\n{\n    public int totalNumber;\n    public double cost;\n    public Product (double cost)\n    {\n        this.cost = cost;\n        totalNumber += 1;\n    }\n    public double tax()\n    {    \n        return cost * 0.1;\n    }\n    public double tax(double taxPercent)\n    {\n        return cost * taxPercent;\n    }\n}",
							"Which is an instance method?": "bark",
							"First Name": "Jennifer",
							"Which of the following belongs to the instance and not the class?": "totalDogs",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "wrapper",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overriding",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "True",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "instance variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Class names should be capitalized (first letter is capital).": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Zheng"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4I7ZHxyucSEOSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-02T17:36:32.126Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-02T18:25:22.246Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:36:32.133Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:22.848Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:17:33.835Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 4 Test: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucPmD1VWcCrD7eEzoy8Swm1O4qJxsu1V0Rh_PylU6Bg_oV8OhbU_m_NcJvJcA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang\n\nQ: Implement the Product class here:\nA: public class Porduct() \n{\n    public int toltalItems;\n    static double cost;\n    public Product(double cost)\n    {\n        this.cost = cost;\n        totalItems++;\n    }\n    \n   public double tax()\n   {\n       return cost*0.10;\n   }\n\n   public double tax(double percentage)\n   {\n       return cost*(percentage/100);\n   }\n}\n\nQ: Implement the Toy class here:\nA: Public class Toy extends Product \n{\n    public int minReq;\n\n    public Toy(int minReq, double cost)\n    {\n        super(\"cost\")\n        this.minReq = minReq;\n    }\n\n   public double tax()\n   {\n        return cost*0.13;\n    }\n}\n\nQ: Implement your code here:\nA: Math a1 = new Math();\nStudent s1 = new Student (Alice, 14);\nStudent s2 = new Student (Bob, 16);\nStudent s3 = new Student (Celia,17);\nfor (int i = 0; i >10; i++)\n{\n    enrol(Student)\n    if (age < 15)\n    {\n        Student.getCourseName();\n        Student.summary(15);\n    }\n}  \n\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: True\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: False\n\nQ: Which is an instance method?\nA: reset\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: totalDogs\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overriden\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overloading\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string of the memory used from creating the object\n\nQ: An instance method...\nA: Adds functionality to a class by creating private fields\n\nQ: What keyword to you use to make a class method?\nA: public\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: object\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "Public class Toy extends Product \n{\n    public int minReq;\n\n    public Toy(int minReq, double cost)\n    {\n        super(\"cost\")\n        this.minReq = minReq;\n    }\n\n   public double tax()\n   {\n        return cost*0.13;\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "True",
							"Which is an instance method?": "reset",
							"Implement your code here:": "Math a1 = new Math();\nStudent s1 = new Student (Alice, 14);\nStudent s2 = new Student (Bob, 16);\nStudent s3 = new Student (Celia,17);\nfor (int i = 0; i >10; i++)\n{\n    enrol(Student)\n    if (age < 15)\n    {\n        Student.getCourseName();\n        Student.summary(15);\n    }\n}  \n",
							"Implement the Product class here:": "public class Porduct() \n{\n    public int toltalItems;\n    static double cost;\n    public Product(double cost)\n    {\n        this.cost = cost;\n        totalItems++;\n    }\n    \n   public double tax()\n   {\n       return cost*0.10;\n   }\n\n   public double tax(double percentage)\n   {\n       return cost*(percentage/100);\n   }\n}",
							"First Name": "Steven",
							"Which of the following belongs to the instance and not the class?": "totalDogs",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "object",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overloading",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "public",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Adds functionality to a class by creating private fields",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "False",
							"Classes are templates or blueprints for objects.": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overriden",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string of the memory used from creating the object",
							"Last Name": "Wang"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"id": "Cg4Ik8mXwcMUEOSphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-05-02T17:38:58.781Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-05-02T18:17:33.937Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-02T17:38:58.822Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.771Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849444",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"questionCount": 29,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T18:34:29.666Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Test: Classes and Objects",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudIOBfYOV33ttp_au7Ut8f4cN1iQp_Cc1AQZNcCQkuAAF3b3fBlpLPvXK6zWA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: Implement the Product class here:\nA: public class Product()\n{\n    public static int numItems = 0;\n    private double cost;\n\n    public Product(double theCost)\n    {\n        cost = theCost;\n        numItems++;\n    }\n\n    public double Tax()\n    {\n        return cost/10;\n    }\n\n    public double Tax(double tax)\n    {\n        return cost / tax; \n    }\n}\n\nQ: Implement the Toy class here:\nA: public class Toy extends Product\n{\n    private int minAge;\n    \n    public Toy(double theCost, int theMinAge)\n    {\n        super(theCost);\n        minAge = theMinAge;\n    }\n\n    public double Tax()\n    {\n        super(13);\n    }\n}\n\nQ: Implement your code here:\nA: public void run()\n{\n    Course math = new Course(\"Math\", 2);\n    Student a = new Student(\"Alice\", 14);\n    Student b = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n    math.enrol(a);\n    math.enrol(b);\n    math.enrol(c);\n    math.getCourseName();\n    math.summary(15);\n\n    Course comp = new Course(\"Computers\");\n    for(int i = 0; i < 10; i++)\n    {\n        Student random = new Student();\n        comp.enrol(random);\n    }\n\nQ: Classes are templates or blueprints for objects.\nA: True\n\nQ: Classes are the same as instances.\nA: False\n\nQ: Objects contain state (properties) and behaviours (actions).\nA: True\n\nQ: Class names should be capitalized (first letter is capital).\nA: True\n\nQ: A constructor is called whenever an object is instantiated.\nA: True\n\nQ: A superclass should call the constructor of a subclass using the 'super' keyword.\nA: False\n\nQ: This is a valid signature for an accessor/getter:   public void getName()\nA: False\n\nQ: The is a valid signature for a mutator/setter:   public void setX(int x)\nA: True\n\nQ: A method with 'private' visibility can be called from a client class.\nA: False\n\nQ: Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.\nA: True\n\nQ: When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled\nA: True\n\nQ: When you pass an object as an argument to a method, java makes a copy of the object\nA: True\n\nQ: Which is an instance method?\nA: bark\n\nQ: 'totalDogs' is called a(n):\nA: class variable\n\nQ: Which of the following belongs to the instance and not the class?\nA: name\n\nQ: Which of the following is a valid Constructor signature for this class?\nA: public Dog()\n\nQ: 'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are\nA: overloaded\n\nQ: The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called\nA: overriding\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string that represents the object\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: What keyword to you use to make a class method?\nA: static\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: The Integer class in java is more commonly referred to as a\nA: primitive\n\nQ: You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?\nA: Use the keyword 'this'",
						"structuredData": {
							"Implement the Toy class here:": "public class Toy extends Product\n{\n    private int minAge;\n    \n    public Toy(double theCost, int theMinAge)\n    {\n        super(theCost);\n        minAge = theMinAge;\n    }\n\n    public double Tax()\n    {\n        super(13);\n    }\n}",
							"Classes can be structured as hierarchies.  For example, a 'Car' class can be implemented as the subclass of a 'Vehicle' class, taking its behaviours.  This concept is called inheritance.": "True",
							"This is a valid signature for an accessor/getter:   public void getName()": "False",
							"Implement your code here:": "public void run()\n{\n    Course math = new Course(\"Math\", 2);\n    Student a = new Student(\"Alice\", 14);\n    Student b = new Student(\"Bob\", 16);\n    Student c = new Student(\"Celia\", 17);\n    math.enrol(a);\n    math.enrol(b);\n    math.enrol(c);\n    math.getCourseName();\n    math.summary(15);\n\n    Course comp = new Course(\"Computers\");\n    for(int i = 0; i < 10; i++)\n    {\n        Student random = new Student();\n        comp.enrol(random);\n    }",
							"Implement the Product class here:": "public class Product()\n{\n    public static int numItems = 0;\n    private double cost;\n\n    public Product(double theCost)\n    {\n        cost = theCost;\n        numItems++;\n    }\n\n    public double Tax()\n    {\n        return cost/10;\n    }\n\n    public double Tax(double tax)\n    {\n        return cost / tax; \n    }\n}",
							"Which is an instance method?": "bark",
							"Which of the following belongs to the instance and not the class?": "name",
							"First Name": "Vivian",
							"The is a valid signature for a mutator/setter:   public void setX(int x)": "True",
							"The Integer class in java is more commonly referred to as a": "primitive",
							"A superclass should call the constructor of a subclass using the 'super' keyword.": "False",
							"The 'sound' variable in the second 'bark' method is a local variable to that method.  However, a more general 'sound' variable was declared earlier in the code.  This concept is called": "overriding",
							"A method with 'private' visibility can be called from a client class.": "False",
							"What keyword to you use to make a class method?": "static",
							"A constructor is called whenever an object is instantiated.": "True",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Objects contain state (properties) and behaviours (actions).": "True",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"Classes are the same as instances.": "False",
							"'totalDogs' is called a(n):": "class variable",
							"You create a method that accepts a parameter with the same name as an instance variable. Your code produces an error. What should you do?": "Use the keyword 'this'",
							"Which of the following is a valid Constructor signature for this class?": "public Dog()",
							"Classes are templates or blueprints for objects.": "True",
							"Class names should be capitalized (first letter is capital).": "True",
							"When you pass an object as an argument to a method, java makes a copy of the object": "True",
							"'bark()' and 'bark(String sound)' have the same method names in this class.  This means these methods are": "overloaded",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string that represents the object",
							"When you don't implement a Constructor for a class, a default Constructor with no parameters is created when the code is compiled": "True",
							"Last Name": "Li"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ0/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-02T17:36:20.087Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-02T18:34:29.771Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEOSphYC6FQ",
					"submittedAt": "2025-05-02T17:36:20.095Z",
					"assignmentName": "Unit 4 Test: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.773Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IvfCrsQEQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-28T11:48:01.706Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-10T00:11:38.335Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:01.716Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.776Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"id": "Cg0Isq_W0gkQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-28T11:48:23.970Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-30T18:49:39.039Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:24.020Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.779Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-28T11:47:49.229Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-07T18:28:34.681Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQ7fnZwZsW",
					"submittedAt": "2025-04-28T11:47:49.273Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.782Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-28T11:48:35.200Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-11T16:15:59.754Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQ7fnZwZsW",
					"submittedAt": "2025-04-28T11:48:35.211Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.785Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-28T11:47:23.742Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-07T18:45:40.399Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQ7fnZwZsW",
					"submittedAt": "2025-04-28T11:47:23.755Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.788Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-28T11:48:48.875Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-07T19:28:56.631Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q7fnZwZsW",
					"submittedAt": "2025-04-28T11:48:48.887Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.790Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"id": "Cg0IhKbr2BYQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-28T11:48:08.181Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-09T18:12:20.661Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:08.224Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.793Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"id": "Cg0Io-SHlhwQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-28T11:50:37.381Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-07T18:47:20.740Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:50:37.391Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.795Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clark Chen",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"id": "Cg0Ik_u42h8Q7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-28T11:49:57.441Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-05-14T17:06:50.571Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:49:57.491Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.798Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-28T11:49:14.587Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-12T17:52:05.228Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:49:14.600Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.800Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-04-28T11:47:27.318Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-12T02:26:31.607Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:47:27.330Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.802Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-28T11:50:38.200Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-09T21:57:49.447Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQ7fnZwZsW",
					"submittedAt": "2025-04-28T11:50:38.241Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.804Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"id": "Cg0I0ruNqlsQ7fnZwZsW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-28T11:48:54.461Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-10T15:18:19.527Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:54.479Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.806Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-28T11:47:36.179Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-07T18:43:42.193Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ7fnZwZsW",
					"submittedAt": "2025-04-28T11:47:36.190Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.809Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-28T11:50:11.592Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-11T19:41:22.717Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEO352cGbFg",
					"submittedAt": "2025-04-28T11:50:11.601Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.811Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"id": "Cg4I05uw78AOEO352cGbFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-04-28T11:47:41.123Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-11T17:14:56.427Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-11T17:15:05.939Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:47:41.163Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.814Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-28T11:50:06.856Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-12T16:26:42.317Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEO352cGbFg",
					"submittedAt": "2025-04-28T11:50:06.867Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.816Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-28T11:49:11.373Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-09T17:07:11.787Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEO352cGbFg",
					"submittedAt": "2025-04-28T11:49:11.410Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.818Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"id": "Cg4I5dKR18sOEO352cGbFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T11:48:12.336Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-11T04:03:22.705Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:12.345Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.820Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-28T11:49:17.479Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-08T19:49:31.244Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEO352cGbFg",
					"submittedAt": "2025-04-28T11:49:17.490Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.822Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"id": "Cg4Iu8ODue4SEO352cGbFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-28T11:50:01.210Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-08T17:48:26.454Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:50:01.222Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.825Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "763299790061",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzYzMjk5NzkwMDYx/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iz_iw9dcUEO352cGbFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-28T11:49:08.541Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-08T18:44:48.660Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:49:08.577Z",
					"assignmentName": "Tutorial: Animal (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.827Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"id": "Cg0IvfCrsQEQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-05T11:50:37.866Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-09T22:46:20.465Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:50:37.877Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.829Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Isq_W0gkQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-05T11:50:47.025Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-05-09T17:33:46.273Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:50:47.057Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.831Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"id": "Cg0I_qLZkQsQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-05T11:50:29.684Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-05-05T15:50:27.648Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:50:29.723Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.833Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IwJXv6QsQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-05T11:50:54.627Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-11T16:15:49.503Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:50:54.666Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.836Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ik7DJrAwQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-05T11:49:59.655Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-05-09T17:53:03.752Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:49:59.666Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.838Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-05T11:51:22.768Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-05-10T00:42:50.596Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q5qmFgLoV",
					"submittedAt": "2025-05-05T11:51:22.778Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.840Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-05T11:51:31.075Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-11T04:02:06.034Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ5qmFgLoV",
					"submittedAt": "2025-05-05T11:51:31.107Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.842Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"id": "Cg0Io-SHlhwQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-05T11:52:10.956Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-05-07T18:47:25.025Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:52:10.992Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.844Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-05T11:52:00.142Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-08T18:36:20.251Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ5qmFgLoV",
					"submittedAt": "2025-05-05T11:52:00.180Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.846Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-05T11:50:04.261Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-12T02:26:22.271Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:50:04.272Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.849Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Ine-5hUQQ5qmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-05T11:52:14.892Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-05-08T18:30:49.294Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:52:14.928Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.851Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-05T11:52:13.919Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-10T15:18:03.328Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQ5qmFgLoV",
					"submittedAt": "2025-05-05T11:52:13.960Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.853Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-05T11:50:30.993Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-05T21:02:33.147Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ5qmFgLoV",
					"submittedAt": "2025-05-05T11:50:31.030Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.855Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-05T11:52:46.748Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-11T18:21:33.015Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEOaphYC6FQ",
					"submittedAt": "2025-05-05T11:52:46.787Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.857Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4I05uw78AOEOaphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-05T11:50:19.234Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-05-11T17:17:17.904Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:50:19.277Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.860Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-05T11:52:53.459Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-12T02:31:21.866Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEOaphYC6FQ",
					"submittedAt": "2025-05-05T11:52:53.500Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.862Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEOaphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-05T11:51:25.672Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-09T20:33:53.379Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:51:25.683Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.865Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-05T11:51:21.840Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-05-09T00:08:28.968Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEOaphYC6FQ",
					"submittedAt": "2025-05-05T11:51:21.850Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.868Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-05T11:52:09.292Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-05-11T20:40:37.883Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEOaphYC6FQ",
					"submittedAt": "2025-05-05T11:52:09.304Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.871Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"id": "Cg4Iu8ODue4SEOaphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-05T11:53:34.861Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-05-08T17:51:36.042Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-05-05T11:53:34.902Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:27.874Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849446",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Vivian Li",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQ2/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-05T11:51:33.807Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-14T18:44:28.878Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEOaphYC6FQ",
					"submittedAt": "2025-05-05T11:51:33.837Z",
					"assignmentName": "Unit 5: Arrays",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:31.820Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-05-02T17:11:06.532Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuejht9L-wnLxOqAowsEzdM4oR5Jp6jhsdEFDvWHFYNfIPvBK-ZRsUnq6CEccQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: // The Vehicle Class\nA: public class Vehicle \n{\n     private boolean turnedOn;\n     private String type;\n\n     public Vehicle(String type)\n     {\n          this.type = type;\n     }\n\n     public void start() \n     {\n          turnedOn = true;\n\n}\n     \n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n     public Car() \n     {\n          super(\"Car\");\n     }\n\n     public void start()\n     {\n          super.start();\n          System.out.println(\"Vroom!\");\n     }\n}\n\nQ: public void run() {\nA:      Store myStore = new Store();\n     Customer a= new Customer(\"Abby\", 16);\n     Customer b= new Customer(\"Beatrice\", 17);\n     Customer c= new Customer(\"Courtney\", 15);\n     myStore.add(a);\n     myStore.add(b);\n     myStore.add(c);\n     myStore.print();\n     myStore.clear();\n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public void getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName()\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: public\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n     public Car() \n     {\n          super(\"Car\");\n     }\n\n     public void start()\n     {\n          super.start();\n          System.out.println(\"Vroom!\");\n     }\n}",
							"First Name": "Nereyal",
							"Which of these is most likely a setter method?": "public void setName()",
							"Which of these could be a 'getter' method?": "public void getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "     Store myStore = new Store();\n     Customer a= new Customer(\"Abby\", 16);\n     Customer b= new Customer(\"Beatrice\", 17);\n     Customer c= new Customer(\"Courtney\", 15);\n     myStore.add(a);\n     myStore.add(b);\n     myStore.add(c);\n     myStore.print();\n     myStore.clear();\n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "public class Vehicle \n{\n     private boolean turnedOn;\n     private String type;\n\n     public Vehicle(String type)\n     {\n          this.type = type;\n     }\n\n     public void start() \n     {\n          turnedOn = true;\n\n}\n     ",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Jeyakumar",
							"What keyword to you use to make a method or variable belong to the class?": "public"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-28T11:47:39.778Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-05-02T17:33:21.827Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQ4amFgLoV",
					"submittedAt": "2025-04-28T11:47:39.788Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:35.236Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-30T01:43:21.220Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudT_S-dadEHCQ6CxU3kkk4gSgEcLulo4fA_kkAE75vSckaSPisvItfW4DnoTQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranthan\n\nQ: // The Vehicle Class\nA: public class Vehicle\n{\n    private string type;    \n    private boolean isOn = false;\n\n    public Vehicle(String type)\n    {\n        this.type = type;\n    }\n\n    public void start()\n    {\n        isOn = true;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"car\");\n    }\n\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom\");\n    }\n}\n\nQ: public void run() {\nA:     Store store = new Store();\n\n    Customer abby = new Customer(\"Abby\", \"16\");\n    Customer beatrice= new Customer(\"Beatrice\", \"17\");\n    Customer courtney = new Customer(\"Courtney\", \"15\");\n\n    store.add(abby);\n    store.add(beatrice);\n    store.add(courtney);\n\n    store.print();\n\n    store.clear();\n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"car\");\n    }\n\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom\");\n    }\n}",
							"First Name": "Abithan",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "    Store store = new Store();\n\n    Customer abby = new Customer(\"Abby\", \"16\");\n    Customer beatrice= new Customer(\"Beatrice\", \"17\");\n    Customer courtney = new Customer(\"Courtney\", \"15\");\n\n    store.add(abby);\n    store.add(beatrice);\n    store.add(courtney);\n\n    store.print();\n\n    store.clear();\n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle\n{\n    private string type;    \n    private boolean isOn = false;\n\n    public Vehicle(String type)\n    {\n        this.type = type;\n    }\n\n    public void start()\n    {\n        isOn = true;\n    }\n}",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Paskaranthan",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-28T11:47:23.641Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-30T01:43:21.346Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ4amFgLoV",
					"submittedAt": "2025-04-28T11:47:23.651Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:38.945Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-30T14:38:23.711Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueT6LaI3bAQH9lQctf8hGqDHMqpL4i3YdskDQrEorwUvfiBYGcnX5SU1z0a4g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: // The Vehicle Class\nA: public class Vehicle{\n    public boolean state;\n    public String type;\n\n    public Vehicle (String type){\n        this.type = type;\n    }\n\n    public void start (){\n        state = true;\n    } \n}\n\nQ: // The Car Class\nA: public class Car extends vehicle{\n    \n    public class Car(){\n        super(\"Car\");\n    }\n\n    public void start (){\n        System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA:     Store store = new Store ();\n    Customer Abby = new Customer (\"Abby\", 16);\n    Customer Beatrice = new Customer (\"Beatrice\", 17);\n    Customer Courtney = new Customer (\"Courtney\", 15);\n    add(Abby);\n    add(Beatrice);\n    add(Courtney);\n    print();\n    clear();\n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends vehicle{\n    \n    public class Car(){\n        super(\"Car\");\n    }\n\n    public void start (){\n        System.out.println(\"Vroom!\");\n    }\n}",
							"First Name": "Owen",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "    Store store = new Store ();\n    Customer Abby = new Customer (\"Abby\", 16);\n    Customer Beatrice = new Customer (\"Beatrice\", 17);\n    Customer Courtney = new Customer (\"Courtney\", 15);\n    add(Abby);\n    add(Beatrice);\n    add(Courtney);\n    print();\n    clear();\n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle{\n    public boolean state;\n    public String type;\n\n    public Vehicle (String type){\n        this.type = type;\n    }\n\n    public void start (){\n        state = true;\n    } \n}",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Lee",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-28T11:47:20.883Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-30T14:38:23.823Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQ4amFgLoV",
					"submittedAt": "2025-04-28T11:47:20.920Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:42.519Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T00:23:50.133Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudanLuBQI-PX5n8qZSwN3H8uOxbiv4w4yjxSYxDD-JwWfpeKbOH5t5OGm2e7w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kian\n\nQ: Last Name\nA: Mistry\n\nQ: // The Vehicle Class\nA: public class Vehicle\n{\n    boolean isOn;\n    String type;\n    public Vehicle (String t)\n    {\n        type = t;\n    }\n    public void start()\n    {\n        isOn = true;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n    public car()\n    {\n        super(\"Car\");\n    }\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA: Store store = new Store();\nCustomer a = new Customer (\"Abby\", 16);\nCustomer b = new Customer (\"Beatrice\", 17);\nCustomer c = new Customer (\"Courtney,\" 15);\nstore.add(a);\nstore.add(b);\nstore.add(c);\nstore.print();\nstore.clear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: A class has a run method but instances do not\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: The class has documentation\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: This is called when an instance of Student is created\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Adds functionality to the class by printing out a result\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public String setName()\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: class\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "This is called when an instance of Student is created",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "class",
							"A class is...": "A blueprint",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Adds functionality to the class by printing out a result",
							"// The Car Class": "public class Car extends Vehicle\n{\n    public car()\n    {\n        super(\"Car\");\n    }\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}",
							"First Name": "Kian",
							"Which of these is most likely a setter method?": "public String setName()",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "A class has a run method but instances do not",
							"public void run() {": "Store store = new Store();\nCustomer a = new Customer (\"Abby\", 16);\nCustomer b = new Customer (\"Beatrice\", 17);\nCustomer c = new Customer (\"Courtney,\" 15);\nstore.add(a);\nstore.add(b);\nstore.add(c);\nstore.print();\nstore.clear();",
							"A variable that belongs to the class is called a(n)": "class variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"Being a client of a class means that...": "The class has documentation",
							"// The Vehicle Class": "public class Vehicle\n{\n    boolean isOn;\n    String type;\n    public Vehicle (String t)\n    {\n        type = t;\n    }\n    public void start()\n    {\n        isOn = true;\n    }\n}",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Mistry",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-28T11:47:38.958Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-01T23:58:37.480Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-05-02T00:23:50.281Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQ4amFgLoV",
					"submittedAt": "2025-04-28T11:47:39.013Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:46.033Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-01T22:01:03.204Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufH3vZAJW7QITlHPCEvpOnYKeJ5J92LuC-SEIW7vrU2rLsJijhW2mgaya74OQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Veznu\n\nQ: Last Name\nA: Premathas\n\nQ: // The Vehicle Class\nA: public class Vehicle()\n{\n    private boolean isOn;\n    private String vehcileBrand;\n\n    public Vehicle(String brand)\n    {\n         vehicleBrand = brand;\n         isOn = false;\n    }\n\n    public start \n    {\n        if(vehicleIgnition.equals(\"false\"))\n        {\n              isOn= true;\n         } \n     } \n\n\n\n\n} \n\nQ: // The Car Class\nA: \n\nQ: public void run() {\nA: Customer customer1 = new Customer(\"Abby\",16);\nCustomer customer2 = new Customer(\"Beatrice\",17);\nCustomer customer3 = new Customer(\"Courtney\",15);\n\nadd(customer1);\nadd(customer2);\nadd(customer3);\n\nprint();\n\nclear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "",
							"First Name": "Veznu",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "Customer customer1 = new Customer(\"Abby\",16);\nCustomer customer2 = new Customer(\"Beatrice\",17);\nCustomer customer3 = new Customer(\"Courtney\",15);\n\nadd(customer1);\nadd(customer2);\nadd(customer3);\n\nprint();\n\nclear();",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "public class Vehicle()\n{\n    private boolean isOn;\n    private String vehcileBrand;\n\n    public Vehicle(String brand)\n    {\n         vehicleBrand = brand;\n         isOn = false;\n    }\n\n    public start \n    {\n        if(vehicleIgnition.equals(\"false\"))\n        {\n              isOn= true;\n         } \n     } \n\n\n\n\n} ",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Premathas",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-28T11:48:18.469Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-05-01T22:01:03.327Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ4amFgLoV",
					"submittedAt": "2025-04-28T11:48:18.479Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:49.731Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-30T18:22:19.058Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "349045377@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudH8N0tD1u7QFi1mESusDwMsvhTSYHi3ftYIplfyPbXGT248r_m90_Yo5wASA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: nathan\n\nQ: Last Name\nA: ji\n\nQ: // The Vehicle Class\nA: private boolean on;\nprivate String type;\n\npublic Vehicle(boolean vehicleOn, String vehicleType) {\n    on = vehicleOn;\n    type = vehicleType;\n}\n\npublic void start() {\n    on = true;\n}\n\nQ: // The Car Class\nA: public Car(boolean carOn, String vehicleType) {\n    super(carOn, \"Car\");\n}\n\npublic void start() {\n    super.start();\n    System.out.println(\"Vroom!\");\n}\n\nQ: public void run() {\nA: Store iceCream = new Store();\n\nCustomer abby = new Customer(\"Abby\", 16);\nCustomer beatrice = new Customer(\"Beatrice\", 17);\nCustomer courtney = new Customer(\"Courtney\", 15);\n\nadd(Customer abby);\nadd(Customer beatrice);\nadd(Customer courtney);\n\nSystem.out.println(abby.getName());\nSystem.out.println(beatrice.getName());\nSystem.out.println(courtney.getName());\n\nclear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Classes are instances of objects\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: This is called when an instance of Student is created\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public String setName()\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: class\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "This is called when an instance of Student is created",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "class",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public Car(boolean carOn, String vehicleType) {\n    super(carOn, \"Car\");\n}\n\npublic void start() {\n    super.start();\n    System.out.println(\"Vroom!\");\n}",
							"First Name": "nathan",
							"Which of these is most likely a setter method?": "public String setName()",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Classes are instances of objects",
							"public void run() {": "Store iceCream = new Store();\n\nCustomer abby = new Customer(\"Abby\", 16);\nCustomer beatrice = new Customer(\"Beatrice\", 17);\nCustomer courtney = new Customer(\"Courtney\", 15);\n\nadd(Customer abby);\nadd(Customer beatrice);\nadd(Customer courtney);\n\nSystem.out.println(abby.getName());\nSystem.out.println(beatrice.getName());\nSystem.out.println(courtney.getName());\n\nclear();",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "private boolean on;\nprivate String type;\n\npublic Vehicle(boolean vehicleOn, String vehicleType) {\n    on = vehicleOn;\n    type = vehicleType;\n}\n\npublic void start() {\n    on = true;\n}",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "ji",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-28T11:50:41.191Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-30T18:22:19.216Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ4amFgLoV",
					"submittedAt": "2025-04-28T11:50:41.225Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:53.345Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T00:13:50.586Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudfLPWKjqZAxJF0b43c_7lrzob59OwuqMAv_kDqHnaERhz_ipVE5A0H0nn0Pg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Edward\n\nQ: Last Name\nA: Wang\n\nQ: // The Vehicle Class\nA: public class Vehicle \n{\n    private boolean isOn;\n    private String type;\n    \n    public Vehicle(vehicleType)\n    {\n        type = vehicleType;\n    }\n\n    public void start()\n    {\n        isOn = true;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"Car\");\n    }    \n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA: Store store = new Store();\n\nCustomer c1 = new Customer(\"Abby\", 16);\nCustomer c2 = new Customer(\"Beatrice\", 17);\nCustomer c3 = new Customer(\"Courtney\", 15);\n\nstore.add(c1);\nstore.add(c2);\nstore.add(c3);\n\nstore.print();\n\nstore.clear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: This is called when an instance of Student is created\n\nQ: An instance variable stores data that belongs to...\nA: The class that the instance was created from\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: extends\n\nQ: A variable that belongs to the class is called a(n)\nA: instance variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "This is called when an instance of Student is created",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"A class is...": "A blueprint",
							"An instance variable stores data that belongs to...": "The class that the instance was created from",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"Car\");\n    }    \n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}",
							"First Name": "Edward",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "Store store = new Store();\n\nCustomer c1 = new Customer(\"Abby\", 16);\nCustomer c2 = new Customer(\"Beatrice\", 17);\nCustomer c3 = new Customer(\"Courtney\", 15);\n\nstore.add(c1);\nstore.add(c2);\nstore.add(c3);\n\nstore.print();\n\nstore.clear();",
							"A variable that belongs to the class is called a(n)": "instance variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle \n{\n    private boolean isOn;\n    private String type;\n    \n    public Vehicle(vehicleType)\n    {\n        type = vehicleType;\n    }\n\n    public void start()\n    {\n        isOn = true;\n    }\n}",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Wang",
							"What keyword to you use to make a method or variable belong to the class?": "extends"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQ4amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-28T11:49:26.149Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-05-02T00:13:50.709Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:49:26.162Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:41:56.948Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T04:20:12.952Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud98jxD5At2rXV4gC-jz_fpZWsZrE3ur3YaN2vLFqVBzjcfLKfaHkNWLSOY8w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: // The Vehicle Class\nA: public class Vehicle()\n{\n    private boolean isOn;\n    private String vehicleType;\n\n    public Vehicle(vehicleType)\n    {\n        this.vehicleType = vehicleType;\n        this.isOn = false;\n    }\n\n    public void start()\n    {\n        this.isOn = true;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle()\n{\n    public Car()\n    {\n        super(\"Car\");\n    }\n\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA:     Store store = new Store();\n    \n    Customer customer1 = new Customer(\"Abby\", 16);\n    Customer customer2 = new Customer(\"Beatrice\", 17);\n    Customer customer3 = new Customer(\"Courtney\", 15);\n\n    store.add(customer1);\n    store.add(customer2);\n    store.add(customer3);\n   \n    store.print();\n\n    store.clear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: This is called when an instance of Student is created\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public void getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: extends\n\nQ: A variable that belongs to the class is called a(n)\nA: instance variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "This is called when an instance of Student is created",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle()\n{\n    public Car()\n    {\n        super(\"Car\");\n    }\n\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}",
							"First Name": "Leo",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public void getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "    Store store = new Store();\n    \n    Customer customer1 = new Customer(\"Abby\", 16);\n    Customer customer2 = new Customer(\"Beatrice\", 17);\n    Customer customer3 = new Customer(\"Courtney\", 15);\n\n    store.add(customer1);\n    store.add(customer2);\n    store.add(customer3);\n   \n    store.print();\n\n    store.clear();",
							"A variable that belongs to the class is called a(n)": "instance variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle()\n{\n    private boolean isOn;\n    private String vehicleType;\n\n    public Vehicle(vehicleType)\n    {\n        this.vehicleType = vehicleType;\n        this.isOn = false;\n    }\n\n    public void start()\n    {\n        this.isOn = true;\n    }\n}",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "So",
							"What keyword to you use to make a method or variable belong to the class?": "extends"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-04-28T11:46:57.087Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-05-02T04:20:13.146Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ4amFgLoV",
					"submittedAt": "2025-04-28T11:46:57.128Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:00.583Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T03:01:16.853Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuedKNK8bRVgjVFMFSLzbWV4E_CKLbeS9IKhtpuU-p86lKHzkYEoh7ghX050wg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: // The Vehicle Class\nA: public class Vehicle\n{\n    private boolean isOn;\n    private String type; \n    public Vehicle(String type)\n    {\n        this.type = type;\n    }\n    public boolean start()\n    {\n        isOn = true; \n    } \n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n    public Car (String type)\n    {\n        super.(type); \n    }\n    public String start()\n    {\n        System.out.println(\"Vroom!\"); \n    } \n} \n\nQ: public void run() {\nA:     Store store = new Store(); \n    Customer c1 = new Customer(\"Abby\", 16);\n    Customer c2 = new Customer(\"Beatrice\", 17);\n    Customer c3 = new Customer(\"Cortney, 15); \n\n    Store.add(c1);\n    Store.add(c2);\n    Store.add(c3); \n\n    System.out.println(c1.getName());\n    System.out.println(c2.getName());\n    System.out.println(c3.getName());\n\n    Store.clear(); \n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Creates a new variable\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The class that the instance was created from\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: class\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "class",
							"An instance variable stores data that belongs to...": "The class that the instance was created from",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n    public Car (String type)\n    {\n        super.(type); \n    }\n    public String start()\n    {\n        System.out.println(\"Vroom!\"); \n    } \n} ",
							"First Name": "Carmen",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "    Store store = new Store(); \n    Customer c1 = new Customer(\"Abby\", 16);\n    Customer c2 = new Customer(\"Beatrice\", 17);\n    Customer c3 = new Customer(\"Cortney, 15); \n\n    Store.add(c1);\n    Store.add(c2);\n    Store.add(c3); \n\n    System.out.println(c1.getName());\n    System.out.println(c2.getName());\n    System.out.println(c3.getName());\n\n    Store.clear(); \n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle\n{\n    private boolean isOn;\n    private String type; \n    public Vehicle(String type)\n    {\n        this.type = type;\n    }\n    public boolean start()\n    {\n        isOn = true; \n    } ",
							"This code:  Point p = new Point(5,6);": "Creates a new variable",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Cheung",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-28T11:49:16.796Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-05-02T03:01:17.002Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQ4amFgLoV",
					"submittedAt": "2025-04-28T11:49:16.807Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:04.046Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-05-01T13:15:35.566Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucSnsUdCNNJs_BJeDR4RbKwxo2Wm-vQj4CO19tKzh8bh8uyNOsPZrRMOaAQpA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena\n\nQ: Last Name\nA: Godek\n\nQ: // The Vehicle Class\nA: Public class Vehicle {\n\n    private String type;\n    \n    public Vehicle(String type){\n        this.type = type;\n    }\n\n    private boolean vehicleOnOrOff(Boolean onOroff){\n        return onOrOff;\n    }\n\n    private String toString(){\n        return \"This vehicle is a \" + type;\n    }\n\n    private boolean start(){\n        return true;\n    }\n\n}\n\n\nQ: // The Car Class\nA: public class Car extends Vehicle{\n\n    public Car(){\n        super(\"Car\");\n    }\n\n}\n\nprivate String start(){\n    return \"Vroom!\";\n}\n\nQ: public void run() {\nA: Store store = new Store();\n\nCustomer c1 = new Customer(\"Abby\", 16);\nCustomer c2 = new Customer(\"Beatrice\", 17);\nCustomer c3 = new Customer(\"Courtney\", 15);\n\nstore.add(c1);\nstore.add(c2);\nstore.add(c3);\n\nstore.print();\nstore.clear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a string of the type of object created\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle{\n\n    public Car(){\n        super(\"Car\");\n    }\n\n}\n\nprivate String start(){\n    return \"Vroom!\";\n}",
							"First Name": "Sena",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "Store store = new Store();\n\nCustomer c1 = new Customer(\"Abby\", 16);\nCustomer c2 = new Customer(\"Beatrice\", 17);\nCustomer c3 = new Customer(\"Courtney\", 15);\n\nstore.add(c1);\nstore.add(c2);\nstore.add(c3);\n\nstore.print();\nstore.clear();",
							"A variable that belongs to the class is called a(n)": "class variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a string of the type of object created",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "Public class Vehicle {\n\n    private String type;\n    \n    public Vehicle(String type){\n        this.type = type;\n    }\n\n    private boolean vehicleOnOrOff(Boolean onOroff){\n        return onOrOff;\n    }\n\n    private String toString(){\n        return \"This vehicle is a \" + type;\n    }\n\n    private boolean start(){\n        return true;\n    }\n\n}\n",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Godek",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"id": "Cg0IvNTT8mcQ4amFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-28T11:47:04.264Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-05-01T13:15:35.694Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:47:04.303Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:05.614Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 5,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T14:23:24.043Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucgZ-Gibu_dMcm6RuQcM5lajgaUT0U-wvwuuqYF_m38ocY7H1C5fUnobFSUeQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: // The Vehicle Class\nA: public class Vehicle {\n    public boolean engine;\n    public String type;\n    public Vehicle (String vehicleType) {\n        this.type = vehicleType;\n        this.engine = False;\n    }\n    public void start() {\n        engine = True;\n    }\n    \n    public boolean getEngine() {\n        return engine;\n    }\n    public String getType() {\n        return type;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle {\n    public Car() {\n        super(\"Car\");\n    }\n    @Override\n    public void start() {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA: ",
						"structuredData": {
							"First Name": "Saiful",
							"// The Vehicle Class": "public class Vehicle {\n    public boolean engine;\n    public String type;\n    public Vehicle (String vehicleType) {\n        this.type = vehicleType;\n        this.engine = False;\n    }\n    public void start() {\n        engine = True;\n    }\n    \n    public boolean getEngine() {\n        return engine;\n    }\n    public String getType() {\n        return type;\n    }\n}",
							"public void run() {": "",
							"Last Name": "Shaik",
							"// The Car Class": "public class Car extends Vehicle {\n    public Car() {\n        super(\"Car\");\n    }\n    @Override\n    public void start() {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"id": "Cg4Iwe6fnb8OEOGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-28T11:49:22.186Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-02T14:23:08.975Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-05-02T14:23:24.161Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:49:22.231Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:09.506Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T17:11:06.532Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuejht9L-wnLxOqAowsEzdM4oR5Jp6jhsdEFDvWHFYNfIPvBK-ZRsUnq6CEccQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: // The Vehicle Class\nA: public class Vehicle \n{\n     private boolean turnedOn;\n     private String type;\n\n     public Vehicle(String type)\n     {\n          this.type = type;\n     }\n\n     public void start() \n     {\n          turnedOn = true;\n\n}\n     \n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n     public Car() \n     {\n          super(\"Car\");\n     }\n\n     public void start()\n     {\n          super.start();\n          System.out.println(\"Vroom!\");\n     }\n}\n\nQ: public void run() {\nA:      Store myStore = new Store();\n     Customer a= new Customer(\"Abby\", 16);\n     Customer b= new Customer(\"Beatrice\", 17);\n     Customer c= new Customer(\"Courtney\", 15);\n     myStore.add(a);\n     myStore.add(b);\n     myStore.add(c);\n     myStore.print();\n     myStore.clear();\n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public void getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName()\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: public\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n     public Car() \n     {\n          super(\"Car\");\n     }\n\n     public void start()\n     {\n          super.start();\n          System.out.println(\"Vroom!\");\n     }\n}",
							"First Name": "Nereyal",
							"Which of these is most likely a setter method?": "public void setName()",
							"Which of these could be a 'getter' method?": "public void getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "     Store myStore = new Store();\n     Customer a= new Customer(\"Abby\", 16);\n     Customer b= new Customer(\"Beatrice\", 17);\n     Customer c= new Customer(\"Courtney\", 15);\n     myStore.add(a);\n     myStore.add(b);\n     myStore.add(c);\n     myStore.print();\n     myStore.clear();\n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "public class Vehicle \n{\n     private boolean turnedOn;\n     private String type;\n\n     public Vehicle(String type)\n     {\n          this.type = type;\n     }\n\n     public void start() \n     {\n          turnedOn = true;\n\n}\n     ",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Jeyakumar",
							"What keyword to you use to make a method or variable belong to the class?": "public"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-28T11:48:39.096Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-05-02T17:35:40.643Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEOGphYC6FQ",
					"submittedAt": "2025-04-28T11:48:39.128Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:13.207Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-05-02T04:01:35.577Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucHmSRmHxmfNHKFxsJfK2_Hw-7KoBZA-phThrio03Ps1SFZMjX0cxRbgEunGQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: // The Vehicle Class\nA: public class Vehicle {\n    private boolean isOn;\n    private String vehicleType;\n    public Vehicle(String vehicleType) {\n        this.vehicleType = vehicleType;\n        this.isOn = false; \n    }\n    public void start() {\n        isOn = true;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle {\n    public Car() {\n        super(\"Car\");\n    }\n\n    @Override\n    public void start() {\n    super.start();\n    System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA:     Store store = new Store();\n    Customer abby = new Customer(\"Abby\", 16);\n    Customer beatrice = new Customer(\"Beatrice\", 17);\n    Customer courtney = new Customer(\"Courtney\", 15);\n    store.add(abby);\n    store.add(beatrice);\n    store.add(courtney);\n    store.print();\n    store.clear();\n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The class that the instance was created from\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: Math.pow(2,3);\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The class that the instance was created from",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle {\n    public Car() {\n        super(\"Car\");\n    }\n\n    @Override\n    public void start() {\n    super.start();\n    System.out.println(\"Vroom!\");\n    }\n}",
							"First Name": "Cayden",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "    Store store = new Store();\n    Customer abby = new Customer(\"Abby\", 16);\n    Customer beatrice = new Customer(\"Beatrice\", 17);\n    Customer courtney = new Customer(\"Courtney\", 15);\n    store.add(abby);\n    store.add(beatrice);\n    store.add(courtney);\n    store.print();\n    store.clear();\n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "public class Vehicle {\n    private boolean isOn;\n    private String vehicleType;\n    public Vehicle(String vehicleType) {\n        this.vehicleType = vehicleType;\n        this.isOn = false; \n    }\n    public void start() {\n        isOn = true;\n    }\n}",
							"Which of these is NOT a call to a class method?": "Math.pow(2,3);",
							"Last Name": "Chiu",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-28T11:49:01.265Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-05-02T04:01:35.733Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEOGphYC6FQ",
					"submittedAt": "2025-04-28T11:49:01.308Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:17.593Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-29T18:20:19.696Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueUgyTm6vKOyGMjJVHRMKmUqw9YjGpDPqQlS2Q2Re_GlLyOLIZtdu0uPVdbgw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: // The Vehicle Class\nA: public class Vehicle\n{\n    private boolean isOn;\n    private String type;\n    public boolean vehicleOn()\n    {\n        return isOn;\n    }\n    public String getType()\n    {\n        return type;\n    }\n    public vehicle(String type)\n    {\n        this.type = type;\n    }\n    public void start()\n    {\n        isOn = true;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"Car\");\n    }\n    public void start()\n    {\n        super.start():\n        System.out.println(\"Vroom\");\n    }\n}\n\nQ: public void run() {\nA: Store store = new Store;\nCustomer abby = new Customer(\"Abby\", 16);\nstore.add(abby);\nCustomer beatrice = new Customer(\"Beatrice,\" 17);\nstore.add(beatrice);\nCustomer courtney = new Customer(\"Courtney\", 15);\nstore.add(courtney);\nstore.print();\nstore.clear();\n}\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"Car\");\n    }\n    public void start()\n    {\n        super.start():\n        System.out.println(\"Vroom\");\n    }\n}",
							"First Name": "Owen",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "Store store = new Store;\nCustomer abby = new Customer(\"Abby\", 16);\nstore.add(abby);\nCustomer beatrice = new Customer(\"Beatrice,\" 17);\nstore.add(beatrice);\nCustomer courtney = new Customer(\"Courtney\", 15);\nstore.add(courtney);\nstore.print();\nstore.clear();\n}",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle\n{\n    private boolean isOn;\n    private String type;\n    public boolean vehicleOn()\n    {\n        return isOn;\n    }\n    public String getType()\n    {\n        return type;\n    }\n    public vehicle(String type)\n    {\n        this.type = type;\n    }\n    public void start()\n    {\n        isOn = true;\n    }\n}",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Kung",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4I5dKR18sOEOGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T11:48:00.914Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-29T18:20:19.875Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:00.955Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:21.228Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-28T18:23:51.977Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudn0nKCa0US1xImcbu6HvduCEXGZS1SMn87wpB6cqZMV2zwAFxs5NA1tzxJdQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: // The Vehicle Class\nA: public class Vehicle\n{\n    public boolean onOrOff;\n    public String type;\n    public Vehicle(String type)\n    {\n        this.type = type;\n        this.onOrOff = false;\n    }\n    public static boolean start()\n    {\n        onOrOff = true\n        return onOrOff;\n    }\n}\n\nQ: // The Car Class\nA: public class Car extend Vehicle\n{\n    public Car(int type)\n    {\n        super(\"car\");\n    }\n    public static void start()\n    {\n        super.start();\n        System.out.println (\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA: Store iceCream = new Store();\nCustomer Abby = new Customer(\"Abby\", 16);\nCustomer Beatrice = new Customer(\"Beatrice\", 17);\nCustomer Courtney = new Customer(\"Courtney\", 15);\niceCream.add(Abby);\niceCream.add(Beatrice);\niceCream.add(Courtney);\nSystem.out.println(iceCream.print());\niceCream.clear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Creates a new variable\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects refer to programs, classes refer to the environment\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: This is called when an instance of Student is created\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Casting",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "This is called when an instance of Student is created",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"A class is...": "A blueprint",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extend Vehicle\n{\n    public Car(int type)\n    {\n        super(\"car\");\n    }\n    public static void start()\n    {\n        super.start();\n        System.out.println (\"Vroom!\");\n    }\n}",
							"First Name": "Jennifer",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects refer to programs, classes refer to the environment",
							"public void run() {": "Store iceCream = new Store();\nCustomer Abby = new Customer(\"Abby\", 16);\nCustomer Beatrice = new Customer(\"Beatrice\", 17);\nCustomer Courtney = new Customer(\"Courtney\", 15);\niceCream.add(Abby);\niceCream.add(Beatrice);\niceCream.add(Courtney);\nSystem.out.println(iceCream.print());\niceCream.clear();",
							"A variable that belongs to the class is called a(n)": "class variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Casting",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"// The Vehicle Class": "public class Vehicle\n{\n    public boolean onOrOff;\n    public String type;\n    public Vehicle(String type)\n    {\n        this.type = type;\n        this.onOrOff = false;\n    }\n    public static boolean start()\n    {\n        onOrOff = true\n        return onOrOff;\n    }\n}",
							"This code:  Point p = new Point(5,6);": "Creates a new variable",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Zheng",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I7ZHxyucSEOGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-28T11:47:43.962Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-28T18:23:52.112Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:47:43.973Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:24.732Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-28T18:29:22.235Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufozcxq01xaC7ZsUVUzZZLin-TGhx3sIPM-JlBoqLRXkedPG-yti1UtthBoAQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: // The Vehicle Class\nA: Public Class Vehicle\n{\n    private boolean turnOn;\n    public Vehicle(boolean turn)\n    {\n        turnOn = turn;\n    }\n    public void start()\n    {\n        turnOn = true;\n    }\n}\n\nQ: // The Car Class\nA: Public Class Car extends Vehicle\n{\n    public Car(boolean turn)\n    {\n        super(turn);\n    }\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}\n\nQ: public void run() {\nA: Customer me = new Customer(Lionson, 17);\nadd(me);\nprint();\nclear();\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public String setName()\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: class\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Inheritance",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "class",
							"A class is...": "A blueprint",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "Public Class Car extends Vehicle\n{\n    public Car(boolean turn)\n    {\n        super(turn);\n    }\n    public void start()\n    {\n        super.start();\n        System.out.println(\"Vroom!\");\n    }\n}",
							"First Name": "Lionson",
							"Which of these is most likely a setter method?": "public String setName()",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "Customer me = new Customer(Lionson, 17);\nadd(me);\nprint();\nclear();",
							"A variable that belongs to the class is called a(n)": "class variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Inheritance",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "Public Class Vehicle\n{\n    private boolean turnOn;\n    public Vehicle(boolean turn)\n    {\n        turnOn = turn;\n    }\n    public void start()\n    {\n        turnOn = true;\n    }\n}",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Meng",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-28T11:49:39.554Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-28T18:29:22.376Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEOGphYC6FQ",
					"submittedAt": "2025-04-28T11:49:39.563Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:28.186Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T00:09:00.221Z",
								"totalFormResponses": 19,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"contentType": "form",
								"email": "440030068@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudgNxNgsrQxCmhapSN2B5n2Z5MvWRkHHJp9r582ntdY-w_0GYbLe14O1JyZfw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Moses\n\nQ: Last Name\nA: He\n\nQ: // The Vehicle Class\nA: \n\nQ: // The Car Class\nA: \n\nQ: public void run() {\nA: \n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects refer to programs, classes refer to the environment\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The class that the instance was created from\n\nQ: An instance method...\nA: Adds functionality to a class by creating private fields\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: class\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: instance variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Casting",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "class",
							"An instance variable stores data that belongs to...": "The class that the instance was created from",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Adds functionality to a class by creating private fields",
							"// The Car Class": "",
							"First Name": "Moses",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects refer to programs, classes refer to the environment",
							"public void run() {": "",
							"A variable that belongs to the class is called a(n)": "instance variable",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Casting",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "He",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTEOGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-04-28T11:46:42.827Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-05-02T00:09:00.306Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:46:42.837Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:29.733Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"questionCount": 5,
								"matchedByEmail": true,
								"responseTime": "2025-05-01T17:51:56.843Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucY-w2XtuKUXNczK5AmIEcX4LuXHgFYkc7Ik9sZfPp1P3L5ctHYP3Z7Dk4rRQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang\n\nQ: // The Vehicle Class\nA: \n\nQ: // The Car Class\nA: \n\nQ: public void run() {\nA: ",
						"structuredData": {
							"First Name": "Steven",
							"// The Vehicle Class": "",
							"public void run() {": "",
							"Last Name": "Wang",
							"// The Car Class": ""
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Ik8mXwcMUEOGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-04-28T11:48:44.251Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-05-01T17:51:56.926Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:44.286Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.721Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849441",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-05-02T16:49:43.186Z",
								"totalFormResponses": 19,
								"formTitle": "Unit 4 Quiz: Classes and Objects",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudlMFYXqDQVZyV9RpMbrKw0v4bFAtQan9LZUHNXg5Cr_FECtRfmbVCjGm21hA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: // The Vehicle Class\nA: public class Vehicle\n{\n    private boolean isOn;\n    private String type;\n\n    public String VehicleType(String type)\n    {\n        this.type = type;\n    }\n}\n\npublic boolean Start()\n{\n    return this.isOn = true;\n}\n\npublic String getVehicleType()\n{\n    return type;\n}\n\nQ: // The Car Class\nA: public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"Car\");\n    }\n\n    public VehicleType()\n    {\n        return super.getVehicleType;\n    }\n\n    public void Start()\n    {\n        super.Start();\n        System.out.println(\"Vroom!\");\n    }\n\nQ: public void run() {\nA: public class Store()\n\nQ: A Java object is...\nA: Something that has state and behaviour\n\nQ: This code:  Point p = new Point(5,6);\nA: Instantiates a new point\n\nQ: A class is...\nA: A blueprint\n\nQ: Which statement is true?\nA: Objects are instances of classes\n\nQ: What is the purpose of the 'public String toString()' method of a class?\nA: Return a readable string that represents the object\n\nQ: Being a client of a class means that...\nA: We can use its methods without understanding how the methods were implemented\n\nQ: A constructor...\nA: Allows us to create a new instance of a class and runs code to  initialize variables\n\nQ: This is a constructor: public Student(String FN, String LN);  Which is false?\nA: The constructor is missing the void keyword\n\nQ: An instance variable stores data that belongs to...\nA: The instance\n\nQ: An instance method...\nA: Is code that is called on a specific instance of the class\n\nQ: Which of these could be a 'getter' method?\nA: public String getName()\n\nQ: Which of these is most likely a setter method?\nA: public void setName(String name)\n\nQ: You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?\nA: instance\n\nQ: What keyword to you use to make a method or variable belong to the class?\nA: static\n\nQ: A variable that belongs to the class is called a(n)\nA: class variable\n\nQ: Which of these is NOT a call to a class method?\nA: \"hello\".length();\n\nQ: Methods in a class can have the same name as long as their parameters are different.  This is called...\nA: Overloading",
						"structuredData": {
							"This is a constructor: public Student(String FN, String LN);  Which is false?": "The constructor is missing the void keyword",
							"A constructor...": "Allows us to create a new instance of a class and runs code to  initialize variables",
							"A class is...": "A blueprint",
							"You create a Dog class and create a 'name' property.  Should this property belong to the instance or to the class?": "instance",
							"An instance variable stores data that belongs to...": "The instance",
							"A Java object is...": "Something that has state and behaviour",
							"An instance method...": "Is code that is called on a specific instance of the class",
							"// The Car Class": "public class Car extends Vehicle\n{\n    public Car()\n    {\n        super(\"Car\");\n    }\n\n    public VehicleType()\n    {\n        return super.getVehicleType;\n    }\n\n    public void Start()\n    {\n        super.Start();\n        System.out.println(\"Vroom!\");\n    }",
							"First Name": "Vivian",
							"Which of these is most likely a setter method?": "public void setName(String name)",
							"Which of these could be a 'getter' method?": "public String getName()",
							"Which statement is true?": "Objects are instances of classes",
							"public void run() {": "public class Store()",
							"A variable that belongs to the class is called a(n)": "class variable",
							"Methods in a class can have the same name as long as their parameters are different.  This is called...": "Overloading",
							"What is the purpose of the 'public String toString()' method of a class?": "Return a readable string that represents the object",
							"Being a client of a class means that...": "We can use its methods without understanding how the methods were implemented",
							"This code:  Point p = new Point(5,6);": "Instantiates a new point",
							"// The Vehicle Class": "public class Vehicle\n{\n    private boolean isOn;\n    private String type;\n\n    public String VehicleType(String type)\n    {\n        this.type = type;\n    }\n}\n\npublic boolean Start()\n{\n    return this.isOn = true;\n}\n\npublic String getVehicleType()\n{\n    return type;\n}",
							"Which of these is NOT a call to a class method?": "\"hello\".length();",
							"Last Name": "Li",
							"What keyword to you use to make a method or variable belong to the class?": "static"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDQx/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4Iz_iw9dcUEOGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-28T11:48:46.650Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-02T16:59:24.965Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-28T11:48:46.686Z",
					"assignmentName": "Unit 4 Quiz: Classes and Objects (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.724Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-22T13:07:49.551Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-25T17:38:13.344Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQpdvEl_YV",
					"submittedAt": "2025-04-22T13:07:49.592Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.727Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Isq_W0gkQpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-22T13:08:34.696Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-24T23:37:15.344Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:08:34.705Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.731Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"id": "Cg0I_qLZkQsQpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-22T13:08:05.094Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-23T18:01:39.529Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:08:05.134Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.735Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"attachmentCount": 0,
					"id": "Cg0IwJXv6QsQpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-22T13:08:20.249Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-27T23:47:38.261Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:08:20.321Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.738Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-22T13:07:27.607Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-25T17:38:20.091Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQpdvEl_YV",
					"submittedAt": "2025-04-22T13:07:27.623Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.741Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-22T13:08:09.021Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-23T17:57:06.826Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QpdvEl_YV",
					"submittedAt": "2025-04-22T13:08:09.244Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.743Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"id": "Cg0IhKbr2BYQpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-22T13:08:13.885Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-27T16:54:01.861Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:08:13.932Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.746Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Io-SHlhwQpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-22T13:10:22.648Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-23T18:01:15.387Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:10:22.682Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.748Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clark Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ik_u42h8QpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-22T13:10:02.388Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-30T17:50:36.009Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:10:02.433Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.751Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Edward Wang",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-22T13:10:19.620Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-29T17:48:49.401Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-29T17:48:52.114Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQpdvEl_YV",
					"submittedAt": "2025-04-22T13:10:19.629Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.753Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-22T13:10:48.577Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-28T02:08:23.305Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQpdvEl_YV",
					"submittedAt": "2025-04-22T13:10:48.615Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.757Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-22T13:09:50.579Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-25T18:29:50.815Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQpdvEl_YV",
					"submittedAt": "2025-04-22T13:09:50.589Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.759Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IvNTT8mcQpdvEl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-22T13:07:39.553Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-27T04:24:15.735Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:07:39.565Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.762Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-22T13:09:39.207Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-28T01:37:06.667Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEKXbxJf2FQ",
					"submittedAt": "2025-04-22T13:09:39.251Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.764Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-22T13:10:05.461Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-28T03:32:06.173Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEKXbxJf2FQ",
					"submittedAt": "2025-04-22T13:10:05.474Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.766Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEKXbxJf2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-22T13:09:36.115Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-26T20:53:02.112Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:09:36.151Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.769Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-22T13:08:19.396Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T18:09:01.085Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEKXbxJf2FQ",
					"submittedAt": "2025-04-22T13:08:19.407Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.771Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"id": "Cg4I55juyqAPEKXbxJf2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-22T13:09:22.994Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-27T14:03:32.625Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-22T13:09:23.041Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.774Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Jennifer Zheng",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-22T13:07:58.259Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-03T23:13:32.606Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEKXbxJf2FQ",
					"submittedAt": "2025-04-22T13:07:58.299Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.777Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-22T13:10:20.535Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-26T16:41:09.359Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEKXbxJf2FQ",
					"submittedAt": "2025-04-22T13:10:20.546Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.781Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279249829",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Vivian Li",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MjQ5ODI5/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-22T13:08:27.667Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-22T18:38:23.259Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEKXbxJf2FQ",
					"submittedAt": "2025-04-22T13:08:27.714Z",
					"assignmentName": "Tutorial: DodgeIt (Team)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.783Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-26T12:01:38.450Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-17T14:09:34.811Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQwqmFgLoV",
					"submittedAt": "2025-03-26T12:01:38.485Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.786Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-26T12:01:47.858Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-17T00:47:14.718Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQwqmFgLoV",
					"submittedAt": "2025-03-26T12:01:47.863Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.789Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"id": "Cg0I_qLZkQsQwqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-26T12:01:28.889Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-15T23:35:27.873Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:01:28.913Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.791Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-26T12:01:45.328Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-27T23:47:43.670Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQwqmFgLoV",
					"submittedAt": "2025-03-26T12:01:45.334Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.793Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-03-26T12:01:07.530Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-01T16:25:01.405Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQwqmFgLoV",
					"submittedAt": "2025-03-26T12:01:07.537Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.796Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-26T12:02:18.220Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-11T18:27:48.502Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QwqmFgLoV",
					"submittedAt": "2025-03-26T12:02:18.242Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.798Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQwqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-26T12:02:19.916Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-27T16:54:08.417Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:02:19.953Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.800Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-26T12:03:29.092Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-27T23:40:47.039Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQwqmFgLoV",
					"submittedAt": "2025-03-26T12:03:29.126Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.802Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"id": "Cg0Ik_u42h8QwqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-26T12:03:08.375Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-30T17:50:52.774Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:03:08.379Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.804Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQwqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-26T12:03:15.472Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-28T22:25:48.558Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:03:15.476Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.806Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Ine-5hUQQwqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-26T12:03:53.200Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-17T23:47:47.375Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:03:53.238Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.808Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQwqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-26T12:02:41.546Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-16T19:22:24.386Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:02:41.584Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.810Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-26T12:01:24.962Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-22T18:36:32.073Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQwqmFgLoV",
					"submittedAt": "2025-03-26T12:01:24.966Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.813Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-26T12:03:43.141Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-28T02:02:35.808Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEMKphYC6FQ",
					"submittedAt": "2025-03-26T12:03:43.179Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.815Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"id": "Cg4Iurzi88AOEMKphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-26T12:03:08.648Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-28T03:32:17.671Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:03:08.683Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.817Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-26T12:02:34.442Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-26T19:54:04.433Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEMKphYC6FQ",
					"submittedAt": "2025-03-26T12:02:34.480Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.819Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEMKphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-26T12:02:10.398Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T23:35:11.297Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:02:10.402Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.821Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "[No content available]",
					"id": "Cg4I55juyqAPEMKphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-26T12:02:27.956Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-27T22:18:46.448Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:02:27.962Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.823Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"id": "Cg4I7ZHxyucSEMKphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-26T12:01:48.584Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-28T11:48:50.381Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:01:48.622Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.826Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"id": "Cg4Iu8ODue4SEMKphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-26T12:02:55.551Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-24T01:01:04.154Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:02:55.555Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849410",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDEw/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"id": "Cg4Iz_iw9dcUEMKphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-26T12:02:59Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-05-02T16:59:32.952Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-26T12:02:59.005Z",
					"assignmentName": "Unit 4: Classes and Objects",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"studentWork": "Selected: No",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-15T16:56:34.574Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-15T16:57:08.888Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQu-j11qoW",
					"submittedAt": "2025-04-15T16:56:34.583Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "Selected: Yes",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-15T16:56:22.169Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-15T21:46:51.074Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQu-j11qoW",
					"submittedAt": "2025-04-15T16:56:22.179Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "Selected: No",
					"id": "Cg0Ik7DJrAwQu-j11qoW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-15T16:55:52.135Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-16T01:30:40.938Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:55:52.140Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "Selected: Yes",
					"id": "Cg0I5qyc4Q4Qu-j11qoW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-15T16:57:41.452Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-15T17:40:02.979Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:57:41.491Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-15T16:57:15.737Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-17T11:19:38.918Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQu-j11qoW",
					"submittedAt": "2025-04-15T16:57:15.773Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "Selected: No",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-15T16:59:03.792Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-16T18:16:29.913Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQu-j11qoW",
					"submittedAt": "2025-04-15T16:59:03.830Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"studentWork": "Selected: No",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-15T16:58:00.298Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-16T21:46:26.584Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQu-j11qoW",
					"submittedAt": "2025-04-15T16:58:00.310Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"studentWork": "Selected: No",
					"id": "Cg0Ine-5hUQQu-j11qoW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-15T16:57:54.409Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-15T17:39:41.109Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:57:54.448Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"id": "Cg0I0ruNqlsQu-j11qoW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-15T16:57:53.673Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-17T13:39:19.675Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:57:53.683Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": true,
					"studentName": "Sena Godek",
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"id": "Cg0IvNTT8mcQu-j11qoW",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-15T16:56:25.497Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-22T18:36:16.495Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:56:25.532Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "Selected: Yes",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"id": "Cg4Iwe6fnb8OELvo9daqFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-15T16:57:35.441Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-15T16:57:59.534Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:57:35.477Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"attachmentCount": 0,
					"studentWork": "Selected: No",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"id": "Cg4I05uw78AOELvo9daqFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-04-15T16:56:09.181Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-04-16T18:36:33.005Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:56:09.191Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": true,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"studentWork": "Selected: No",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-15T16:58:12.965Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-28T04:06:04.705Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOELvo9daqFg",
					"submittedAt": "2025-04-15T16:58:12.998Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": true,
					"studentName": "Cayden Chiu",
					"studentWork": "Selected: No",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOELvo9daqFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-15T16:58:10.014Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-19T18:28:25.867Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:58:10.056Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": true,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "Selected: No",
					"id": "Cg4I5dKR18sOELvo9daqFg",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-15T16:57:29.295Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T23:35:59.968Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-15T16:57:29.305Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.828Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "767370818619",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "Selected: No",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzY3MzcwODE4NjE5/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-15T16:59:08.756Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-16T13:04:51.919Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SELvo9daqFg",
					"submittedAt": "2025-04-15T16:59:08.788Z",
					"assignmentName": "Game Studio Field Trip",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.831Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279164878",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTY0ODc4/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-11T12:08:12.307Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-18T12:39:31.925Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEM7Dv5f2FQ",
					"submittedAt": "2025-04-11T12:08:12.348Z",
					"assignmentName": "Tutorial: Class website (Collab, Optional)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.833Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279164878",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTY0ODc4/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-11T12:06:30.181Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T23:35:29.502Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEM7Dv5f2FQ",
					"submittedAt": "2025-04-11T12:06:30.192Z",
					"assignmentName": "Tutorial: Class website (Collab, Optional)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.835Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IvfCrsQEQoJfLl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-14T12:04:04.439Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-17T14:09:50.258Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:04:04.484Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.837Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-14T12:03:58.577Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-14T18:44:03.923Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-15T14:31:36.674Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-15T17:56:47.553Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQoJfLl_YV",
					"submittedAt": "2025-04-14T12:03:58.613Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.838Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-14T12:03:48.080Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-15T23:50:14.281Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQoJfLl_YV",
					"submittedAt": "2025-04-14T12:03:48.088Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.840Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"id": "Cg0IwJXv6QsQoJfLl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-14T12:03:57.616Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-17T18:00:01.237Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-17T18:00:12.253Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-22T17:39:14.288Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:03:57.625Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.842Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-14T12:03:13.575Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-15T18:32:04.908Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQoJfLl_YV",
					"submittedAt": "2025-04-14T12:03:13.580Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.844Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-14T12:04:07.147Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-14T18:42:46.829Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QoJfLl_YV",
					"submittedAt": "2025-04-14T12:04:07.160Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.846Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Io-SHlhwQoJfLl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-14T12:06:51.497Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-16T18:12:07.569Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:06:51.501Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.848Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-14T12:05:12.444Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-30T17:50:41.208Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8QoJfLl_YV",
					"submittedAt": "2025-04-14T12:05:12.455Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.850Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"attachmentCount": 0,
					"id": "Cg0I7-PGhEAQoJfLl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-14T12:05:15.876Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-15T18:32:03.079Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:05:15.921Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.852Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-04-14T12:03:19.492Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-04-16T17:48:13.952Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQoJfLl_YV",
					"submittedAt": "2025-04-14T12:03:19.503Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.855Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-14T12:06:55.743Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-21T15:16:02.004Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQoJfLl_YV",
					"submittedAt": "2025-04-14T12:06:55.783Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.858Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I0ruNqlsQoJfLl_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-14T12:04:32.430Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-16T18:23:30.466Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:04:32.471Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.862Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-14T12:03:33.886Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-16T18:23:25.418Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQoJfLl_YV",
					"submittedAt": "2025-04-14T12:03:33.926Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.865Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-14T12:05:45.456Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-14T18:32:37.426Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEKCXy5f2FQ",
					"submittedAt": "2025-04-14T12:05:45.491Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.867Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4Iurzi88AOEKCXy5f2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-14T12:04:45.243Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-16T17:48:25.246Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:04:45.248Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.870Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEKCXy5f2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-14T12:05:01.827Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-19T18:49:08.205Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:05:01.873Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.872Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-14T12:04:26.803Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-15T19:19:49.068Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEKCXy5f2FQ",
					"submittedAt": "2025-04-14T12:04:26.847Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.875Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"id": "Cg4I55juyqAPEKCXy5f2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-14T12:04:59.783Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-19T02:07:33.603Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:04:59.788Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.877Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"id": "Cg4I7ZHxyucSEKCXy5f2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-14T12:04:04.090Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-05-03T23:13:24.305Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:04:04.095Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.879Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "GitHub - yrdsb-peths/dodge-it-solo-Zulomm: p5-ics3u-dodge-it-solo-greenfoot-vscode created by GitHub Classroom",
									"type": "link",
									"url": "https://github.com/yrdsb-peths/dodge-it-solo-Zulomm"
								}
							]
						},
						"text": "[Link: GitHub - yrdsb-peths/dodge-it-solo-Zulomm: p5-ics3u-dodge-it-solo-greenfoot-vscode created by GitHub Classroom] https://github.com/yrdsb-peths/dodge-it-solo-Zulomm",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[Link: https://github.com/yrdsb-peths/dodge-it-solo-Zulomm]\n",
					"id": "Cg4Iu8ODue4SEKCXy5f2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-14T12:06:45.161Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-21T17:43:08.708Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-21T17:43:14.073Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-21T17:43:31.600Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-14T12:06:45.197Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.881Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Steven Wang",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-04-14T12:06:17.212Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-04-15T18:32:16.885Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEKCXy5f2FQ",
					"submittedAt": "2025-04-14T12:06:17.248Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.884Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279355808",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MzU1ODA4/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-14T12:04:36.281Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-16T18:32:17.783Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-16T18:32:31.573Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-22T18:38:30.942Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEKCXy5f2FQ",
					"submittedAt": "2025-04-14T12:04:36.319Z",
					"assignmentName": "Tutorial: Dodge It (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.886Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"id": "Cg0Isq_W0gkQqs_Al_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-02T12:04:50.145Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-15T00:26:09.445Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-02T12:04:50.180Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.887Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"id": "Cg0I_qLZkQsQqs_Al_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-02T12:04:11.556Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-08T22:57:02.417Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-08T22:57:05.930Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-02T12:04:11.588Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.890Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-02T12:04:42.544Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-11T17:14:02.626Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Qqs_Al_YV",
					"submittedAt": "2025-04-02T12:04:42.577Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.892Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-02T12:07:43.122Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-23T13:02:36.012Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQqs_Al_YV",
					"submittedAt": "2025-04-02T12:07:43.164Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.894Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-02T12:05:50.386Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-22T18:08:11.509Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8Qqs_Al_YV",
					"submittedAt": "2025-04-02T12:05:50.392Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.896Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQqs_Al_YV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-02T12:05:49.553Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-15T17:44:03.085Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-02T12:05:49.558Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.899Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4Iwe6fnb8OEKrPwJf2FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-02T12:06:06.422Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-07T18:24:18.661Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-02T12:06:06.426Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.901Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-02T12:04:40.841Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-14T18:09:20.871Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEKrPwJf2FQ",
					"submittedAt": "2025-04-02T12:04:40.870Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:33.904Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "753279182762",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzUzMjc5MTgyNzYy/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-02T12:05:23.092Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-22T18:38:36.720Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEKrPwJf2FQ",
					"submittedAt": "2025-04-02T12:05:23.097Z",
					"assignmentName": "Tutorial: Github Pages (Solo)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:38.022Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:09:27.975Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "349168732@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue3zrOzt1fVSgmjEoxoS7bMn-g8llk316B5b9PRlpYvWZSLLldYGag2pyC-ww"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Joe\n\nQ: Last Name\nA: Zhuo\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str) {\n    String result = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N) {\n    String result = \"\";\n    if (n < str.length()) {\n        String substring = str.substring(0, N);\n        result += reverse(substring);\n    }\n    else {\n        result += reverse(str);\n    }\n    result.toUpperCase();\n    return result;\n}   \n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public Boolean isAllSame(String str) {\n    char letter = str.charAt(0);\n    for (int i = 1; i  < str.length(); i++) {\n        if (!(str.charAt(i) == letter)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n * This method will count the number of times string Y appears in string X \n * \n * @param X string one\n * @param Y string two\n * @return the number of times the second string appears in the first string\n */\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Joe",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public Boolean isAllSame(String str) {\n    char letter = str.charAt(0);\n    for (int i = 1; i  < str.length(); i++) {\n        if (!(str.charAt(i) == letter)) {\n            return false;\n        }\n    }\n    return true;\n}",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"w.equals(x)": "false",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N) {\n    String result = \"\";\n    if (n < str.length()) {\n        String substring = str.substring(0, N);\n        result += reverse(substring);\n    }\n    else {\n        result += reverse(str);\n    }\n    result.toUpperCase();\n    return result;\n}   ",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"x.charAt(2) == y.charAt(2)": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n * This method will count the number of times string Y appears in string X \n * \n * @param X string one\n * @param Y string two\n * @return the number of times the second string appears in the first string\n */",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Zhuo",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str) {\n    String result = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-01T17:39:58.231Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-01T18:09:28.070Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQv6mFgLoV",
					"submittedAt": "2025-04-01T17:39:58.234Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:42.302Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:13:42.347Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufbaNyzMFgkyhPf8QyP4x5rebgpnILdnsskekOiRzSIFwwTJyBM1cBDI3FeAw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public string reverse (String str)\n{\n    String result = \"\";\n\n    for (int i = str.length() - 1; i > 0; i--)\n    {\n        char ch = str.charAt(i);\n\n        result += ch;\n    }\n\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN (String str, int N)\n{\n    String result = \"\";\n    String revStr = \"\";\n\n    if (str.length() > N)\n    {\n        String subStr = str.substring(0, 3);\n        revStr = reverse(subStr);\n    }\n    else\n    {\n        revStr = reverse(str);\n    }\n    return revStr.toUpperCase();\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame (String str)\n{\n    for (int i = 0; i < str.length() - 1; i++)\n    {\n        if (str.charAt(i) != str.charAt(i+1))\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**This program counts how many times string Y appears in string X.\n    *@param X the string that is checked for Y\n    *@param Y the string that is looked for in X\n    *@return c the number of times Y appears in X\n**/\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Abithan",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame (String str)\n{\n    for (int i = 0; i < str.length() - 1; i++)\n    {\n        if (str.charAt(i) != str.charAt(i+1))\n        {\n            return false;\n        }\n    }\n    return true;\n}",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN (String str, int N)\n{\n    String result = \"\";\n    String revStr = \"\";\n\n    if (str.length() > N)\n    {\n        String subStr = str.substring(0, 3);\n        revStr = reverse(subStr);\n    }\n    else\n    {\n        revStr = reverse(str);\n    }\n    return revStr.toUpperCase();\n}",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**This program counts how many times string Y appears in string X.\n    *@param X the string that is checked for Y\n    *@param Y the string that is looked for in X\n    *@return c the number of times Y appears in X\n**/",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"x.charAt(2) == y.charAt(2)": "true",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Paskaranathan",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public string reverse (String str)\n{\n    String result = \"\";\n\n    for (int i = str.length() - 1; i > 0; i--)\n    {\n        char ch = str.charAt(i);\n\n        result += ch;\n    }\n\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Isq_W0gkQv6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-01T17:39:42.105Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-01T18:13:42.450Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:42.109Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:46.240Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:39:50.142Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuevxhgzY8tF8iC3OkpMee58ZGwP-3PyPx9qi-buz5zCgrODZi2akiJEinKxmA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse (String str){\n    String reversed = \"\";\n    for(int i = str.length()-1; i >= 0; i--){\n        reversed = reversed + str.charAt(i);\n    }\n    return reversed;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN (String str, int N){\n    String changed = \"\";\n    if (N >= str.length()){\n        changed = str;\n    } else{\n        changed = str.substring(0, N);\n    }\n    changed = reverse(changed);\n    changed = changed.toUpperCase();\n    return changed;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str){\n    for (int i = 0; i < str.length()-1; i++){\n        if(str.charAt(i) != str.chatAt(i+1)){\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: This method determines the number of times string Y is found in string x\n@param X is the string where Y is searched for\n@param Y is the string that is looked for within X\n@return returns an int which is the number of times Y is found within x\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2 \n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Owen",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"w.equals(x)": "false",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str){\n    for (int i = 0; i < str.length()-1; i++){\n        if(str.charAt(i) != str.chatAt(i+1)){\n            return false;\n        }\n    }\n    return true;\n}",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN (String str, int N){\n    String changed = \"\";\n    if (N >= str.length()){\n        changed = str;\n    } else{\n        changed = str.substring(0, N);\n    }\n    changed = reverse(changed);\n    changed = changed.toUpperCase();\n    return changed;\n}",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "This method determines the number of times string Y is found in string x\n@param X is the string where Y is searched for\n@param Y is the string that is looked for within X\n@return returns an int which is the number of times Y is found within x",
							"x.charAt(2) == y.charAt(2)": "true",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Lee",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2 ",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse (String str){\n    String reversed = \"\";\n    for(int i = str.length()-1; i >= 0; i--){\n        reversed = reversed + str.charAt(i);\n    }\n    return reversed;\n}"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-01T17:39:51.069Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-04-01T18:39:50.275Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQv6mFgLoV",
					"submittedAt": "2025-04-01T17:39:51.072Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:50.212Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T17:59:15.639Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufmbgOBRlwGnRN_KXmKFiPXMiXecbU_hcR4gc8YNEAWl2iPbGk7Ju5o_or7kg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kian\n\nQ: Last Name\nA: Mistry\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse (String str)\n{\n    for (int i = str.length(); i > 0; i--)\n    {\n        return char charAt(i);\n    }\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN (String str, int N)\n{\n    String first3 = str.substring(0,N);\n    for (int i = N; i > 0; i--)\n    {\n        return char charAt(i);\n    }\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame (String str)\n{\n    for (int i = str.length(); i>0;i++)\n    {\n        if (char charAt (1) == char charAt(str.length))\n        {\n            return true;\n        }\n        return false;\n    }\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: The method returns the number of times a letter is repeated.\nThe method counts the number of times a letter is repeated within the word through the use of a counter and indexes.\nThe method's paramaters are a counter, a variable (i) replacying the word index's of a letter and then returns the number of times that letter is repeated within the word. \n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The number of parameters\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: a value that a method returns\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: true\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: false\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Kian",
							"w.substring(0,5).equals(z.substring(6))": "false",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame (String str)\n{\n    for (int i = str.length(); i>0;i++)\n    {\n        if (char charAt (1) == char charAt(str.length))\n        {\n            return true;\n        }\n        return false;\n    }\n}",
							"The result of a method is called": "a return value",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"w.equals(x)": "true",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN (String str, int N)\n{\n    String first3 = str.substring(0,N);\n    for (int i = N; i > 0; i--)\n    {\n        return char charAt(i);\n    }\n}",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "The method returns the number of times a letter is repeated.\nThe method counts the number of times a letter is repeated within the word through the use of a counter and indexes.\nThe method's paramaters are a counter, a variable (i) replacying the word index's of a letter and then returns the number of times that letter is repeated within the word. ",
							"x.charAt(2) == y.charAt(2)": "false",
							"All of the following are parts of a method signature except": "The number of parameters",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "a value that a method returns",
							"Last Name": "Mistry",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse (String str)\n{\n    for (int i = str.length(); i > 0; i--)\n    {\n        return char charAt(i);\n    }\n}"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-01T17:39:48.314Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-01T17:59:15.745Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQv6mFgLoV",
					"submittedAt": "2025-04-01T17:39:48.317Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:54.158Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:18:53.586Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueQ5gbLJ3V1zYPllIc6vJwCT4yn0ucYksRg2Qf477A2LWgEkKqqzQzqrFsPmA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str) {\n    String result = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        result += Character.toString(str.charAt(i));\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N) {\n    String firstN = \"\";\n    if (N>str.length()) {\n        firstN += str.substring(0, str.length());\n    } else {\n        firstN += str.substring(0, N);\n    }\n    String reverse = \"\";\n    for (int i = firstN.length() - 1; i >= 0; i--) {\n        reverse += Character.toString(firstN.charAt(i));\n    }\n    String upper = reverse.toUpperCase();\n    return upper;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str) {\n    char firstLetter = str.charAt(0);\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) != firstLetter) {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n * The method returns the number of times the second String appears in the first String.\n *\n *@param X The first String\n *@param Y The second String\n *@return The number of times the second String appears in the first String\n */\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 1\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Kelton",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"The result of a method is called": "a return value",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str) {\n    char firstLetter = str.charAt(0);\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) != firstLetter) {\n            return false;\n        }\n    }\n    return true;\n}",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N) {\n    String firstN = \"\";\n    if (N>str.length()) {\n        firstN += str.substring(0, str.length());\n    } else {\n        firstN += str.substring(0, N);\n    }\n    String reverse = \"\";\n    for (int i = firstN.length() - 1; i >= 0; i--) {\n        reverse += Character.toString(firstN.charAt(i));\n    }\n    String upper = reverse.toUpperCase();\n    return upper;\n}",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n * The method returns the number of times the second String appears in the first String.\n *\n *@param X The first String\n *@param Y The second String\n *@return The number of times the second String appears in the first String\n */",
							"x.charAt(2) == y.charAt(2)": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Kuan",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "1",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str) {\n    String result = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        result += Character.toString(str.charAt(i));\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ik7DJrAwQv6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-01T17:39:46.736Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-01T18:18:53.694Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:46.741Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:42:58.488Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T17:52:11.502Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuep1bVGif8u5UFyk-_QzvGsJ9Hy96j7LlwGiWszslkGjOcETS_ETIWYWGDVDA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str) {\n    String ans = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        ans += str.charAt(i);\n    }\n    return ans;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N) {\n    String ans2 = \"\";\n    if (N >= str.length()) {\n        ans2 = reverse(str);\n    } else {\n        ans2 = reverse(str.substring(0, N));\n    }\n    return ans2.toUpperCase();\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str) {\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) != str.charAt(0)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n* This returns the number of times the second string appears in the first string\n* @param String X This is the first string\n* @param String Y This is the second string\n* @return Returns the number of times String Y appears in String X\n*/\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Jiayu",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"w.equals(x)": "false",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str) {\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) != str.charAt(0)) {\n            return false;\n        }\n    }\n    return true;\n}",
							"The result of a method is called": "a return value",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N) {\n    String ans2 = \"\";\n    if (N >= str.length()) {\n        ans2 = reverse(str);\n    } else {\n        ans2 = reverse(str.substring(0, N));\n    }\n    return ans2.toUpperCase();\n}",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"x.charAt(2) == y.charAt(2)": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n* This returns the number of times the second string appears in the first string\n* @param String X This is the first string\n* @param String Y This is the second string\n* @return Returns the number of times String Y appears in String X\n*/",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Chen",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str) {\n    String ans = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        ans += str.charAt(i);\n    }\n    return ans;\n}"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I5qyc4Q4Qv6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-01T17:39:52.628Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-04-01T17:52:11.615Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:52.632Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:02.408Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:45:05.574Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufLMpIdpl8urXeLyOJHZ8BDFGLgTMROqdwCk8UDQMgoM8VxyCDWe6GSdOR8bA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Veznu\n\nQ: Last Name\nA: Premathas \n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: int index = str.length();\n\n//Create space to store characters\nString reversed = \" \" ;  \n\n//hello \n//1234\n//counts backward and collects characters backward\nfor (int x = index - 1; x >= 0;  x--)\n{\n    reversed += str.charAt(x);\n}\nreturn reversed ;  \n\n\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: //if number given is too big it is replaced w the string length \nif (N > str.length()) \n{\n    N = str.length(); \n}\n\nString statement = str.substring(0, N);\n    \n//Calls from previous method\nString reversedStatement = reverse(statement);\n\nreturn reversedStatement.toUpperCase();\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: //nothing to compare so return false\nif (str.length() == 0) {\n        return false; \n}\n\n//ddddddddd\n//asasasssss\nchar firstChar = str.charAt(0);\n\nfor(int x = 0; x < str.length() ; x ++) \n{\n    if(str.charAt(x) != firstChar )\n    {\n        return false;\n    }\n}\nreturn true;\n\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: @param X : the string that where the the # of appearance of parameter \"Y\" will be searched for  \n@param Y : the string that is being searched within the parameter \"X\"\n\n@return : Return the amount of times  the parameter \"Y\" is been seen throughout Parameter \"X\"\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Veznu",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "//nothing to compare so return false\nif (str.length() == 0) {\n        return false; \n}\n\n//ddddddddd\n//asasasssss\nchar firstChar = str.charAt(0);\n\nfor(int x = 0; x < str.length() ; x ++) \n{\n    if(str.charAt(x) != firstChar )\n    {\n        return false;\n    }\n}\nreturn true;\n",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "//if number given is too big it is replaced w the string length \nif (N > str.length()) \n{\n    N = str.length(); \n}\n\nString statement = str.substring(0, N);\n    \n//Calls from previous method\nString reversedStatement = reverse(statement);\n\nreturn reversedStatement.toUpperCase();",
							"x.charAt(2) == y.charAt(2)": "true",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "@param X : the string that where the the # of appearance of parameter \"Y\" will be searched for  \n@param Y : the string that is being searched within the parameter \"X\"\n\n@return : Return the amount of times  the parameter \"Y\" is been seen throughout Parameter \"X\"",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Premathas ",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "int index = str.length();\n\n//Create space to store characters\nString reversed = \" \" ;  \n\n//hello \n//1234\n//counts backward and collects characters backward\nfor (int x = index - 1; x >= 0;  x--)\n{\n    reversed += str.charAt(x);\n}\nreturn reversed ;  \n\n"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQv6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-01T17:39:49.027Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-01T18:45:05.731Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:49.031Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:06.904Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:07:44.455Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "349045377@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucJLZ3JMfI7kVCvvBh6XhyKKiTW2O4WqayAe35NI-dnfq4UCbeXV2HcrJhZQw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nathan\n\nQ: Last Name\nA: Ji\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str) {\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N) {\n    String result = \"\";\n\n    if (N > str.length()) {\n        N = str.length();\n    }\n    for (int i = N - 1; i >= 0; i--) {\n        result += Character.toUpperCase(str.charAt(i));\n    }\n    return result;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str) {\n    if(str.length() == 0) {\n         return true;\n    } //in case there is empty string coding bat style :)\n\n    char firstChar = str.charAt(0);\n\n    for (int i = 1; i < str.length(); i++) {\n        if (str.charAt(i) != firstChar) {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: //set c to 0\n//set i equal to when y occurs in string x\n//while loop to cycle through x until y appears\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Nathan",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"w.equals(x)": "false",
							"The result of a method is called": "a return value",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str) {\n    if(str.length() == 0) {\n         return true;\n    } //in case there is empty string coding bat style :)\n\n    char firstChar = str.charAt(0);\n\n    for (int i = 1; i < str.length(); i++) {\n        if (str.charAt(i) != firstChar) {\n            return false;\n        }\n    }\n    return true;\n}",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N) {\n    String result = \"\";\n\n    if (N > str.length()) {\n        N = str.length();\n    }\n    for (int i = N - 1; i >= 0; i--) {\n        result += Character.toUpperCase(str.charAt(i));\n    }\n    return result;\n}",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "//set c to 0\n//set i equal to when y occurs in string x\n//while loop to cycle through x until y appears",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"x.charAt(2) == y.charAt(2)": "false",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Ji",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str) {\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-01T17:39:48.440Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-01T18:07:44.603Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQv6mFgLoV",
					"submittedAt": "2025-04-01T17:39:48.444Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:10.879Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:48:31.347Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuePhJc7CQEk3g-wfkEjeHpAJ4JWb8ywKqvu5yVC4I0Vfx3NbFAmSvPv2Inykw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: \n\nPublic String reverse (String str)\n{\n    String result = \"\";\n    for(int i = 0; i < str.length() - 1; i++)\n    {\n        result = result + str.substring(str.length(), str.length() + 1)\n        str.length() += -1\n    }\n    return result;\n}\n        \n\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    String result = \"\";\n    if(N > str.length())\n    {\n        N = str.length();\n        for(int i = 0; i < N () - 1; i++)\n        {\n            result = result + str.substring(str.length(), str.length() + 1)\n            str.length() - 1;\n            result.toUpperCase();\n            return result; \n        }\n    }\n    String second = str.substring(0, N)\n    for(int i = 0; i < N; i++)\n    {\n        result = result + second.length(N, N + 1);\n        N = N - 1\n        result.toUpperCase();\n        return result; \n    }\n}\n    \n    \n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str) \n{\n    for(int i = 0; i < str.length(); i++)\n    {\n        if(str.charAt(i) == str.substring(0)\n        {\n            return true;\n        }\n    }\n    return false\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n* This method involves the use of two strings which the bigger one has Y being put inside of *  it to check how many times the string Y appears in X\n* @param = (x, y)\n* @return = the amount of times that the string Y appears in the string X\n\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The number of parameters\n\nQ: A method that doesn't return a value has what return type?\nA: null\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java string docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "null",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Clark",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str) \n{\n    for(int i = 0; i < str.length(); i++)\n    {\n        if(str.charAt(i) == str.substring(0)\n        {\n            return true;\n        }\n    }\n    return false\n}",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    String result = \"\";\n    if(N > str.length())\n    {\n        N = str.length();\n        for(int i = 0; i < N () - 1; i++)\n        {\n            result = result + str.substring(str.length(), str.length() + 1)\n            str.length() - 1;\n            result.toUpperCase();\n            return result; \n        }\n    }\n    String second = str.substring(0, N)\n    for(int i = 0; i < N; i++)\n    {\n        result = result + second.length(N, N + 1);\n        N = N - 1\n        result.toUpperCase();\n        return result; \n    }\n}\n    \n    ",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n* This method involves the use of two strings which the bigger one has Y being put inside of *  it to check how many times the string Y appears in X\n* @param = (x, y)\n* @return = the amount of times that the string Y appears in the string X\n",
							"x.charAt(2) == y.charAt(2)": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java string docs",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The number of parameters",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Chen",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "\n\nPublic String reverse (String str)\n{\n    String result = \"\";\n    for(int i = 0; i < str.length() - 1; i++)\n    {\n        result = result + str.substring(str.length(), str.length() + 1)\n        str.length() += -1\n    }\n    return result;\n}\n        \n"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"id": "Cg0Ik_u42h8Qv6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-01T17:39:44.125Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-01T18:48:31.490Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:44.129Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:14.702Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:08:43.813Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuftpmgSb-G20G5rr48IIwJKdZzq4t1417UxmF8iKTm2FdCNpsSwcwI_eBJ73w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Edward\n\nQ: Last Name\nA: Wang\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse (String str)\n{\n    String reversed = \"\";\n    length = str.length();\n    \n    for (int i = length ; i > 0 ; i--)\n    {\n        char c = str.charAt(i);\n        reversed += c;\n    }\n\n    return reversed;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN (String str, int N)\n{\n    String newStr = str.substring (0, N);\n    newStr = reverse (newStr);\n    newStr = newStr.toUpperCase();\n    \n    return newStr;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame (String str)\n{\n    char ref = str.charAt(0);\n    for (int i = 0 ; i < str.length() ; i++)\n    {\n        char c = str.charAt(i);\n        if (ref != c)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /*\n * Returns the number of times string Y occurs in string X.\n * \n * @paramX: The string that is being searched through.\n * @paramY: The string that is being searched for.\n * @return: Returns an integer which represents the number of occurrences of Y inside of X.\n *\n */\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Edward",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame (String str)\n{\n    char ref = str.charAt(0);\n    for (int i = 0 ; i < str.length() ; i++)\n    {\n        char c = str.charAt(i);\n        if (ref != c)\n        {\n            return false;\n        }\n    }\n    return true;\n}",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN (String str, int N)\n{\n    String newStr = str.substring (0, N);\n    newStr = reverse (newStr);\n    newStr = newStr.toUpperCase();\n    \n    return newStr;\n}",
							"x.charAt(2) == y.charAt(2)": "false",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/*\n * Returns the number of times string Y occurs in string X.\n * \n * @paramX: The string that is being searched through.\n * @paramY: The string that is being searched for.\n * @return: Returns an integer which represents the number of occurrences of Y inside of X.\n *\n */",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Wang",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse (String str)\n{\n    String reversed = \"\";\n    length = str.length();\n    \n    for (int i = length ; i > 0 ; i--)\n    {\n        char c = str.charAt(i);\n        reversed += c;\n    }\n\n    return reversed;\n}"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-01T17:40:05.451Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-04-01T18:08:43.922Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQv6mFgLoV",
					"submittedAt": "2025-04-01T17:40:05.456Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:18.607Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:12:49.729Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc5gHs8Qst1HFh3N5TaTKxyTrAM6hpNQV4K-FEkN9lxv_VbZPPrck_Ew7A58w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse (String str)\n{\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i--)\n    {\n            char cur = str.charAt(i);\n            result += cur;\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    if(N > str.length())\n    {\n        String reversed1 = reverse(str);\n        return reversed1.toUpperCase();\n    }\n    String stringPart = str.substring(0, N);\n    String reversed2 = reverse(stringPart);\n    String upperCaseReversed = reversed2.toUpperCase();\n    return upperCaseReversed;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame (String str)\n{\n    char first = str.charAt (0);\n    for(int i = 1; i < str.length(); i++)\n    {\n        char cur = str.charAt(i);\n        if(first != cur)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /** \n * This returns the number of times a given substring appears in the given string\n * @param X The String\n * @param Y The Substring \n * @return The number of time Y occurs in X\n */\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: false",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Leo ",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame (String str)\n{\n    char first = str.charAt (0);\n    for(int i = 1; i < str.length(); i++)\n    {\n        char cur = str.charAt(i);\n        if(first != cur)\n        {\n            return false;\n        }\n    }\n    return true;\n}",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    if(N > str.length())\n    {\n        String reversed1 = reverse(str);\n        return reversed1.toUpperCase();\n    }\n    String stringPart = str.substring(0, N);\n    String reversed2 = reverse(stringPart);\n    String upperCaseReversed = reversed2.toUpperCase();\n    return upperCaseReversed;\n}",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"w.endsWith(x.toLowerCase().trim())": "false",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/** \n * This returns the number of times a given substring appears in the given string\n * @param X The String\n * @param Y The Substring \n * @return The number of time Y occurs in X\n */",
							"x.charAt(2) == y.charAt(2)": "false",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "So",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse (String str)\n{\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i--)\n    {\n            char cur = str.charAt(i);\n            result += cur;\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-04-01T17:39:51.163Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-04-01T18:12:49.845Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQv6mFgLoV",
					"submittedAt": "2025-04-01T17:39:51.168Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:22.593Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:26:57.015Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudPshO1YbE_Eb2nKAEQCXvCv2I_72sMbMsQUuhV4bR0GqhHnsoBm78YurTGeg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: String reverse = \"\";\nfor (int i = 0 ; i <str.length(); i++) \n{\n    reverse = str.charAt(i) + reverse;\n}\nreturn reverse;\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: if (N <= str.length()) \n{\n    return reverse(str.substring(str.length() - N)).toUpperCase();\n}\nreturn reverse(str.substring(0)).toUpperCase();\n\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: for (int i = 0; i < str.length() - 1; i++) \n{\n    if (str.charAt(i) != str.charAt(i + 1)) \n    {\n            return false;\n    }\n}\nreturn true;\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n * This method counts the number of occurrences of string Y in string X\n * \n * @param X is the string to search in\n * @param Y is the substring to search for\n * @return the number of occurrences of Y in X\n */\n\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Mark",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"The result of a method is called": "a return value",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "for (int i = 0; i < str.length() - 1; i++) \n{\n    if (str.charAt(i) != str.charAt(i + 1)) \n    {\n            return false;\n    }\n}\nreturn true;",
							"w.equals(x)": "false",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "if (N <= str.length()) \n{\n    return reverse(str.substring(str.length() - N)).toUpperCase();\n}\nreturn reverse(str.substring(0)).toUpperCase();\n",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n * This method counts the number of occurrences of string Y in string X\n * \n * @param X is the string to search in\n * @param Y is the substring to search for\n * @return the number of occurrences of Y in X\n */\n",
							"x.charAt(2) == y.charAt(2)": "false",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Ku",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "String reverse = \"\";\nfor (int i = 0 ; i <str.length(); i++) \n{\n    reverse = str.charAt(i) + reverse;\n}\nreturn reverse;"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-01T17:40:01.209Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-04-01T18:26:57.137Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQv6mFgLoV",
					"submittedAt": "2025-04-01T17:40:01.211Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:26.439Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:45:35.353Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf-Il8SbFWCewaRcXIIJtBPzWKa3k1wJf6C374_5kjm1kUBdQQNXkj89gBaVA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse (String str) \n{\n    int length = str.length() - 1 ;\n    String word = \"\"; \n    for (int i = length; i >= 0; i--)\n    {\n        char letter = str.chatAt(i); \n        word += letter; \n    }\n    return word;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN (String str, int N)\n{\n    int length = str.length();\n    if (N > length) \n    {\n        N == length; \n    }\n    String text = str.substring(N);\n    String reverseText = reverse(text);\n    String upperText = reverseText.toUpperCase();\n    return upperText; \n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    int length = str.length();\n    int count = 0;\n    char first = str.charAt(0);\n    for (int i = 0; i < length; i++)\n    {\n        char letter = str.charAt(i); \n        if (letter == first)\n        {\n            count++;\n        }\n    }\n    if ( count == length)\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    } \n} \n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n *This method return the amount of string Y appear in string X\n *\n *@param X the String that we detect String Y in \n *@param Y the String that we detect of from String X\n *@return the amount of time String Y appear in String X\n */\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: false\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Carmen",
							"w.substring(0,5).equals(z.substring(6))": "false",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"w.equals(x)": "false",
							"The result of a method is called": "a return value",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    int length = str.length();\n    int count = 0;\n    char first = str.charAt(0);\n    for (int i = 0; i < length; i++)\n    {\n        char letter = str.charAt(i); \n        if (letter == first)\n        {\n            count++;\n        }\n    }\n    if ( count == length)\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    } \n} ",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN (String str, int N)\n{\n    int length = str.length();\n    if (N > length) \n    {\n        N == length; \n    }\n    String text = str.substring(N);\n    String reverseText = reverse(text);\n    String upperText = reverseText.toUpperCase();\n    return upperText; \n}",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n *This method return the amount of string Y appear in string X\n *\n *@param X the String that we detect String Y in \n *@param Y the String that we detect of from String X\n *@return the amount of time String Y appear in String X\n */",
							"x.charAt(2) == y.charAt(2)": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Cheung",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse (String str) \n{\n    int length = str.length() - 1 ;\n    String word = \"\"; \n    for (int i = length; i >= 0; i--)\n    {\n        char letter = str.chatAt(i); \n        word += letter; \n    }\n    return word;\n}"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"id": "Cg0I0ruNqlsQv6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-01T17:39:43.507Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-04-01T18:56:31.057Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:43.510Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:30.401Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:40:53.020Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufAdQFYMH_RBXCCW6nEe8klg3uyEa1NHLR__DAKOjlXLgaAROz-ueSNFXCmsw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena\n\nQ: Last Name\nA: Godek\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str)\n{\n    String reverseStr = \"\";\n    for(int i = str.length(); i < 0; i--)\n    {\n        char c = str.charAt(i);\n        reverseStr += c;\n    }\n        return reverseStr;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    String reversedStr = \"\";\n    String upperCaseStr = \"\";\n\n    if(N > str.length())\n    {\n        reversedStr = reverse(str);\n    }\n    else\n    {\n         reversedStr = reverse(str.substring(0, N));\n    }\n    for(int i = 0; i < reversedStr.length(); i++)\n    {\n        char c = reversedStr.charAt(i)\n         upperCaseStr += Character.toUpperCase(c);\n    }\n    return upperCaseStr;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    int count = 0;\n    for(int i = 0; i < str.length() - 1; i++)\n    {\n        char c = str.charAt(i);\n        char c2 = str.charAt(i + 1);\n        if(c == c2 )\n        {\n            count ++;\n        }   \n    }\n    if(count == str.length() - 1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n* This code shows how many times String Y appears in String X\n*@parem X is the string where the code is looking for Y\n*@parem Y is the string that is being looked for in X\n*@return c shows an int of how many times Y appears in X\n*/\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Sena",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"w.equals(x)": "false",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    int count = 0;\n    for(int i = 0; i < str.length() - 1; i++)\n    {\n        char c = str.charAt(i);\n        char c2 = str.charAt(i + 1);\n        if(c == c2 )\n        {\n            count ++;\n        }   \n    }\n    if(count == str.length() - 1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    String reversedStr = \"\";\n    String upperCaseStr = \"\";\n\n    if(N > str.length())\n    {\n        reversedStr = reverse(str);\n    }\n    else\n    {\n         reversedStr = reverse(str.substring(0, N));\n    }\n    for(int i = 0; i < reversedStr.length(); i++)\n    {\n        char c = reversedStr.charAt(i)\n         upperCaseStr += Character.toUpperCase(c);\n    }\n    return upperCaseStr;\n}",
							"x.charAt(2) == y.charAt(2)": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n* This code shows how many times String Y appears in String X\n*@parem X is the string where the code is looking for Y\n*@parem Y is the string that is being looked for in X\n*@return c shows an int of how many times Y appears in X\n*/",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Godek",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str)\n{\n    String reverseStr = \"\";\n    for(int i = str.length(); i < 0; i--)\n    {\n        char c = str.charAt(i);\n        reverseStr += c;\n    }\n        return reverseStr;\n}"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-01T17:39:47.173Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-04-01T18:40:53.195Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQv6mFgLoV",
					"submittedAt": "2025-04-01T17:39:47.176Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:34.127Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:40:06.859Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc7fp_T7u4kVwSkl8H68X3UXx0H9YsX6u9XlhbKXs52dIlYyOJFXu0zBMLAzQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str) {\n    String result = \"\";\n    for(int i = str.length(); i > 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N) {\n    String result = \"\";\n    if(N > str.length()) {\n        N = str.length();\n    }\n    for(int i = N; i > 0; i--) {\n        result += str.toUpperCase(charAt(i));\n    }\n    return result;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str) {\n    char index = str.charAt(0);\n    for (int i = 1; i < str.length(); i++) {\n        if (str.charAt(i) != index) {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n * Counts the number of occurrences of substring Y in string X.\n * \n * @param X is the main string to search for the amount of times Y appears.\n * @param Y is the substring to find within X\n * @return the number of times Y appears in X\n */\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java string docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Saiful",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str) {\n    char index = str.charAt(0);\n    for (int i = 1; i < str.length(); i++) {\n        if (str.charAt(i) != index) {\n            return false;\n        }\n    }\n    return true;\n}",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N) {\n    String result = \"\";\n    if(N > str.length()) {\n        N = str.length();\n    }\n    for(int i = N; i > 0; i--) {\n        result += str.toUpperCase(charAt(i));\n    }\n    return result;\n}",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n * Counts the number of occurrences of substring Y in string X.\n * \n * @param X is the main string to search for the amount of times Y appears.\n * @param Y is the substring to find within X\n * @return the number of times Y appears in X\n */",
							"x.charAt(2) == y.charAt(2)": "true",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java string docs",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Shaik",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str) {\n    String result = \"\";\n    for(int i = str.length(); i > 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"id": "Cg4Iwe6fnb8OEL-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-01T17:40:00.170Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-04-01T18:40:06.965Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:40:00.174Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:38.212Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:32:22.186Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "350797049@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucAv3ExxQfP2B3TZ0nHQ-UvM1t0CTTGlTV2tgHQiid-GldJ1wFDLwwGgHLuWQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: John\n\nQ: Last Name\nA: Ning\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse (String str)\n{\n    \n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{    \n    static char toUpperCase(char ch)\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    int lower String toLowerCase(str)\n    if str == lower\n    {\n        if \n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /* \n *This method is to find the amount of a given characters in a certain string.\n *\n *@param X: is first string, this is what the method will analyze for the characters\n *@param Y: is second string, it is what the method will look through to find in string X\n *@return: how much of a given string is in another string\n */\n\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: false\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "John",
							"w.substring(0,5).equals(z.substring(6))": "false",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"w.equals(x)": "false",
							"The result of a method is called": "a return value",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    int lower String toLowerCase(str)\n    if str == lower\n    {\n        if \n}",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{    \n    static char toUpperCase(char ch)",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"x.charAt(2) == y.charAt(2)": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/* \n *This method is to find the amount of a given characters in a certain string.\n *\n *@param X: is first string, this is what the method will analyze for the characters\n *@param Y: is second string, it is what the method will look through to find in string X\n *@return: how much of a given string is in another string\n */\n",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Ning",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse (String str)\n{\n    "
						}
					},
					"late": false,
					"studentName": "John Ning",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-04-01T17:39:59.298Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-04-01T18:32:22.312Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:59.301Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:42.064Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:29:42.440Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudJVfJQ3alx4xgXPwKuhJ5MBfXdriALdn9SdixzTGGOwyspmilSjuW9lO3Z3A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA:      String result = \"\";\n     for (int i = str.length(); i > 0; i--)\n     {\n          char c = str.charAt(i);\n          result+=c;\n     }\n     return result;\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA:    \n     String upperCaseLetters= str.toUpperCase;\n     if (N > str.length())\n     {\n          N = str.length();\n     }\n     for (int i=0; i < N; i++)\n     {\n          upperCaseResult+= upperCaseLetters.charAt(i);\n     }\n     String finalResult= reverse(upperCaseResult);\n          \n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA:      boolean result = true;\n     for (int i = 0; i < str.length(); i++)\n     {\n          result = str.charAt(i) == str.charAt(0);\n     }\n\n     return result;\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n *\n *methodA will count the number of times a specific string repeats within a specific string\n *@param X is the general word that will be checked for the specified strings\n *@param Y is the specific string that will be checked for in the X word\n *@return the number of times Y appears in X\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Nereyal",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"The result of a method is called": "a return value",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "     boolean result = true;\n     for (int i = 0; i < str.length(); i++)\n     {\n          result = str.charAt(i) == str.charAt(0);\n     }\n\n     return result;",
							"w.equals(x)": "false",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "   \n     String upperCaseLetters= str.toUpperCase;\n     if (N > str.length())\n     {\n          N = str.length();\n     }\n     for (int i=0; i < N; i++)\n     {\n          upperCaseResult+= upperCaseLetters.charAt(i);\n     }\n     String finalResult= reverse(upperCaseResult);\n          ",
							"x.charAt(2) == y.charAt(2)": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n *\n *methodA will count the number of times a specific string repeats within a specific string\n *@param X is the general word that will be checked for the specified strings\n *@param Y is the specific string that will be checked for in the X word\n *@return the number of times Y appears in X",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Jeyakumar",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "     String result = \"\";\n     for (int i = str.length(); i > 0; i--)\n     {\n          char c = str.charAt(i);\n          result+=c;\n     }\n     return result;"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-01T17:39:49.351Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-04-01T18:29:42.532Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:49.354Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:46.126Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:09:22.873Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueXZewVHD0rz450l4YjeMFqK-p90sn_7N6dwKPW4WCEcCxIQ2ynM5F-Ld-TSw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str) {\n    char cur = ' ';\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i--) {\n        cur = str.charAt(i);\n        result += cur; \n    }\n    return result; \n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N) {\n    String result = \"\";\n    if(n > str.length()) {\n        result = reverse(str);\n    } else {\n        String n = str.substring(0, N + 1); \n        result = reverse(n);\n    }\n    return result;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str) {\n    boolean result = true; \n    char cur = ' ';\n    char test = str.charAt(0);\n    for(int i = 0; i < str.length(); i++) {\n        cur = str.charAt(i)\n        if(cur != test) {\n            result = false; \n        }\n    }\n    return result; \n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n * Method finds how many times the string Y appears in X\n * @param1 The string that is used to find how many times Y appears in it \n * @param2 The string that is looked for in X\n * @return Returns the number of times Y appears in X\n*/\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: false\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Cayden",
							"w.substring(0,5).equals(z.substring(6))": "false",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"The result of a method is called": "a return value",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str) {\n    boolean result = true; \n    char cur = ' ';\n    char test = str.charAt(0);\n    for(int i = 0; i < str.length(); i++) {\n        cur = str.charAt(i)\n        if(cur != test) {\n            result = false; \n        }\n    }\n    return result; \n}",
							"w.equals(x)": "false",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N) {\n    String result = \"\";\n    if(n > str.length()) {\n        result = reverse(str);\n    } else {\n        String n = str.substring(0, N + 1); \n        result = reverse(n);\n    }\n    return result;\n}",
							"x.charAt(2) == y.charAt(2)": "false",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n * Method finds how many times the string Y appears in X\n * @param1 The string that is used to find how many times Y appears in it \n * @param2 The string that is looked for in X\n * @return Returns the number of times Y appears in X\n*/",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Chiu",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str) {\n    char cur = ' ';\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i--) {\n        cur = str.charAt(i);\n        result += cur; \n    }\n    return result; \n}"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-01T17:39:57.477Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-01T18:09:22.986Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:57.479Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:50.247Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:46:25.122Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufFWvQaU13pQfdf72rsZI76V8c1mqeaaiFG-R3Q8YPsjSA6DwUdY15KPR0R2g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: String result = \"\";\nfor(int i<str.length(); i>=0(); i--)\n{\n    char cur = str.charAt(i);\n    result += cur; \n}\nreturn result; \n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: if( N >=str.length() )\n{\n    N = str.length();\n}\nString result = \"\";\nfor(int i< N;  i>=0; i--)\n{\n    char cur = str.charAt(i);\n    char upperCur = Character.toUpperCase(cur);\n    result += upperCur; \n}\nreturn result;\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: char firstChar = str.indexOf(0);\nchar upperFirstChar = Character. toUpperCase(firstChar);\nfor(int i=0; i<str.length(); i++)\n{\n    char cur = str.charAt(i);\n    char upperCur = Character.toUpperCase(cur);\n    if( upperCur != upperFirstChar)\n    {\n         return false; \n    }\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n* find the first string Y in the string X\n* if string Y is found in string X\n* scan through the rest of the string x and keep finding string Y\n* repeat the process until there is no more string Y in string X\n*\n* @param X: the string that may include string Y\n* @paramY: the string that we are finding in string X\n* @return: the number of string Y found in String X\n*/\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The number of parameters\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: true\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Owen",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"w.equals(x)": "true",
							"The result of a method is called": "a return value",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "char firstChar = str.indexOf(0);\nchar upperFirstChar = Character. toUpperCase(firstChar);\nfor(int i=0; i<str.length(); i++)\n{\n    char cur = str.charAt(i);\n    char upperCur = Character.toUpperCase(cur);\n    if( upperCur != upperFirstChar)\n    {\n         return false; \n    }\n}",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "if( N >=str.length() )\n{\n    N = str.length();\n}\nString result = \"\";\nfor(int i< N;  i>=0; i--)\n{\n    char cur = str.charAt(i);\n    char upperCur = Character.toUpperCase(cur);\n    result += upperCur; \n}\nreturn result;",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n* find the first string Y in the string X\n* if string Y is found in string X\n* scan through the rest of the string x and keep finding string Y\n* repeat the process until there is no more string Y in string X\n*\n* @param X: the string that may include string Y\n* @paramY: the string that we are finding in string X\n* @return: the number of string Y found in String X\n*/",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"x.charAt(2) == y.charAt(2)": "false",
							"All of the following are parts of a method signature except": "The number of parameters",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Kung",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "String result = \"\";\nfor(int i<str.length(); i>=0(); i--)\n{\n    char cur = str.charAt(i);\n    result += cur; \n}\nreturn result; "
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-01T17:39:41.057Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-01T18:46:25.226Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:41.060Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:54.508Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:17:57.569Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "440021905@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuew9WqDQEF9gDBhB3OzSK8P-pZPlkbwZs3wjMn413QaKTp36BOYUX-qqOYOtg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clifton\n\nQ: Last Name\nA: Lin\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str){\n    String result = \" \";\n    \n    for(int i = str.length(); i > 0; i - -)\n    {\n        char c = charAt(i);\n        result + c; \n    }\n    return result;\n} \n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    result = \" \";\n    for(int i = N - 1; i > 0; i - -)\n    {\n        char c = charAt(i);\n        Character.toUpperCase(c);\n        result + c;\n    }\n    return result;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    boolean result = false;\n    for(int i = 0; i < str.length(); i++)\n    {\n        if(charAt(i) != charAt(0))\n        {\n            break;\n        }\n        else\n        {\n            result = true;\n        }\n    }\n    return result;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: The method returns the numbers of String Y inside of String X. \n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: null\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: false\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: false\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "null",
							"w.length() == 5": "false",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Clifton",
							"w.substring(0,5).equals(z.substring(6))": "false",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    boolean result = false;\n    for(int i = 0; i < str.length(); i++)\n    {\n        if(charAt(i) != charAt(0))\n        {\n            break;\n        }\n        else\n        {\n            result = true;\n        }\n    }\n    return result;\n}",
							"w.equals(x)": "false",
							"The result of a method is called": "a return value",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    result = \" \";\n    for(int i = N - 1; i > 0; i - -)\n    {\n        char c = charAt(i);\n        Character.toUpperCase(c);\n        result + c;\n    }\n    return result;\n}",
							"x.charAt(2) == y.charAt(2)": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "The method returns the numbers of String Y inside of String X. ",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Lin",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str){\n    String result = \" \";\n    \n    for(int i = str.length(); i > 0; i - -)\n    {\n        char c = charAt(i);\n        result + c; \n    }\n    return result;\n} "
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-01T17:39:46.428Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-04-01T18:17:57.670Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:46.431Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:43:58.466Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:37:21.597Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudOQ1DbjOl_o6FOu2lso9gax1inDyo-eMQpq6UPGcbx4wimWInZnNpTzDE9Dg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str)\n{\n    String result = \"\";\n    for (int i = str.length() - 1; i >= 0; i-- )\n    {\n        char addIn = str.charAt(i);\n        result += addIn;\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    int length = str.length();\n    if (length < N)\n    {\n        N = length;\n    }\n    String stepOne = str.substring(0, N);\n    String stepTwo = reverse(stepOne);\n    String result = stepTwo.toUppercase();\n    return result;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    char checker = str.charAt(0);\n    for (int i = 0; i < str.length(); i++)\n    {\n        char checking = str.charAt(i);\n        if (checker != checking)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: /**\n*Given two strings, X and Y\n*This method returns how many times does string Y occur in String X\n/\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The number of parameters\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Jennifer",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    char checker = str.charAt(0);\n    for (int i = 0; i < str.length(); i++)\n    {\n        char checking = str.charAt(i);\n        if (checker != checking)\n        {\n            return false;\n        }\n    }\n    return true;\n}",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    int length = str.length();\n    if (length < N)\n    {\n        N = length;\n    }\n    String stepOne = str.substring(0, N);\n    String stepTwo = reverse(stepOne);\n    String result = stepTwo.toUppercase();\n    return result;\n}",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "/**\n*Given two strings, X and Y\n*This method returns how many times does string Y occur in String X\n/",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"x.charAt(2) == y.charAt(2)": "false",
							"All of the following are parts of a method signature except": "The number of parameters",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Zheng",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str)\n{\n    String result = \"\";\n    for (int i = str.length() - 1; i >= 0; i-- )\n    {\n        char addIn = str.charAt(i);\n        result += addIn;\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"id": "Cg4I7ZHxyucSEL-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-01T17:39:47.667Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-04-01T18:37:21.693Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:47.673Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:03.027Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:40:15.068Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudYPMaokdf23vW0XrOXJlhnp-EhlJFEfjo6kN03wq5NKkdJovXuto9zicmaDw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: int length = str.length();\nString results = \"\";\nfor(int i = 0; i < length; i++)\n{\n    int c = length - i;\n    char last = str.charAt(c);\n    results += last;\n}\nreturn results;\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: if (n >= str.length())\n{\n    reverse(str);\n}\nelse\n{\n    str = str.substring(0,n);\n    reverse(str);\n}\nString finals = str.toUpperCase();\nreturn finals;\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: char first = str.charAt(0);\nint new = 0;\nwhile(true)\n{\n    if(new == str.length();\n    {\n        break;\n        return true;\n    }\n    int check = str.indexOf(first);\n    if(check == -1)\n    {\n        break;\n    }\n    new++;\n    str = str.substring(new);\n }\n    return false;\n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: //a method of count how many times does a word exist; \n@param X equals the String. that we have to count how many times of Y exist in this String\n@return c, the count of times\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: false\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: false",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Lionson",
							"w.substring(0,5).equals(z.substring(6))": "false",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "char first = str.charAt(0);\nint new = 0;\nwhile(true)\n{\n    if(new == str.length();\n    {\n        break;\n        return true;\n    }\n    int check = str.indexOf(first);\n    if(check == -1)\n    {\n        break;\n    }\n    new++;\n    str = str.substring(new);\n }\n    return false;",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "if (n >= str.length())\n{\n    reverse(str);\n}\nelse\n{\n    str = str.substring(0,n);\n    reverse(str);\n}\nString finals = str.toUpperCase();\nreturn finals;",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "//a method of count how many times does a word exist; \n@param X equals the String. that we have to count how many times of Y exist in this String\n@return c, the count of times",
							"x.charAt(2) == y.charAt(2)": "true",
							"w.endsWith(x.toLowerCase().trim())": "false",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Meng",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "int length = str.length();\nString results = \"\";\nfor(int i = 0; i < length; i++)\n{\n    int c = length - i;\n    char last = str.charAt(c);\n    results += last;\n}\nreturn results;"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-01T17:39:49.167Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-04-01T18:40:15.231Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:49.170Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:07.465Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:15:20.078Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440030068@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue4KnttBUOLpk8m7RBh4yxESA9Z8y_b0ZK6fNUn6eFOr8W5_hvt8ODAKKd-GA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Moses\n\nQ: Last Name\nA: He\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str)\n{\n    String result = \" \" ;\n    for(int i=str.length() ; i> 0 ; i-- )\n    {\n    result+=str.charAt(i) ;\n    }\n    return result ;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    if(N > str.length())\n    {\n       String result1 = reverse( str ) ;\n       return result1.toUpperCase() ;\n    }\n    else\n    {\n        String result2 = \" \" ;\n        for(int i=N ; i> 0 ; i-- )\n        {\n            result2+=str.charAt(i) ;\n        }\n        return result2.toUpperCase() ;\n    }\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    String copyOf = \" \" ;\n    for(int i=0 ; i<str.length() ; i++)\n    {\n        copyOf+= str.charAt(i) ;\n    }\n    return copyOf.equals(str) ;\n}\n        \n        \n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: public int methodA(String X, String Y)\n{\n    int c =0 ;\n    int i = x.indexOf(Y);\n/* here we let our \"result\" be c, and it is equal to 0*/\n    while(i>=0)\n    {\n\n/* we want to see how many \"Y\" is in the String \"X\"; so we add 1 to c every time if an \"Y\" is in \"X\"\n* set i to be the current index of \"Y\"; then exclude previous part before this index and keep going until next \"Y\" appears; and repeat */\n \n       c++\n        X=X.substring(i+1) ;\n        i=X.indexOf(Y);\n    }\n\n/* return final value*/\n    return c ;\n}\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 1\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Moses",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    String copyOf = \" \" ;\n    for(int i=0 ; i<str.length() ; i++)\n    {\n        copyOf+= str.charAt(i) ;\n    }\n    return copyOf.equals(str) ;\n}\n        \n        ",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    if(N > str.length())\n    {\n       String result1 = reverse( str ) ;\n       return result1.toUpperCase() ;\n    }\n    else\n    {\n        String result2 = \" \" ;\n        for(int i=N ; i> 0 ; i-- )\n        {\n            result2+=str.charAt(i) ;\n        }\n        return result2.toUpperCase() ;\n    }\n}",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "public int methodA(String X, String Y)\n{\n    int c =0 ;\n    int i = x.indexOf(Y);\n/* here we let our \"result\" be c, and it is equal to 0*/\n    while(i>=0)\n    {\n\n/* we want to see how many \"Y\" is in the String \"X\"; so we add 1 to c every time if an \"Y\" is in \"X\"\n* set i to be the current index of \"Y\"; then exclude previous part before this index and keep going until next \"Y\" appears; and repeat */\n \n       c++\n        X=X.substring(i+1) ;\n        i=X.indexOf(Y);\n    }\n\n/* return final value*/\n    return c ;\n}",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"x.charAt(2) == y.charAt(2)": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "He",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "1",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str)\n{\n    String result = \" \" ;\n    for(int i=str.length() ; i> 0 ; i-- )\n    {\n    result+=str.charAt(i) ;\n    }\n    return result ;\n}"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-04-01T17:39:40.650Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-04-01T18:15:20.165Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IuZzI4aUTEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:39:40.674Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:11.445Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"studentId": "102479132795602540628",
					"feedback": "",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 22,
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:10:59.284Z",
								"totalFormResponses": 26,
								"formTitle": "Unit 3 Test: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuehY37o-GIRvaX0eM44AbBUF4eEbMB9JA6gMxfZ7eKPHi9a7Krj4rFZ-vWLmg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang \n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA:     String reversedWord = \"\";\n    for (int i = str.length; i > 0; i- -)\n    {\n        char c = str.charAt(i);\n        reversedWord += c;\n    } \n\n    return reversedWord;\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: String result = \"\";    \nx =  reverse.substring(0, N);\n    for (int i = x.length; i > 0; i--)\n    {\n        char c = x.charAt(i);\n        toUpperCase(c);\n        result += c;\n    }\n    return result;\n\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: \n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: This code takes in 2 strings \n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: \n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: \n\nQ: All of the following are parts of a method signature except\nA: The number of parameters\n\nQ: A method that doesn't return a value has what return type?\nA: All methods must return a value\n\nQ: A method parameter is\nA: the identifier(s) given to data that gets passed into the method\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: Java character docs\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IllegalArgumentException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: false\n\nQ: w.equals(x)\nA: true\n\nQ: x.charAt(2) == y.charAt(2)\nA: false\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: false",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "All methods must return a value",
							"w.length() == 5": "false",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Steven",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "",
							"w.equals(x)": "true",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IllegalArgumentException",
							"The result of a method is called": "a return value",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "String result = \"\";    \nx =  reverse.substring(0, N);\n    for (int i = x.length; i > 0; i--)\n    {\n        char c = x.charAt(i);\n        toUpperCase(c);\n        result += c;\n    }\n    return result;\n",
							"x.charAt(2) == y.charAt(2)": "false",
							"w.endsWith(x.toLowerCase().trim())": "false",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "This code takes in 2 strings ",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "Java character docs",
							"All of the following are parts of a method signature except": "The number of parameters",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the identifier(s) given to data that gets passed into the method",
							"Last Name": "Wang ",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "",
							"1.  Implement this method that reverses the given string and returns it.": "    String reversedWord = \"\";\n    for (int i = str.length; i > 0; i- -)\n    {\n        char c = str.charAt(i);\n        reversedWord += c;\n    } \n\n    return reversedWord;"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-04-01T17:42:36.503Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-04-01T18:10:59.409Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEL-phYC6FQ",
					"submittedAt": "2025-04-01T17:42:36.535Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:15.526Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849407",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"questionCount": 22,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T18:47:24.258Z",
								"totalFormResponses": 26,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 3 Test: Strings and Methods",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud4IUZfx3Sv_0LHLtrR9oV1935fK-Cw1SJvXKmORmy2dr9t5p3rN9D0I9RBRQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: 1.  Implement this method that reverses the given string and returns it.\nA: public String reverse(String str)\n{\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i --)\n    {\n        char letter = str.charAt(i);\n        result += letter;\n    }\n    return result;\n}\n\nQ: 2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.\nA: public String reverseUpperN(String str, int N)\n{\n    String word = \"\";\n    for(int i = 0; i < N; i++)\n    {\n        char ch = str.charAt(i);\n        char upperCh = Character.toUpperCase(ch);\n        word += upperCh;\n    }\n    String word = reverse(String word);\n    return word;\n}\n\nQ: 3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.\nA: public boolean isAllSame(String str)\n{\n    while(true)\n    {\n        for(int i = 0; i < str.length(); i++)\n        {\n            char ch1 = str.charAt(i);\n            char ch2 = str.charAt(i +1);\n            if(ch1 != ch2)\n            {\n                break;\n                return false;\n            }\n        }\n    }\n    return; \n}\n \n\nQ: Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.\nA: int String x indexof(String y)\n    gives the position number of where string y first appears in string x\n    returns an int \nString String x substring(int a)\n    creates a substring or a smaller string of string x from the numeral position of int a to the end of the string\n    returns a string\n\nQ: Give the value returned by this method call:  methodA(\"river\", \"r\")\nA: 2\n\nQ: Give the value returned by this method call:  methodA(\"mississippi\", \"s\")\nA: 4\n\nQ: All of the following are parts of a method signature except\nA: The method's javadoc\n\nQ: A method that doesn't return a value has what return type?\nA: void\n\nQ: A method parameter is\nA: the type that is given to a variable\n\nQ: The result of a method is called\nA: a return value\n\nQ: A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?\nA: public boolean isFreezing(double temp)\n\nQ: In general, when documenting a method, you should mention\nA: All of the above\n\nQ: Which of the following should you use to get the numerical representation of the character '@'? \nA: ASCII tables\n\nQ: During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?\nA: IndexOutOfBoundsException\n\nQ: Which method description matches the given code?\nA: Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57\n\nQ: w.length() == 5\nA: true\n\nQ: w.equals(x)\nA: false\n\nQ: x.charAt(2) == y.charAt(2)\nA: true\n\nQ: w.substring(0,5).equals(z.substring(6))\nA: true\n\nQ: w.endsWith(x.toLowerCase().trim())\nA: true",
						"structuredData": {
							"A method that doesn't return a value has what return type?": "void",
							"w.length() == 5": "true",
							"In general, when documenting a method, you should mention": "All of the above",
							"First Name": "Vivian",
							"w.substring(0,5).equals(z.substring(6))": "true",
							"Give the value returned by this method call:  methodA(\"mississippi\", \"s\")": "4",
							"A method gets a temperature and returns true if it’s above freezing or false otherwise.  Which of the following is an acceptable method signature for this method?": "public boolean isFreezing(double temp)",
							"During runtime, your code tries to get the 10th character at a position in the string \"hello\".  What exception will be thrown?": "IndexOutOfBoundsException",
							"3.  This method returns 'true' if all the characters in the given string are the same. Use an appropriate loop in your solution.": "public boolean isAllSame(String str)\n{\n    while(true)\n    {\n        for(int i = 0; i < str.length(); i++)\n        {\n            char ch1 = str.charAt(i);\n            char ch2 = str.charAt(i +1);\n            if(ch1 != ch2)\n            {\n                break;\n                return false;\n            }\n        }\n    }\n    return; \n}\n ",
							"The result of a method is called": "a return value",
							"w.equals(x)": "false",
							"2.  Implement this method that takes the first N characters of a given string, reverses the characters, changes it to uppercase and returns the result.  You must call the 'reverse' method you created above. Just CALL the 'reverse' method - don't re-implement it. If N is larger than the given string, use the entire string.": "public String reverseUpperN(String str, int N)\n{\n    String word = \"\";\n    for(int i = 0; i < N; i++)\n    {\n        char ch = str.charAt(i);\n        char upperCh = Character.toUpperCase(ch);\n        word += upperCh;\n    }\n    String word = reverse(String word);\n    return word;\n}",
							"Write a clear and concise javadoc (API) for methodA above.  Include relevant javadoc features.": "int String x indexof(String y)\n    gives the position number of where string y first appears in string x\n    returns an int \nString String x substring(int a)\n    creates a substring or a smaller string of string x from the numeral position of int a to the end of the string\n    returns a string",
							"Which of the following should you use to get the numerical representation of the character '@'? ": "ASCII tables",
							"w.endsWith(x.toLowerCase().trim())": "true",
							"x.charAt(2) == y.charAt(2)": "true",
							"All of the following are parts of a method signature except": "The method's javadoc",
							"Which method description matches the given code?": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57",
							"A method parameter is": "the type that is given to a variable",
							"Last Name": "Li",
							"Give the value returned by this method call:  methodA(\"river\", \"r\")": "2",
							"1.  Implement this method that reverses the given string and returns it.": "public String reverse(String str)\n{\n    String result = \"\";\n    for(int i = str.length() - 1; i >= 0; i --)\n    {\n        char letter = str.charAt(i);\n        result += letter;\n    }\n    return result;\n}"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA3/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iz_iw9dcUEL-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-01T17:39:48.211Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-01T18:47:24.390Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-04-01T17:39:48.213Z",
					"assignmentName": "Unit 3 Test: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:18.360Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-04-01T16:58:48.997Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue1UwyByq57x3z77RsaMpk0Oanl5eBboGwuKsjubKPxX7ZtiyVY9qO6zV065Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str) {\n    return str.substring(2) + str.substring(0, 2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n    String currentString = str1;\n    int count = 0;\n    int index = 0;\n    while (currentString.indexOf(str2, index) != -1) {\n        index += currentString.indexOf(str2, index) + str2.length();\n        count++;\n    }\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A character is a primitive which means that it is a basic data type that is predefined. A string is an object that is made up of characters.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void method(String str1, String str2)\n\nQ: \nA: /**\n *This parameter returns every other character in a string\n *\n *@param word The String\n *@return Every other character in the string.\n */\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n    String currentString = str1;\n    int count = 0;\n    int index = 0;\n    while (currentString.indexOf(str2, index) != -1) {\n        index += currentString.indexOf(str2, index) + str2.length();\n        count++;\n    }\n    return count;\n}",
							"": "/**\n *This parameter returns every other character in a string\n *\n *@param word The String\n *@return Every other character in the string.\n */",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A character is a primitive which means that it is a basic data type that is predefined. A string is an object that is made up of characters.",
							"Which is NOT a java String method?": "size()",
							"First Name": "Kelton",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str) {\n    return str.substring(2) + str.substring(0, 2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void method(String str1, String str2)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Kuan"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-27T12:04:34.124Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-01T18:10:08.761Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-04-01T18:10:16.144Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQvamFgLoV",
					"submittedAt": "2025-03-27T12:04:34.158Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:20.844Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-29T00:26:00.160Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudPcZO66kFecin-mWgcRjSCFgF_GQto5RA9IA4bipxRC005dMDbbgwkUnJf8Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str)\n{\n    return str.substring(2) + str.substring(0, 2)  +\"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount (String str1, String str2)\n{\n    int count = 0;\n    String result = \"\";\n\n    for (int i = 0; i < str1.length(); i++)\n    {\n         result  += str1.charAt(i);\n\n        if (result.equals(str2))\n        {\n            count++;\n            result = \"\";\n        }\n    }\n\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A string is made up of multiple characters to form words or multiple characters.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void signature (String str1, String str2))\n\nQ: \nA: this method return every other character in a string\n@param word where every other character is taken from\n@return result the new character\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "this method return every other character in a string\n@param word where every other character is taken from\n@return result the new character",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount (String str1, String str2)\n{\n    int count = 0;\n    String result = \"\";\n\n    for (int i = 0; i < str1.length(); i++)\n    {\n         result  += str1.charAt(i);\n\n        if (result.equals(str2))\n        {\n            count++;\n            result = \"\";\n        }\n    }\n\n    return count;\n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A string is made up of multiple characters to form words or multiple characters.",
							"Which is NOT a java String method?": "size()",
							"First Name": "Abithan",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str)\n{\n    return str.substring(2) + str.substring(0, 2)  +\"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void signature (String str1, String str2))",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Paskaranathan"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-27T12:04:39.884Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-04-01T17:33:05.221Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQvamFgLoV",
					"submittedAt": "2025-03-27T12:04:39.892Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:23.229Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-27T18:39:41.290Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufW2hWFEJZzzXd3_1s8EF6zeM3PFXW-kfIH5iEDlQo1FqgjyLlAwG-cknjsMg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str){\n    return str.substring(2) + str.substring(0,2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount (String str1, String str2){\n    int occur = str1.indexOf(str2);\n    int lenStr2 = str2.length();\n    int count = 0;\n    while (occur != -1){\n        if (str1.length()+1 >= str2.length()_{\n            str1 = str1.substring(occur, occur + lenStr2);\n        }\n        occur = str1.indexOf(str2);\n        count ++;\n    }\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A character is a single unit of a string, while a string is a group of characters combined. For example, in the string \"hi\", there are two characters 'h' and 'i'.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void noReturn (String str1, String str2)\n\nQ: \nA: This return every other letter of a string\n@param word is the string that will have its characters extracted from\n@return string with every other letter\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "This return every other letter of a string\n@param word is the string that will have its characters extracted from\n@return string with every other letter",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount (String str1, String str2){\n    int occur = str1.indexOf(str2);\n    int lenStr2 = str2.length();\n    int count = 0;\n    while (occur != -1){\n        if (str1.length()+1 >= str2.length()_{\n            str1 = str1.substring(occur, occur + lenStr2);\n        }\n        occur = str1.indexOf(str2);\n        count ++;\n    }\n    return count;\n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A character is a single unit of a string, while a string is a group of characters combined. For example, in the string \"hi\", there are two characters 'h' and 'i'.",
							"First Name": "Owen",
							"Which is NOT a java String method?": "size()",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str){\n    return str.substring(2) + str.substring(0,2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void noReturn (String str1, String str2)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Lee"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I_qLZkQsQvamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-27T12:04:11.016Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-27T18:39:41.422Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-27T12:04:11.048Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:24.935Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 9,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T13:25:39.892Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuccZkGoam8kdn2xNdgEPUol9dbFUD3xEwK-mHni09sTwTh19fKg_Ftu_iQ_vg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kian \n\nQ: Last Name\nA: MIstry\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str)\n{\n    String firstTwo = str.substring(0,2);\n    String rest = str.substring (2, str.length());\n    return rest + firstTwo + str;\n}\n    \n\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: \n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A string is a series or seqeunce of characters while characters represent a singular letter\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public String noResult (String a, String b)\n\nQ: \nA: \n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: \n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: ",
						"structuredData": {
							"": "",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "",
							"Refer to method A above.  What does A(\"Batman\") return?": "",
							"Refer to method A above.  What does A(\"PETHS\") return?": "",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str)\n{\n    String firstTwo = str.substring(0,2);\n    String rest = str.substring (2, str.length());\n    return rest + firstTwo + str;\n}\n    \n",
							"What is the relationship between a 'String' and a 'Character'?": "A string is a series or seqeunce of characters while characters represent a singular letter",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public String noResult (String a, String b)",
							"First Name": "Kian ",
							"Last Name": "MIstry"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-27T12:05:07.855Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-04-01T13:25:40.009Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQvamFgLoV",
					"submittedAt": "2025-03-27T12:05:07.889Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:27.468Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T16:58:48.997Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue1UwyByq57x3z77RsaMpk0Oanl5eBboGwuKsjubKPxX7ZtiyVY9qO6zV065Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str) {\n    return str.substring(2) + str.substring(0, 2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n    String currentString = str1;\n    int count = 0;\n    int index = 0;\n    while (currentString.indexOf(str2, index) != -1) {\n        index += currentString.indexOf(str2, index) + str2.length();\n        count++;\n    }\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A character is a primitive which means that it is a basic data type that is predefined. A string is an object that is made up of characters.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void method(String str1, String str2)\n\nQ: \nA: /**\n *This parameter returns every other character in a string\n *\n *@param word The String\n *@return Every other character in the string.\n */\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "/**\n *This parameter returns every other character in a string\n *\n *@param word The String\n *@return Every other character in the string.\n */",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n    String currentString = str1;\n    int count = 0;\n    int index = 0;\n    while (currentString.indexOf(str2, index) != -1) {\n        index += currentString.indexOf(str2, index) + str2.length();\n        count++;\n    }\n    return count;\n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A character is a primitive which means that it is a basic data type that is predefined. A string is an object that is made up of characters.",
							"Which is NOT a java String method?": "size()",
							"First Name": "Kelton",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str) {\n    return str.substring(2) + str.substring(0, 2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void method(String str1, String str2)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Kuan"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"id": "Cg0Ik7DJrAwQvamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-03-27T12:03:53.060Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-04-01T16:58:49.115Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-27T12:03:53.083Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:29.998Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-27T18:14:14.020Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudzx44geGugUVox9u1OFxDWY8jN51EEqYvfukKr9k1mvYz-it5zPZs_uXo6Wg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str) {\n    String ans = “”;\n    ans += str.substring(2);\n    ans = ans + str.charAt(0) + str.charAt(1) + “java”;\n    return ans;\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n    int count = 0;\n    while (str1.indexOf(str2) != -1) {\n        count++;\n        str1 = str1.substring(str2.length());\n    }\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A String is a variable that holds a line of text using double quotations, whereas a Character uses single quotations to hold a single letter of the alphabet.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public Pizza (String toppings, String size)\n\nQ: \nA: The method A takes in a String and returns the same String.\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Batman\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PETHS\n\nQ: Which of the following is an invalid method signature?\nA: public String methodD(int a)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "The method A takes in a String and returns the same String.",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n    int count = 0;\n    while (str1.indexOf(str2) != -1) {\n        count++;\n        str1 = str1.substring(str2.length());\n    }\n    return count;\n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PETHS",
							"What is the relationship between a 'String' and a 'Character'?": "A String is a variable that holds a line of text using double quotations, whereas a Character uses single quotations to hold a single letter of the alphabet.",
							"\"Hello\".length() == 5": "true",
							"First Name": "Jiayu",
							"Which is NOT a java String method?": "size()",
							"Which of the following is an invalid method signature?": "public String methodD(int a)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Batman",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str) {\n    String ans = “”;\n    ans += str.substring(2);\n    ans = ans + str.charAt(0) + str.charAt(1) + “java”;\n    return ans;\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public Pizza (String toppings, String size)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Chen"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-27T12:04:53.978Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-27T18:14:14.144Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-27T18:17:19.111Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QvamFgLoV",
					"submittedAt": "2025-03-27T12:04:53.983Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:32.249Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 14,
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T10:42:05.026Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufgg27dWiTE5cXS05158du_lTpCTSkz76Yl6sq_aci-s20p8tAY88EVmDup7Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Veznu\n\nQ: Last Name\nA: Premathas\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: String addition = str.substring(0,2);\nString startingStatement = str.substring(2,str.length());\nString java = \"java\";\n\nString finalStatement = startingStatement + addition + java\nreturn finalStatement;\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: int count = 0;\n\nfor(int i = 0; i<str1.length(); i++)\n{\n    if (str.substring(i,i+str2.length).equals(str2)\n    {    \n        return true;\n    }\n    return false;\n\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: They are both data types that are used to store information\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void countValues( int a , int b)\n\nQ: \nA: This code will print every two characters from word in a single statement. For instance \n//Wonder \n//123456\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: \n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: \n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: char.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "int count = 0;\n\nfor(int i = 0; i<str1.length(); i++)\n{\n    if (str.substring(i,i+str2.length).equals(str2)\n    {    \n        return true;\n    }\n    return false;\n\n}",
							"": "This code will print every two characters from word in a single statement. For instance \n//Wonder \n//123456",
							"Refer to method A above.  What does A(\"PETHS\") return?": "",
							"What is the relationship between a 'String' and a 'Character'?": "They are both data types that are used to store information",
							"First Name": "Veznu",
							"Which is NOT a java String method?": "size()",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "char.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "String addition = str.substring(0,2);\nString startingStatement = str.substring(2,str.length());\nString java = \"java\";\n\nString finalStatement = startingStatement + addition + java\nreturn finalStatement;",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void countValues( int a , int b)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Premathas"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-27T12:04:54.080Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-04-01T10:42:05.155Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQvamFgLoV",
					"submittedAt": "2025-03-27T12:04:54.084Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:35.623Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-04-01T16:58:48.997Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue1UwyByq57x3z77RsaMpk0Oanl5eBboGwuKsjubKPxX7ZtiyVY9qO6zV065Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str) {\n    return str.substring(2) + str.substring(0, 2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n    String currentString = str1;\n    int count = 0;\n    int index = 0;\n    while (currentString.indexOf(str2, index) != -1) {\n        index += currentString.indexOf(str2, index) + str2.length();\n        count++;\n    }\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A character is a primitive which means that it is a basic data type that is predefined. A string is an object that is made up of characters.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void method(String str1, String str2)\n\nQ: \nA: /**\n *This parameter returns every other character in a string\n *\n *@param word The String\n *@return Every other character in the string.\n */\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "/**\n *This parameter returns every other character in a string\n *\n *@param word The String\n *@return Every other character in the string.\n */",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n    String currentString = str1;\n    int count = 0;\n    int index = 0;\n    while (currentString.indexOf(str2, index) != -1) {\n        index += currentString.indexOf(str2, index) + str2.length();\n        count++;\n    }\n    return count;\n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A character is a primitive which means that it is a basic data type that is predefined. A string is an object that is made up of characters.",
							"First Name": "Kelton",
							"Which is NOT a java String method?": "size()",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str) {\n    return str.substring(2) + str.substring(0, 2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void method(String str1, String str2)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Kuan"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-27T12:07:25.541Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-04-01T18:09:09.590Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQvamFgLoV",
					"submittedAt": "2025-03-27T12:07:25.546Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:38.046Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T14:48:26.465Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufkpuaWB8M5fpZY7NSooesjJI1-GZCwcwsrGT6WSf6ygkp3KqOqKiNZEV0vTQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str)\n{\n    string word = \"java\";\n    return str.substring(2) + str.substring(0,2) + word;\n}\n\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2)\n{\n    int counter = 0;\n    for(int i = 0; i <= str1.length() - str2.length(); i++)\n    {\n        if(str1.substring(i, i + str2.length()) .equals(str2))\n        {\n            counter = counter + 1;\n        }\n        \n    }\n    return counter;\n}\n        \n        \n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: They both involve the use of letters and work together to complete a method. The string is made up of many characters and is often grouped together as a concatenation. \n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void method(int x, int y)\n\nQ: \nA: /**\n*@param = word, which is the \n* \n* \n* checks each letter in the for loop\n* adds the letter back into the empty string for storage\n*@return = returning the string result\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: BTA\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: false\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2)\n{\n    int counter = 0;\n    for(int i = 0; i <= str1.length() - str2.length(); i++)\n    {\n        if(str1.substring(i, i + str2.length()) .equals(str2))\n        {\n            counter = counter + 1;\n        }\n        \n    }\n    return counter;\n}\n        \n        ",
							"": "/**\n*@param = word, which is the \n* \n* \n* checks each letter in the for loop\n* adds the letter back into the empty string for storage\n*@return = returning the string result",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "They both involve the use of letters and work together to complete a method. The string is made up of many characters and is often grouped together as a concatenation. ",
							"Which is NOT a java String method?": "size()",
							"\"Hello\".length() == 5": "false",
							"First Name": "Clark",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "BTA",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str)\n{\n    string word = \"java\";\n    return str.substring(2) + str.substring(0,2) + word;\n}\n",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void method(int x, int y)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Chen"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-27T12:05:22.525Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-01T14:48:26.556Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8QvamFgLoV",
					"submittedAt": "2025-03-27T12:05:22.530Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:40.768Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-28T18:43:30.032Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud6SJD4sIXw7thUUllIBcdzELkSPuKt3_EX-Pc56vOeBSDOGXJlHyU1N-aqjA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Edward \n\nQ: Last Name\nA: Wang\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str)\n{\n    return str.substring(2) + str.substring(0,2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount (String str1, String str2)\n{\n    int count= 0;\n    int occurence = str1.indexOf (str2);\n    int length = str2.length();\n    while (occurence!= -1)\n    {\n        count++;\n        str1= str1.substring (str2 + length);\n        occurence= str1.indexOf(\"str2\");\n    }\n    return count;\n    \n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A string is made comprised of multiple characters.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: private void test (String str1, String str2)\n\nQ: \nA: Returns every other character of the given string.\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount (String str1, String str2)\n{\n    int count= 0;\n    int occurence = str1.indexOf (str2);\n    int length = str2.length();\n    while (occurence!= -1)\n    {\n        count++;\n        str1= str1.substring (str2 + length);\n        occurence= str1.indexOf(\"str2\");\n    }\n    return count;\n    \n}",
							"": "Returns every other character of the given string.",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A string is made comprised of multiple characters.",
							"First Name": "Edward ",
							"Which is NOT a java String method?": "size()",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str)\n{\n    return str.substring(2) + str.substring(0,2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "private void test (String str1, String str2)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Wang"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I7-PGhEAQvamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-27T12:05:32.004Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-28T18:43:30.124Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-27T12:05:32.039Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:43.246Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-31T18:12:06.229Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudbkikojC0afagViinjZa1AaWZKgTYvi74shoxB9LM-oexW2yj4teZPwkJ8Iw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str)\n{\n    return str.subtring(2) + str.subtstring(0, 2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount (String str1, String str2)\n{\n    int count = 0;\n    int index = str1.indexOf(str2);\n    while (index != -1) \n    {\n          count++;\n           index = str1.indexOf(str2, index + str2.length());\n     }\n     return count;\n }\n\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A \"Character\" represents a single letter whereas a \"String\" is a sequence of characters. Characters are a primitive type of data while Strings aren't and you can extract individual characters from a String using the .charAt() method.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void exampleMethod(String str1, String str2)\n\nQ: \nA: /**\n * Scans the string\n * Gets every other character and adds it to the result\n * @return a String made of every other character in the original String\n */\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: amn\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: EH\n\nQ: Which of the following is an invalid method signature?\nA: public String methodD(int a)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: true\n\nQ: \"Hello\".length() == 5\nA: false\n\nQ: \"hello\".startsWith(\"he\")\nA: false",
						"structuredData": {
							"": "/**\n * Scans the string\n * Gets every other character and adds it to the result\n * @return a String made of every other character in the original String\n */",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount (String str1, String str2)\n{\n    int count = 0;\n    int index = str1.indexOf(str2);\n    while (index != -1) \n    {\n          count++;\n           index = str1.indexOf(str2, index + str2.length());\n     }\n     return count;\n }\n",
							"Refer to method A above.  What does A(\"PETHS\") return?": "EH",
							"What is the relationship between a 'String' and a 'Character'?": "A \"Character\" represents a single letter whereas a \"String\" is a sequence of characters. Characters are a primitive type of data while Strings aren't and you can extract individual characters from a String using the .charAt() method.",
							"First Name": "Leo",
							"Which is NOT a java String method?": "size()",
							"\"Hello\".length() == 5": "false",
							"Which of the following is an invalid method signature?": "public String methodD(int a)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "amn",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str)\n{\n    return str.subtring(2) + str.subtstring(0, 2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void exampleMethod(String str1, String str2)",
							"\"hello\".startsWith(\"he\")": "false",
							"\"Hello\".charAt(0) == (\"h\")": "true",
							"Last Name": "So"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-27T12:04:03.945Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-31T18:12:06.343Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQvamFgLoV",
					"submittedAt": "2025-03-27T12:04:03.977Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:45.743Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-28T16:51:26.307Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufOPV0EGJ4BLqvj8kg4qFbwYRwjI1zbc1MyJbjyxRrR0rih_2FHOLfh0KZqZQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: mark\n\nQ: Last Name\nA: ku\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str)\n{\n     return str.substring (2) + str.substring (0,2) + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount (String str1, String str2)\n{\n     int count =0;\n     int index = 0;\n      \n        while ((index = str1.indexOf(str2, index)) != -1) {\n            count++;\n            index += str2.length(); \n        }\n        \n        return count;\n        \n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A string is a list of characters. Characters represent 1 character/letter, string includes 0 or more characters\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void methodSignature (String str1, String str2)\n\nQ: \nA: This method takes a string and returns a different string with every second character of the original string. \n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: void toUpperCase()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: false\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "This method takes a string and returns a different string with every second character of the original string. ",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount (String str1, String str2)\n{\n     int count =0;\n     int index = 0;\n      \n        while ((index = str1.indexOf(str2, index)) != -1) {\n            count++;\n            index += str2.length(); \n        }\n        \n        return count;\n        \n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A string is a list of characters. Characters represent 1 character/letter, string includes 0 or more characters",
							"Which is NOT a java String method?": "void toUpperCase()",
							"\"Hello\".length() == 5": "false",
							"First Name": "mark",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str)\n{\n     return str.substring (2) + str.substring (0,2) + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void methodSignature (String str1, String str2)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "ku"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-27T12:06:36.330Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-28T16:51:26.442Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQvamFgLoV",
					"submittedAt": "2025-03-27T12:06:36.360Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:48.413Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-31T02:41:48.251Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufRWwfQKcz9CYwVEFnuyM6z-2anwKtzO1oUojStlOwbG9AWBtFdP3loQ9DWcw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str)\n{\n    String text1 = str.substring(0, 1);\n    int length = str.length(); \n    String text2 = str.substring(2, length);\n    String word = text2 + text1 + \"java\" ; \n    return word; \n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2)\n{\n    int length = str1.length();\n    String word =\"\"; \n    int count = 0;\n    for (int i = 0; i < length(); i++)\n    {\n        char letter = str1.charAt(i);\n        word += letter;\n        if (word.equals(str2))\n        {\n            count++;\n        }\n    }\n    return count; \n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA:  A String is a sequence of characters. \n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void writing(String str, String str2)\n\nQ: \nA: /** \n *This method returns a word with only the even number of letter in the parameter. \n *\n *@param word the word taking letter off\n *\n *@return a new word form by only the even letter of the parameter.\n */\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public String methodD(int a)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "/** \n *This method returns a word with only the even number of letter in the parameter. \n *\n *@param word the word taking letter off\n *\n *@return a new word form by only the even letter of the parameter.\n */",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2)\n{\n    int length = str1.length();\n    String word =\"\"; \n    int count = 0;\n    for (int i = 0; i < length(); i++)\n    {\n        char letter = str1.charAt(i);\n        word += letter;\n        if (word.equals(str2))\n        {\n            count++;\n        }\n    }\n    return count; \n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": " A String is a sequence of characters. ",
							"Which is NOT a java String method?": "size()",
							"\"Hello\".length() == 5": "true",
							"First Name": "Carmen",
							"Which of the following is an invalid method signature?": "public String methodD(int a)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str)\n{\n    String text1 = str.substring(0, 1);\n    int length = str.length(); \n    String text2 = str.substring(2, length);\n    String word = text2 + text1 + \"java\" ; \n    return word; \n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void writing(String str, String str2)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Cheung"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-27T12:06:00.896Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-31T02:41:48.363Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQvamFgLoV",
					"submittedAt": "2025-03-27T12:06:00.903Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:50.869Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-31T20:47:27.829Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucG64m4lXWY_RAT9Xzf0Kd2lYVrh6fLkilD87wtf1JewDkwIPpbFr1oJHnzQA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena\n\nQ: Last Name\nA: Godek\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str)\n{\n    int len = str.length();\n    String newStr = str.substring(2) + str.substring(0,2) + \"java\";\n    return newStr;\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1,  String str2){\n    int count = 0;\n    while(str1.indexOf(str2) != -1)\n    {\n        count ++;\n    }\n\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A character is a singular letter, such as 'a. A string is a bunch of letters strung together. For example, we know that the individual letters in the word \"hello\" are characters, but that characters put together make a string.  \n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: private void twoStrings(String a, String b)\n\nQ: \nA: This returns a string that contains every two letters of the given string.  \n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PT\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: void toUpperCase()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1,  String str2){\n    int count = 0;\n    while(str1.indexOf(str2) != -1)\n    {\n        count ++;\n    }\n\n    return count;\n}",
							"": "This returns a string that contains every two letters of the given string.  ",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PT",
							"What is the relationship between a 'String' and a 'Character'?": "A character is a singular letter, such as 'a. A string is a bunch of letters strung together. For example, we know that the individual letters in the word \"hello\" are characters, but that characters put together make a string.  ",
							"Which is NOT a java String method?": "void toUpperCase()",
							"First Name": "Sena",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str)\n{\n    int len = str.length();\n    String newStr = str.substring(2) + str.substring(0,2) + \"java\";\n    return newStr;\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "private void twoStrings(String a, String b)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Godek"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-27T12:04:20.771Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-31T20:47:27.981Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQvamFgLoV",
					"submittedAt": "2025-03-27T12:04:20.776Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:53.413Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-31T17:54:16.903Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudR4oZ9dJc3pq1YH9Pb-yvdBKutGV5BvW-vhDQXY00mMfH1ftPvAjzQuhaEoA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str) {\n    String result = \"\";\n    result += str.substring((str.length()/2)-1);\n    result += str.substring(0,str.length()/2);\n    return result + \"Java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n    int count = 0;\n    int index = str1.indexOf(str2);    \n    while (index != -1) {\n        count++;\n        str1 = str1.substring(index + str2.length());\n        index = str1.indexOf(str2);\n    }  \n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: String is a sentence of characters of and a character is a primitive type that is only one letter\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void sentence\n\nQ: \nA: /*\n*  @Param word is the user input.\n*  @ Return result is used to return the result of the every 2 characters.\n*/\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n    int count = 0;\n    int index = str1.indexOf(str2);    \n    while (index != -1) {\n        count++;\n        str1 = str1.substring(index + str2.length());\n        index = str1.indexOf(str2);\n    }  \n    return count;\n}",
							"": "/*\n*  @Param word is the user input.\n*  @ Return result is used to return the result of the every 2 characters.\n*/",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "String is a sentence of characters of and a character is a primitive type that is only one letter",
							"Which is NOT a java String method?": "size()",
							"First Name": "Saiful",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str) {\n    String result = \"\";\n    result += str.substring((str.length()/2)-1);\n    result += str.substring(0,str.length()/2);\n    return result + \"Java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void sentence",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Shaik"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "[No content available]",
					"id": "Cg4Iwe6fnb8OEL2phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-27T12:05:38.806Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-31T17:54:17.027Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-27T12:05:38.811Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:56.362Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-31T14:48:29.821Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuekz3tI_drFNvjv2PdCnms59OvOtmmCN3gzn73GL4qBc_wNcSW4XEeCT9xF5A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish (String str)\n{\n     String result = str.subString(2) + str.subString(0,1) + \"java\";\n     return result;\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n     int numAppearances = 0;\n     int checkMatch= str1.indexOf(str2);\n\n     while (index != -1) \n     { \n          numAppearances++; \n          checkMatch= str1.indexOf(str2, index + str2.length());\n     }\n     return numAppearances;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A string is an object that is a list of characters. Characters are primitives that are the individual items in the string, each represented by a number starting with 0.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: private void myMethod(String str1, String str2)\n\nQ: \nA: /**\n *method A returns the given word only with every other letter\n *\n *@param word The given word in its normal form\n *@return result The every other letter of the given word\n*/\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "/**\n *method A returns the given word only with every other letter\n *\n *@param word The given word in its normal form\n *@return result The every other letter of the given word\n*/",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n     int numAppearances = 0;\n     int checkMatch= str1.indexOf(str2);\n\n     while (index != -1) \n     { \n          numAppearances++; \n          checkMatch= str1.indexOf(str2, index + str2.length());\n     }\n     return numAppearances;\n}",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "A string is an object that is a list of characters. Characters are primitives that are the individual items in the string, each represented by a number starting with 0.",
							"First Name": "Nereyal",
							"\"Hello\".length() == 5": "true",
							"Which is NOT a java String method?": "size()",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish (String str)\n{\n     String result = str.subString(2) + str.subString(0,1) + \"java\";\n     return result;\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "private void myMethod(String str1, String str2)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Jeyakumar"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iurzi88AOEL2phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-27T12:05:32.914Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-31T14:47:00.789Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-27T12:05:32.951Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:44:58.821Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-04-01T01:54:40.428Z",
								"totalFormResponses": 20,
								"formTitle": "Quiz: Strings and Methods",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuciXuuSkJjA8AEZwhUPP48TymeLxjwQO9hnIZR67v-CtILs-rjG5r4iNzgH1A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Cayden \n\nQ: Last Name\nA: Chiu\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str){\n    String newStr = substring(2) + substring(0, 2) + \"java\";\n    return newStr;\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2) {\n    int count = 0;\n    int index = 0;\n\n    while((index = str1.indexOf(str2, index)) != -1) {\n        count ++;\n        index += str2.length();\n    {\n\n    return count;\n}\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: A string is an object that represents a sequence of characters which are primitive types. \n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void method()\n\nQ: \nA: /**\n * Extracts every second character from the input string and returns a new straing. \n *\n * @param word the input string where the characters will be extracted\n * @ return a string containing every second character of the input string\n */\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: amn\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: EH\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: char.isUpperCase()\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: false\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2) {\n    int count = 0;\n    int index = 0;\n\n    while((index = str1.indexOf(str2, index)) != -1) {\n        count ++;\n        index += str2.length();\n    {\n\n    return count;\n}",
							"": "/**\n * Extracts every second character from the input string and returns a new straing. \n *\n * @param word the input string where the characters will be extracted\n * @ return a string containing every second character of the input string\n */",
							"Refer to method A above.  What does A(\"PETHS\") return?": "EH",
							"What is the relationship between a 'String' and a 'Character'?": "A string is an object that represents a sequence of characters which are primitive types. ",
							"Which is NOT a java String method?": "size()",
							"First Name": "Cayden ",
							"\"Hello\".length() == 5": "false",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "char.isUpperCase()",
							"Refer to method A above.  What does A(\"Batman\") return?": "amn",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str){\n    String newStr = substring(2) + substring(0, 2) + \"java\";\n    return newStr;\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void method()",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Chiu"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-27T12:04:44.722Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-04-01T01:54:40.571Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEL2phYC6FQ",
					"submittedAt": "2025-03-27T12:04:44.752Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:01.413Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-27T18:47:36.871Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufEyG9ddR1wdpSYQIhgI9Q1SyJZZhrNWHvKidSr_SA1KQaRO_v1O4J6JZ1rWg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: String firstTwo = str.substring (0, 2);\nString restCharacters = str.substring (2);\nString java = \"java\";\nreturn restCharacters + firstTwo + java;\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: \n\n\n\nint numberOfString2 = 0;\nfor(int i=0; i<str1.length(); i++)\n{\n    char cur = str1.charAt(i);\n    String curString = str1.substring( i,  i + str2.length()-1);\n    if(curString.equals(str2))\n    {\n        numberOfString2 +=1; \n    }\n}\nreturn numberOfString2;\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: char: is only one letter, number or a symbol.\nString: is more than one characters \n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public void methodSignature (String param1, String param 2)\n\nQ: \nA: /**\n * Making a  new string returning of every other character\n * from the given input string, starting with the first character.\n *\n * @param imput any word\n * @return a new string with the first character of the any word and every other character \n */\n\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public void methodA()\n\nQ: Which is NOT a java String method?\nA: equals(String other)\n\nQ: Which of the following correctly uses a Character method?\nA: char.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "/**\n * Making a  new string returning of every other character\n * from the given input string, starting with the first character.\n *\n * @param imput any word\n * @return a new string with the first character of the any word and every other character \n */\n",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "\n\n\n\nint numberOfString2 = 0;\nfor(int i=0; i<str1.length(); i++)\n{\n    char cur = str1.charAt(i);\n    String curString = str1.substring( i,  i + str2.length()-1);\n    if(curString.equals(str2))\n    {\n        numberOfString2 +=1; \n    }\n}\nreturn numberOfString2;",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "char: is only one letter, number or a symbol.\nString: is more than one characters ",
							"First Name": "Owen",
							"\"Hello\".length() == 5": "true",
							"Which is NOT a java String method?": "equals(String other)",
							"Which of the following is an invalid method signature?": "public void methodA()",
							"Which of the following correctly uses a Character method?": "char.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "String firstTwo = str.substring (0, 2);\nString restCharacters = str.substring (2);\nString java = \"java\";\nreturn restCharacters + firstTwo + java;",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public void methodSignature (String param1, String param 2)",
							"\"hello\".startsWith(\"he\")": "true",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Kung"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-27T12:05:15.118Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-27T18:47:36.959Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEL2phYC6FQ",
					"submittedAt": "2025-03-27T12:05:15.123Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:04.313Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"questionCount": 15,
								"matchedByEmail": true,
								"responseTime": "2025-03-27T18:42:38.483Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucT-GPTAJksESjBsh8FSzlYvQu3JAvj6p7x4uPp7LMy8xeAMxLZFqO46uaVkQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: if(str.length > 2)\n{\n    String end = str.substring(2);\n    String begin = str.substring(0, 1);\n    String new = end + begin + \"java\";\n}\nelse\n{\n    String new = str + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: int count = 0;\n\n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: String could be a line, a phase, the lenth is not limited. Char only represent a single character. String can be a character.\n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public String wow(String one, String two)\n\nQ: \nA: //return all the char count in two\n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public void methodA()\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: false",
						"structuredData": {
							"": "//return all the char count in two",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "int count = 0;\n",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "String could be a line, a phase, the lenth is not limited. Char only represent a single character. String can be a character.",
							"Which is NOT a java String method?": "size()",
							"First Name": "Lionson",
							"\"Hello\".length() == 5": "true",
							"Which of the following is an invalid method signature?": "public void methodA()",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "if(str.length > 2)\n{\n    String end = str.substring(2);\n    String begin = str.substring(0, 1);\n    String new = end + begin + \"java\";\n}\nelse\n{\n    String new = str + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public String wow(String one, String two)",
							"\"hello\".startsWith(\"he\")": "false",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"Last Name": "Meng"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-27T12:06:32.952Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-27T18:42:38.562Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEL2phYC6FQ",
					"submittedAt": "2025-03-27T12:06:32.957Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:07.083Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849405",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 15,
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-04-01T02:43:13.520Z",
								"totalFormResponses": 20,
								"extractionMethod": "FormApp",
								"formTitle": "Quiz: Strings and Methods",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucNA3ZCNlbAnyW_f_t-1HfMXVBbYcsiRSV_zcIKRNtHfqGVZ_edBBTvpL-jNg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian \n\nQ: Last Name\nA: Li\n\nQ: 1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.\nA: public String gibberish(String str)\n{\n    String firstLetters = \"\";\n    String result = \"\";\n    for(int i = 0; i < str.length(); i++)\n    {\n        char letter = str.charAt(i);\n        if(i == 0 || i == 1)\n        {\n            firstLetters += letter;\n        }\n        else\n        {\n            result += letter;\n        }\n    }\n    result += firstLetters;\n    return result + \"java\";\n}\n\nQ: 2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.\nA: public int wordCount(String str1, String str2)\n{\n    \n\nQ: What is the relationship between a 'String' and a 'Character'?\nA: Strings have characters within them. \n\nQ: Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.\nA: public String gibberish(String str)\n\nQ: \nA: \n\nQ: Refer to method A above.  What does A(\"Batman\") return?\nA: Bta\n\nQ: Refer to method A above.  What does A(\"PETHS\") return?\nA: PTS\n\nQ: Which of the following is an invalid method signature?\nA: public int methodC(int int)\n\nQ: Which is NOT a java String method?\nA: size()\n\nQ: Which of the following correctly uses a Character method?\nA: Character.isUpperCase('A')\n\nQ: \"Hello\".charAt(0) == (\"h\")\nA: false\n\nQ: \"Hello\".length() == 5\nA: true\n\nQ: \"hello\".startsWith(\"he\")\nA: true",
						"structuredData": {
							"": "",
							"2.  This method takes two Strings and returns the number of times the second string appears in the first.  Implement this method.": "public int wordCount(String str1, String str2)\n{\n    ",
							"Refer to method A above.  What does A(\"PETHS\") return?": "PTS",
							"What is the relationship between a 'String' and a 'Character'?": "Strings have characters within them. ",
							"First Name": "Vivian ",
							"\"Hello\".length() == 5": "true",
							"Which is NOT a java String method?": "size()",
							"Which of the following is an invalid method signature?": "public int methodC(int int)",
							"Which of the following correctly uses a Character method?": "Character.isUpperCase('A')",
							"Refer to method A above.  What does A(\"Batman\") return?": "Bta",
							"1.  This method takes a String and returns a gibberish word.  To make a gibberish word, move the first 2 characters of the original word to the end of the String, then add \"java\" to the end.  Implement this method.": "public String gibberish(String str)\n{\n    String firstLetters = \"\";\n    String result = \"\";\n    for(int i = 0; i < str.length(); i++)\n    {\n        char letter = str.charAt(i);\n        if(i == 0 || i == 1)\n        {\n            firstLetters += letter;\n        }\n        else\n        {\n            result += letter;\n        }\n    }\n    result += firstLetters;\n    return result + \"java\";\n}",
							"Give an example of a method signature for a method that has two 'String' parameters that does not return a value.  A method signature is the first line when you create a method.  Do not include any other code or brace '{' brackets.": "public String gibberish(String str)",
							"\"Hello\".charAt(0) == (\"h\")": "false",
							"\"hello\".startsWith(\"he\")": "true",
							"Last Name": "Li"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5NDA1/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-27T12:05:25.433Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-01T02:43:13.685Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEL2phYC6FQ",
					"submittedAt": "2025-03-27T12:05:25.464Z",
					"assignmentName": "Unit 3 Quiz: Strings and Methods (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:11.781Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:12:52.275Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "349168732@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueA9oauUrV50twolTElpnsIFHF6yX9jWfkIDGmc0Emi2lzDjpokyC2g-sDjSg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Joe\n\nQ: Last Name\nA: Zhuo\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run() {\n    Boolean warm = readBoolean(\"Warm outside? \");\n    Boolean isRaining = readBoolean(\"Raining? \");\n    Boolean niceDay = warm && !isRaining;\n    System.out.println(\"Nice Day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run() {\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for (int i = 2; i <= num; i+=2) {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + num + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run() {\n    int t = readInt(\"Total time: \");\n    \n    int hours = t/3600;\n    int minutes = (t%3600)/60;\n    int seconds = t%60;\n\n    int sum = hours + minutes + seconds;\n    System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: char\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run() {\n    int t = readInt(\"Total time: \");\n    \n    int hours = t/3600;\n    int minutes = (t%3600)/60;\n    int seconds = t%60;\n\n    int sum = hours + minutes + seconds;\n    System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Joe",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 24",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run() {\n    Boolean warm = readBoolean(\"Warm outside? \");\n    Boolean isRaining = readBoolean(\"Raining? \");\n    Boolean niceDay = warm && !isRaining;\n    System.out.println(\"Nice Day: \" + niceDay);\n}",
							"Which is NOT a primitive type?": "char",
							"Last Name": "Zhuo",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run() {\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for (int i = 2; i <= num; i+=2) {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + num + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-06T18:36:22.090Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-06T19:12:52.376Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQqqmFgLoV",
					"submittedAt": "2025-03-06T18:36:22.094Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:16.122Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:24:15.496Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf7gLekZv0A5j6HlMfcGXiv5zbPPfXgE6hYduJvozbszMgRiDrFJLXY1c6Gtw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean warmOutside = readBoolean(\"Warm outside? \");\n\n    boolean raining = readBoolean(\"Raining? \");\n\n    boolean niceDay = warmOutside == true && raining == false;\n\n    System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int evenNum = readInt(\"Even number: \");\n    int sum = 2;    //so if the number is two the sum will only include 2 and doesn't add 2\n\n    for (int i = 2; i < evenNum; i += 2)\n    {\n        sum += i;\n    }\n\n    System.out.println(\"Even sum from 2 to \"+ evenNum + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int t = readInt(\"Total time: );\n\n    int hours  = t / 3600;\n    int minutes  = t % 3600;\n    int seconds =  t % 60; \n\n    int sum = hours + minutes + seconds;\n\n    System.out.println(sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int t = readInt(\"Total time: );\n\n    int hours  = t / 3600;\n    int minutes  = t % 3600;\n    int seconds =  t % 60; \n\n    int sum = hours + minutes + seconds;\n\n    System.out.println(sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Abithan",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean warmOutside = readBoolean(\"Warm outside? \");\n\n    boolean raining = readBoolean(\"Raining? \");\n\n    boolean niceDay = warmOutside == true && raining == false;\n\n    System.out.println(\"Nice day: \" + niceDay);\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Paskaranathan",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int evenNum = readInt(\"Even number: \");\n    int sum = 2;    //so if the number is two the sum will only include 2 and doesn't add 2\n\n    for (int i = 2; i < evenNum; i += 2)\n    {\n        sum += i;\n    }\n\n    System.out.println(\"Even sum from 2 to \"+ evenNum + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"id": "Cg0Isq_W0gkQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-06T18:36:18.968Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-06T19:24:15.619Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:18.991Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:20.414Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:20:09.286Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueIt1XBENgFur-O9orc9Axkw8F-iLzZqWiAtRCyMM1gOjVyzfok1risblMUtQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: boolean warm = readBool(\"Warm outside? \");\nboolean raining = readBool(\"Raining? \");\nboolean niceDay = warm && !raining;\nSystem.out.println(\"Nice day: \" niceDay);\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: int sum = 0;\nint evenNum = readInt(\"Even number: \");\nfor (int i = 2; i <= evenNum; i += 2)\n{\n    sum += i;\n}\nSystem.out.println(\"Even sum from 2 to \" + evenNum + \" is \" + sum);\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: int time = readInt(\"Total time: \");\nint sum = 0;\nint hours = time / 3600;\nint minutes = (time % 3600) / 60;\nint seconds = time % 60;\nsum = sum + hours + minutes + seconds;\nSystem.out.println(\"Sum is \" + sum);\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "int time = readInt(\"Total time: \");\nint sum = 0;\nint hours = time / 3600;\nint minutes = (time % 3600) / 60;\nint seconds = time % 60;\nsum = sum + hours + minutes + seconds;\nSystem.out.println(\"Sum is \" + sum);",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Owen",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Java source code is saved in a file with which extension?": ".java",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "boolean warm = readBool(\"Warm outside? \");\nboolean raining = readBool(\"Raining? \");\nboolean niceDay = warm && !raining;\nSystem.out.println(\"Nice day: \" niceDay);",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Lee",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "int sum = 0;\nint evenNum = readInt(\"Even number: \");\nfor (int i = 2; i <= evenNum; i += 2)\n{\n    sum += i;\n}\nSystem.out.println(\"Even sum from 2 to \" + evenNum + \" is \" + sum);"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-06T18:36:24.258Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-06T19:20:09.803Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQqqmFgLoV",
					"submittedAt": "2025-03-06T18:36:24.261Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:25.000Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:00:28.709Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufL9OdxHvARKGkSX9v7Cbx-mnJN5-onNMHzZ923Q8Oo02a0Pe9yk70oktWcMw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kian \n\nQ: Last Name\nA: Mistry\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean warm = readBoolean (\"Warm outside? \");\n    boolean rain = readBoolean (\"Raining? \");\n    if (warm = true && rain = true)\n    {\n        System.out.println (\"Nice Day: false\")\n    }\n    else if (warm = true && rain = false)\n    {\n        System.out.println (\"Nice day: true\");\n    }\n}\n\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int sum = 0\n    int even = readInt (\"Even Number: \");\n    for (int i = 0; i < even; i++)\n    }\n        sum += 2\n    {\n{\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int sum = 0;\n    int time = readInt (\"Total time: \");\n    \n    int totalTime = time / 3600;\n    totalTime = time % 3600;\n    sum += totalTime;\n\n    int totalTime1 = time / 60;\n    totalTime1 = time % 3600;\n    sum +=totalTime1;\n\n    System.out.println (\"Sum is \" + sum);\n\n}\n\nQ: \nA: It will print out \"A\"\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: char\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6.67\n\nQ: What concept is associated with the previous question?\nA: Loop-and-a-half\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: !\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 50\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "It will print out \"A\"",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int sum = 0;\n    int time = readInt (\"Total time: \");\n    \n    int totalTime = time / 3600;\n    totalTime = time % 3600;\n    sum += totalTime;\n\n    int totalTime1 = time / 60;\n    totalTime1 = time % 3600;\n    sum +=totalTime1;\n\n    System.out.println (\"Sum is \" + sum);\n\n}",
							"What concept is associated with the previous question?": "Loop-and-a-half",
							"What is the result of this expression?": "11",
							"First Name": "Kian ",
							"How many times does this loop execute?": "50",
							"Which is not a logical operator?": "!",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"What is the output?": "Answer: 24",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the value of 'num' after this code is run?": "6.67",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "char",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean warm = readBoolean (\"Warm outside? \");\n    boolean rain = readBoolean (\"Raining? \");\n    if (warm = true && rain = true)\n    {\n        System.out.println (\"Nice Day: false\")\n    }\n    else if (warm = true && rain = false)\n    {\n        System.out.println (\"Nice day: true\");\n    }\n}\n",
							"Last Name": "Mistry",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int sum = 0\n    int even = readInt (\"Even Number: \");\n    for (int i = 0; i < even; i++)\n    }\n        sum += 2\n    {\n{"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"id": "Cg0IwJXv6QsQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-06T18:36:23.328Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-06T19:00:28.854Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:23.331Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:29.237Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:15:00.645Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucAFURJ7_bKJRyLwxMTZta_7Rm1_Khu4XRYKMuki5RYWx-sC1nvz3utLh2fTA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run() {\n    boolean isWarm = readBoolean(\"Warm outside?\");\n    boolean isRaining = readBoolean(\"Raining?\");\n    boolean isNiceDay = isWarm && !isRaining;\n    System.out.println(\"Nice day: \" + isNiceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run() {\n    int evenNumber = readInt(\"Even number: \");\n    while (evenNumber % 2 != 0 || evenNumber <= 0) {\n        evenNumber = readInt(\"Even number: \");\n    }\n    int sum = 0;\n    for (int i = 2; i <= evenNumber; i += 2) {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + evenNumber + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run() {\n    int hours = 0;\n    int minutes = 0;\n    int seconds = 0;\n    int totalTime = readInt(\"Total time: \");\n    if (totalTime / 3600 >= 1) {\n        hours = (totalTime - (totalTime % 3600)) / 3600;\n        totalTime -= hours * 3600;\n    }\n    if (totalTime / 60 >= 1) {\n        minutes = (totalTime - (totalTime % 60)) / 60;\n        totalTime -= minutes * 60;\n    }\n    seconds = totalTime;\n    int sum = hours + minutes + seconds;\n    System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run() {\n    int hours = 0;\n    int minutes = 0;\n    int seconds = 0;\n    int totalTime = readInt(\"Total time: \");\n    if (totalTime / 3600 >= 1) {\n        hours = (totalTime - (totalTime % 3600)) / 3600;\n        totalTime -= hours * 3600;\n    }\n    if (totalTime / 60 >= 1) {\n        minutes = (totalTime - (totalTime % 60)) / 60;\n        totalTime -= minutes * 60;\n    }\n    seconds = totalTime;\n    int sum = hours + minutes + seconds;\n    System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Kelton",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Java source code is saved in a file with which extension?": ".java",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 24",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run() {\n    boolean isWarm = readBoolean(\"Warm outside?\");\n    boolean isRaining = readBoolean(\"Raining?\");\n    boolean isNiceDay = isWarm && !isRaining;\n    System.out.println(\"Nice day: \" + isNiceDay);\n}",
							"Last Name": "Kuan",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run() {\n    int evenNumber = readInt(\"Even number: \");\n    while (evenNumber % 2 != 0 || evenNumber <= 0) {\n        evenNumber = readInt(\"Even number: \");\n    }\n    int sum = 0;\n    for (int i = 2; i <= evenNumber; i += 2) {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + evenNumber + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"id": "Cg0Ik7DJrAwQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-03-06T18:36:21.158Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-03-06T19:15:00.818Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:21.161Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:33.622Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:02:20.351Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud6Zzp6ejm4yvFGTnBHn49owx-BL1Yy2MDAuhvLK-KD0ll4VUOta_Rn0KoFKQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: boolean warm = readBoolean(“Warm outside? “);\nboolean rain = readBoolean(“Raining? “);\nboolean niceDay = true;\nif (warm && !rain) {\n    niceDay = true;\n} else {\n    niceDay = false;\n}\nSystem.out.println(“Nice day: “ + niceDay);\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: int num = readInt(“Even number: “);\nint sum = 0;\nfor (int i = 2; i <= num; i += 2) {\n    int sum += i;\n}\nSystem.out.println(“Even sum from 2 to “ + num + “ is “ + sum);\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: int totalSeconds = readInt(“Total time: “);\nint hours = totalSeconds / 3600;\nint minutes = totalSeconds % 3600 / 60;\nint seconds = totalSeconds % 3600 % 60 / 1;\nint sum = hours + minutes + seconds;\nSystem.out.println(“Sum is “ + sum);\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "int totalSeconds = readInt(“Total time: “);\nint hours = totalSeconds / 3600;\nint minutes = totalSeconds % 3600 / 60;\nint seconds = totalSeconds % 3600 % 60 / 1;\nint sum = hours + minutes + seconds;\nSystem.out.println(“Sum is “ + sum);",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Jiayu",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Which is a programming language?": "All of the above",
							"Java source code is saved in a file with which extension?": ".java",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "boolean warm = readBoolean(“Warm outside? “);\nboolean rain = readBoolean(“Raining? “);\nboolean niceDay = true;\nif (warm && !rain) {\n    niceDay = true;\n} else {\n    niceDay = false;\n}\nSystem.out.println(“Nice day: “ + niceDay);",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Chen",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "int num = readInt(“Even number: “);\nint sum = 0;\nfor (int i = 2; i <= num; i += 2) {\n    int sum += i;\n}\nSystem.out.println(“Even sum from 2 to “ + num + “ is “ + sum);"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-06T18:36:22.742Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-06T19:02:20.454Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QqqmFgLoV",
					"submittedAt": "2025-03-06T18:36:22.779Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:37.793Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:11:48.077Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucvDj46jrwGGR_jKmVV3h_jda4TnIq1KIRbXAHlz4PoTb42RODGH-6gWddCSw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Veznu\n\nQ: Last Name\nA: Premathas\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: boolean warm = readBoolean(\"Is it warm outside? \");\nboolean rain = readBoolean(\"Is it raining outside? \");\n        \nboolean niceDay = (warm && !rain);\nSystem.out.println(\"Nice day: \" + niceDay);\n        \n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: int sum = 0 ;\nint evenInteger = readInt(\"Enter a positive even number: \");\n        \nif (evenInteger > 0 && evenInteger%2==0)\n{\n    for(int i = 2; i <= evenInteger; i += 2)\n    {\n        sum = sum += i; \n    }\n    System.out.println(\"Even sum from 2 to \" + evenInteger + \" is \" + sum);\n}\nelse \n{\n    System.out.println(\"Number entered is not even.\");\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: \nint timeInSeconds = readInt(\"Total time: \");\n        \nint hours = timeInSeconds / 3600; \n        \n//Calculates remaining seconds after finding the number of hours \nint remainingSeconds = timeInSeconds % 3600; \nint minutes = remainingSeconds / 60; \n\nint seconds = remainingSeconds % 60; \n\nint sum = 0;\nsum = hours + minutes + seconds; \n    \nSystem.out.println(\"Sum is: \" + sum);\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: interpret",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "\nint timeInSeconds = readInt(\"Total time: \");\n        \nint hours = timeInSeconds / 3600; \n        \n//Calculates remaining seconds after finding the number of hours \nint remainingSeconds = timeInSeconds % 3600; \nint minutes = remainingSeconds / 60; \n\nint seconds = remainingSeconds % 60; \n\nint sum = 0;\nsum = hours + minutes + seconds; \n    \nSystem.out.println(\"Sum is: \" + sum);",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Veznu",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"The term that is used to describe the step for converting source code into bytecode is:": "interpret",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"Which is a programming language?": "All of the above",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "boolean warm = readBoolean(\"Is it warm outside? \");\nboolean rain = readBoolean(\"Is it raining outside? \");\n        \nboolean niceDay = (warm && !rain);\nSystem.out.println(\"Nice day: \" + niceDay);\n        ",
							"Last Name": "Premathas",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "int sum = 0 ;\nint evenInteger = readInt(\"Enter a positive even number: \");\n        \nif (evenInteger > 0 && evenInteger%2==0)\n{\n    for(int i = 2; i <= evenInteger; i += 2)\n    {\n        sum = sum += i; \n    }\n    System.out.println(\"Even sum from 2 to \" + evenInteger + \" is \" + sum);\n}\nelse \n{\n    System.out.println(\"Number entered is not even.\");\n}"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"id": "Cg0IhKbr2BYQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-06T18:36:24.293Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-06T19:11:48.385Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:24.301Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:41.905Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:22:13.594Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "349045377@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuftjbpt_cLm4UlIMuD9-_Vd16n2rpZz0W92DHyXdFOOZcb-evW70nrBUNNA8A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nathan\n\nQ: Last Name\nA: Ji\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: boolean day = readBoolean(\"Warm outside? \");\nboolean rain = readBoolean(\"Raining? \");\nboolean niceDay = warm && !raining;\nSystem.out.println(\"Nice day \" + niceDay);\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: int num = readInt(\"Even number: \");\nint evenSum = 0;\nfor (int i = 2; i <= num; i += 2) \n{\n    evenSum += i;\n}\nSystem.out.println(\"Even number: \" + num);\nSystem.out.println(\"Even sum from 2 to \" + num + \" is \" + evenSum);\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: int time = readInt(\"Total time: \");\nint hours = time / 3600;\nint minutes = (time % 3600) / 60;\nint seconds = time % 60\nint sum = hours + minutes + seconds;\nSystem.out.println(\"Sum is\" + sum);\n\nQ: \nA: B\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: There are too many '=' signs on the second line\n\nQ: What is the value of 'num' after this code is run?\nA: 0\n\nQ: What concept is associated with the previous question?\nA: Loop-and-a-half\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 4\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "B",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "int time = readInt(\"Total time: \");\nint hours = time / 3600;\nint minutes = (time % 3600) / 60;\nint seconds = time % 60\nint sum = hours + minutes + seconds;\nSystem.out.println(\"Sum is\" + sum);",
							"What concept is associated with the previous question?": "Loop-and-a-half",
							"What is the result of this expression?": "11",
							"First Name": "Nathan",
							"How many times does this loop execute?": "4",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 24",
							"What is the value of 'num' after this code is run?": "0",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "boolean day = readBoolean(\"Warm outside? \");\nboolean rain = readBoolean(\"Raining? \");\nboolean niceDay = warm && !raining;\nSystem.out.println(\"Nice day \" + niceDay);",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Ji",
							"Examine this code snippet. Which statement is correct?": "There are too many '=' signs on the second line",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "int num = readInt(\"Even number: \");\nint evenSum = 0;\nfor (int i = 2; i <= num; i += 2) \n{\n    evenSum += i;\n}\nSystem.out.println(\"Even number: \" + num);\nSystem.out.println(\"Even sum from 2 to \" + num + \" is \" + evenSum);"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Io-SHlhwQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-06T18:37:20.123Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-06T19:22:13.792Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:37:20.125Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:46.028Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:22:17.719Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuelhd-gy1peUsbiUqRg9RXwcAN3s-UZXVHmHIPlM--K3aKY_SJ8EdMWaColYA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void ()\n{\n    boolean warm = readBoolean(\"Warm outside? \"); \n    boolean rain = readBoolean(\"raining? \");\n    if(warm = true && rain = false)\n    {\n        System.out.println(\"Nice day: \" + \"true\");\n    }\n    else if(warm = false && rain = true)\n    {\n        System.out.println(\"Nice day: \" + \"false\");\n    }\n    else\n    {\n        System.out.println(\"Nice day: \" + \"false\"); \n    }\n}\n    \n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void ()\n{\n    int sum = 0;\n    int num = readInt(\"Even number: \");\n    for(int i = 0; i > num; i+=2)\n    {\n        sum = sum + i \n    }\n    System.out.println(\"Even sum from 2 to\" + num \"is\" + sum);\n}\n    \n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: private void ()\n{\n    int t = readInt(\"Total time: \"); \n    int hour = 3600;\n    int minute = 60;\n    int second = 1;\n    int totalHours = t / hour; \n    int remainderFromHours = t % hour;\n    int totalMinutes = remainderMinutes / minute;\n    int remainderFromMinutes = remainderMinutes % minute;\n    int totalSeconds = remainderFromMinutes / second;\n    int sum = totalHours + totalMinutes + totalSeconds;\n    System.out.println(sum); \n}\n\n\nQ: \nA: B\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 10\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .byte\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "B",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "private void ()\n{\n    int t = readInt(\"Total time: \"); \n    int hour = 3600;\n    int minute = 60;\n    int second = 1;\n    int totalHours = t / hour; \n    int remainderFromHours = t % hour;\n    int totalMinutes = remainderMinutes / minute;\n    int remainderFromMinutes = remainderMinutes % minute;\n    int totalSeconds = remainderFromMinutes / second;\n    int sum = totalHours + totalMinutes + totalSeconds;\n    System.out.println(sum); \n}\n",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Clark",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "10",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".byte",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void ()\n{\n    boolean warm = readBoolean(\"Warm outside? \"); \n    boolean rain = readBoolean(\"raining? \");\n    if(warm = true && rain = false)\n    {\n        System.out.println(\"Nice day: \" + \"true\");\n    }\n    else if(warm = false && rain = true)\n    {\n        System.out.println(\"Nice day: \" + \"false\");\n    }\n    else\n    {\n        System.out.println(\"Nice day: \" + \"false\"); \n    }\n}\n    ",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Chen",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void ()\n{\n    int sum = 0;\n    int num = readInt(\"Even number: \");\n    for(int i = 0; i > num; i+=2)\n    {\n        sum = sum + i \n    }\n    System.out.println(\"Even sum from 2 to\" + num \"is\" + sum);\n}\n    "
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-06T18:36:41.718Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-06T19:22:17.810Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8QqqmFgLoV",
					"submittedAt": "2025-03-06T18:36:41.722Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:50.206Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:09:05.288Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudS-lD0V6iwtP5n_sz9xrLt_Fud5urJuXNQRESbFwVQFNuXCfqQg9TPzYgdBw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Edward\n\nQ: Last Name\nA: Wang\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean warm = readBoolean (\"Warm outside? \");\n    boolean rain = readBoolean (\"Raining? \");\n    boolean niceDay = warm && !rain;\n    System.out.println (\"Nice day: \" + niceDay);\n}\n\n\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int number = readInt (\"Even number: \");\n    int sum = 0;\n    for (int i = 2 ; i <= number ; i++)\n    {\n        sum += i;\n        i++;      \n    }\n\n    System.out.println (\"Even sum from 2 to \" + number + \" is \" + sum\");\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int totalTime = readInt (\"Total time: \");\n    \n    int hours = totalTime/3600;\n    int minutes = (totalTime%3600)/60;\n    int seconds = (totalTime%3600)%60;\n\n    int sum = hours + minutes + seconds;\n  \n    System.out.println (\"Sum is \" + sum);\n}\n\nQ: \nA: A\nB\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 4\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A\nB",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int totalTime = readInt (\"Total time: \");\n    \n    int hours = totalTime/3600;\n    int minutes = (totalTime%3600)/60;\n    int seconds = (totalTime%3600)%60;\n\n    int sum = hours + minutes + seconds;\n  \n    System.out.println (\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Edward",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "4",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Java source code is saved in a file with which extension?": ".java",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean warm = readBoolean (\"Warm outside? \");\n    boolean rain = readBoolean (\"Raining? \");\n    boolean niceDay = warm && !rain;\n    System.out.println (\"Nice day: \" + niceDay);\n}\n\n",
							"Last Name": "Wang",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int number = readInt (\"Even number: \");\n    int sum = 0;\n    for (int i = 2 ; i <= number ; i++)\n    {\n        sum += i;\n        i++;      \n    }\n\n    System.out.println (\"Even sum from 2 to \" + number + \" is \" + sum\");\n}"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-06T18:36:23.433Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-06T19:09:05.436Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:23.441Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:54.272Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:17:36.987Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucz5ffjjh7PT_JWYfm95nuGKLLl2C9gFZ-x8iEHBvvF0kgetlBMwuosbdzASQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo \n\nQ: Last Name\nA: So\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n        boolean warm = readBoolean(\"Warm outside? \");\n        boolean rain = readBoolean(\"Raining? \");\n        boolean niceDay = warm && !rain;\n        System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n        int sum = 0;\n        int num = readInt(\"Even number: \");\n        for(int i = 0; i <= num; i+= 2) \n        { \n                sum+=i;\n        }\n        System.out.println(\"Even sum from 2 to \" + num + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n        int time = readInt(\"Total time: \");\n        int hours = time / 3600;\n        int min = time % 3600 / 60;\n        int sec = time % 3600 % 60 / 1;\n        int sum = hours + min + sec;\n        System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: execute",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n        int time = readInt(\"Total time: \");\n        int hours = time / 3600;\n        int min = time % 3600 / 60;\n        int sec = time % 3600 % 60 / 1;\n        int sum = hours + min + sec;\n        System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Leo ",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Java source code is saved in a file with which extension?": ".java",
							"The term that is used to describe the step for converting source code into bytecode is:": "execute",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n        boolean warm = readBoolean(\"Warm outside? \");\n        boolean rain = readBoolean(\"Raining? \");\n        boolean niceDay = warm && !rain;\n        System.out.println(\"Nice day: \" + niceDay);\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "So",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n        int sum = 0;\n        int num = readInt(\"Even number: \");\n        for(int i = 0; i <= num; i+= 2) \n        { \n                sum+=i;\n        }\n        System.out.println(\"Even sum from 2 to \" + num + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-06T18:36:29.769Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-06T19:17:37.099Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:29.774Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:45:58.448Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:25:25.694Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufUpIwEEtdQphVMwWFqIa5jAemx7u_QpW4C3DgDS7ahYES3beGfit_P0P0HZA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: boolean warm = readBoolean (\"Warm outside?\");\nboolean rain = readBoolean (\"Raining?\");\n\nboolean niceDay = warm && !rain;\n\nSystem.out.println (\"Nice day: \"+ niceDay);\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: int integer = readInt (\"Even number:\");\n\nint sum = 0;\nfor (int i = 2; i<=integer; i+=2)\n{\n    sum += i;\n}\n\nSystem.out.println (\"Even sum from 2 to \" + integer \" is \" + sum);\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: int time = readInt (\"Total time:\")'\n\nint hours = (time/3600);\nint minutes = (time%3600)/60;\nint seconds = (time%60);\n\n\nint sum =0\nsum = hours+minutes+seconds\n\nSystem.out.println (\"Sum is \" + sum);\n\nQ: \nA: B\n\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 0\n\nQ: What concept is associated with the previous question?\nA: Short Circuit\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "B\n",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "int time = readInt (\"Total time:\")'\n\nint hours = (time/3600);\nint minutes = (time%3600)/60;\nint seconds = (time%60);\n\n\nint sum =0\nsum = hours+minutes+seconds\n\nSystem.out.println (\"Sum is \" + sum);",
							"What concept is associated with the previous question?": "Short Circuit",
							"What is the result of this expression?": "11",
							"First Name": "Mark",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Java source code is saved in a file with which extension?": ".java",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "0",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "boolean warm = readBoolean (\"Warm outside?\");\nboolean rain = readBoolean (\"Raining?\");\n\nboolean niceDay = warm && !rain;\n\nSystem.out.println (\"Nice day: \"+ niceDay);",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Ku",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "int integer = readInt (\"Even number:\");\n\nint sum = 0;\nfor (int i = 2; i<=integer; i+=2)\n{\n    sum += i;\n}\n\nSystem.out.println (\"Even sum from 2 to \" + integer \" is \" + sum);"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ine-5hUQQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-06T18:36:28.037Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-06T19:25:25.882Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:28.039Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:02.898Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:50:09.524Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueN1U8nfENEq7L2yJPQHCTAiVO0bhcWrz3WQinYa3gGT1UBY6vqOA5HZsCtCA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean isWarm = readBoolean(\"Warm Outside? \"); \n    boolean isRaining = readBoolean(\"Raining? \");\n    boolean isNiceDay= isWarm && !isRaining; \n    System.out.println(\"Nice Day:\" + isNiceDay); \n} \n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int number = readInt(\" Even number: \");\n    for (int i=0; i < number; i+=2)\n    { \n        int sum = number + i;  \n    }\n    System.out.println(\"Even sum from 2 to \" + number + \"is\" + sum);\n}\n\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int time =readInt(\"Total time: \");\n    int hour = time / 3600; \n    int hourRemain = time % 3600; \n    int min = hourRemain / 60;\n    int second = hourRemain % 60; \n    int sum = hour + min + second; \n    System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int time =readInt(\"Total time: \");\n    int hour = time / 3600; \n    int hourRemain = time % 3600; \n    int min = hourRemain / 60;\n    int second = hourRemain % 60; \n    int sum = hour + min + second; \n    System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Carmen",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean isWarm = readBoolean(\"Warm Outside? \"); \n    boolean isRaining = readBoolean(\"Raining? \");\n    boolean isNiceDay= isWarm && !isRaining; \n    System.out.println(\"Nice Day:\" + isNiceDay); \n} ",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Cheung",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int number = readInt(\" Even number: \");\n    for (int i=0; i < number; i+=2)\n    { \n        int sum = number + i;  \n    }\n    System.out.println(\"Even sum from 2 to \" + number + \"is\" + sum);\n}\n"
						}
					},
					"late": true,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I0ruNqlsQqqmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-06T18:36:33.192Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-06T19:50:09.693Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:33.195Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:07.082Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:48:53.496Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueN-n3YvoNp6RDKnqexcjL6xUDI3R_WyPT3xe_M6m3hvJxnTtgOTKzZeAIRKQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Sena \n\nQ: Last Name\nA: Godek\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    niceDay();\n}\n\nprivate void niceDay()\n{\n    boolean isItWarm = readBool (\"Warm outside? \");\n    boolean isItRaining = readBool (\"Raining? \");\n    \n    boolean isItANiceDay = isItWarm && !isItRaining; \n\n    System.out.println(\"Nice day: \" + isItANiceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    sumOfAllEvenNum();\n}\n\nprivate void sumOfAllEvenNum()\n{\n   \n    int pickNum = readInt(\"Even number: \");\n    int sum = 0;\n    if(pickNum%2 == 0 && pickNum >=  2)\n    {\n        for(int i = 0; i < pickNum; i += 2)\n        {\n            sum += i; \n        }\n        System.out.println(\"Even sum from 2 to  \" + pickNUm + \" is \" +  sum);\n    }\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    sumOfTime();\n}\n\nprivate void sumOfTime()\n{\n    int t = readInt(\"Total time: \");\n    int h = t/3600; \n    int tAfterHrs = 0;\n\n    if(t < 3600)\n    {\n        tAfterHrs = t;\n    }\n    else\n    {\n        tAfterHrs = t%3600;\n    }\n\n    int m = tAfterHrs/60;\n    int s = 0;\n\n    if(t < 60)\n    {\n        s = t;\n    }\n    else\n    {\n       s = tAfterHrs%60;\n    }\n    int sum = h + m + s; \n    System.out.println(\"Sum is \" +  sum);\n\n}\n\nQ: \nA: A\nB\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A\nB",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    sumOfTime();\n}\n\nprivate void sumOfTime()\n{\n    int t = readInt(\"Total time: \");\n    int h = t/3600; \n    int tAfterHrs = 0;\n\n    if(t < 3600)\n    {\n        tAfterHrs = t;\n    }\n    else\n    {\n        tAfterHrs = t%3600;\n    }\n\n    int m = tAfterHrs/60;\n    int s = 0;\n\n    if(t < 60)\n    {\n        s = t;\n    }\n    else\n    {\n       s = tAfterHrs%60;\n    }\n    int sum = h + m + s; \n    System.out.println(\"Sum is \" +  sum);\n\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Sena ",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Java source code is saved in a file with which extension?": ".java",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    niceDay();\n}\n\nprivate void niceDay()\n{\n    boolean isItWarm = readBool (\"Warm outside? \");\n    boolean isItRaining = readBool (\"Raining? \");\n    \n    boolean isItANiceDay = isItWarm && !isItRaining; \n\n    System.out.println(\"Nice day: \" + isItANiceDay);\n}",
							"Last Name": "Godek",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    sumOfAllEvenNum();\n}\n\nprivate void sumOfAllEvenNum()\n{\n   \n    int pickNum = readInt(\"Even number: \");\n    int sum = 0;\n    if(pickNum%2 == 0 && pickNum >=  2)\n    {\n        for(int i = 0; i < pickNum; i += 2)\n        {\n            sum += i; \n        }\n        System.out.println(\"Even sum from 2 to  \" + pickNUm + \" is \" +  sum);\n    }\n}"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-06T18:36:27.025Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-06T19:48:53.769Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQqqmFgLoV",
					"submittedAt": "2025-03-06T18:36:27.028Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:11.377Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:22:41.838Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucEXgVC2kARizO_wio8I0j1PCLfv_95UubboydjehAroHva4bZ1FsQiibwSRw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run() {\n    boolean outside = readBool(\"Warm outside? \");\n    boolean raining = readBool(\"Raining? \");\n    boolean niceDay = outside && !raining;\n    System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run() {\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for(int i = 2; i <= num; i+=2) {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + num + \"is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run() {\n   int t = readInt(\"Total time: \");\n   int hours = t // 3600;\n   int minutes = (t % 3600) // 60;\n   int seconds = t % 60;\n   int sum  = hours + minutes + seconds;\n   System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: Java\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run() {\n   int t = readInt(\"Total time: \");\n   int hours = t // 3600;\n   int minutes = (t % 3600) // 60;\n   int seconds = t % 60;\n   int sum  = hours + minutes + seconds;\n   System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Saiful",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which is a programming language?": "Java",
							"Java source code is saved in a file with which extension?": ".java",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run() {\n    boolean outside = readBool(\"Warm outside? \");\n    boolean raining = readBool(\"Raining? \");\n    boolean niceDay = outside && !raining;\n    System.out.println(\"Nice day: \" + niceDay);\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Shaik",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run() {\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for(int i = 2; i <= num; i+=2) {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + num + \"is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iwe6fnb8OEKqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-06T18:37:29.832Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-06T19:22:41.987Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:37:29.836Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:15.612Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:27:40.126Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "350797049@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudi4atjzAKMeBS7_WonSJ2mk4CnmWt60aG445VqYt2b1YOgreKNPIkxCbM6PQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: John\n\nQ: Last Name\nA: Ning\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean isWarm = readBoolean (\"Is the weather warm? \");\n    boolean isRain = readBoolean (\"Is it raining? \");\n    if(isWarm == true && isRain == false)\n    {\n        boolean niceDay = true;\n    }\n    else\n    {\n        boolean niceDay = false;\n    }\n    System.out.println(\"Nice Day: \" + niceDay);\n} \n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int number = readInt(\"Choose an even and positive number: \");\n    \n    for(int i = 0; i < number; i++)\n    {\n        sum = sum + i;\n    }\n\n    System.out.println(\"Even sum from 2 to \" + number + \"is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run() \n{\n    int time = readInt(\"Total time: \");\n    int hours = time/3600; \n    int timeLeft = time % 3600;\n    int minutes = timeLeft/60;\n    int seconds = minutes % 60\n    int sum = hours + minutes + seconds;\n\n    System.out.println(\"Sum is \" + sum);\n}    \n\nQ: \nA: A\nB\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.output.print();\n\nQ: What is the result of this expression?\nA: 12\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: char\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 10\n\nQ: Which expression returns an answer of 5?\nA: 15 % 3\n\nQ: Examine this code snippet. Which statement is correct?\nA: The code compares a String with a boolean\n\nQ: What is the value of 'num' after this code is run?\nA: 0\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x || !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 4\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .class\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A\nB",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run() \n{\n    int time = readInt(\"Total time: \");\n    int hours = time/3600; \n    int timeLeft = time % 3600;\n    int minutes = timeLeft/60;\n    int seconds = minutes % 60\n    int sum = hours + minutes + seconds;\n\n    System.out.println(\"Sum is \" + sum);\n}    ",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "12",
							"First Name": "John",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "4",
							"What is the value of x after this code is run?": "10",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x || !y",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Java source code is saved in a file with which extension?": ".class",
							"What is the output?": "Answer: 24",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the value of 'num' after this code is run?": "0",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.output.print();",
							"Which expression returns an answer of 5?": "15 % 3",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean isWarm = readBoolean (\"Is the weather warm? \");\n    boolean isRain = readBoolean (\"Is it raining? \");\n    if(isWarm == true && isRain == false)\n    {\n        boolean niceDay = true;\n    }\n    else\n    {\n        boolean niceDay = false;\n    }\n    System.out.println(\"Nice Day: \" + niceDay);\n} ",
							"Which is NOT a primitive type?": "char",
							"Last Name": "Ning",
							"Examine this code snippet. Which statement is correct?": "The code compares a String with a boolean",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int number = readInt(\"Choose an even and positive number: \");\n    \n    for(int i = 0; i < number; i++)\n    {\n        sum = sum + i;\n    }\n\n    System.out.println(\"Even sum from 2 to \" + number + \"is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"studentWork": "[No content available]",
					"id": "Cg4I05uw78AOEKqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-03-06T18:36:21.853Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-03-06T19:27:50.279Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:21.856Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:19.674Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:18:41.767Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudi3zMg_qeorzHPzaL1kZnh0Y75OLDgeSeP0XCbGVNKdFzaSoWZ5R_3j12ubg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run() \n{\n     boolean warmOutside = readBoolean(\"Warm outside? \");\n     boolean rainOutside = readBoolean(\"Raining? \");\n     boolean niceDay = warmOutside && !rainOutside;\n     System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n     int evenNumber = readInt(\"Even number: \");\n     int sum = 0;\n     for (i = 2; i >= evenNumber; i+=2)\n     {\n          sum += i;\n     }\n     System.out.println(\"Even sum from 2 to \" + evenNumber + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run() \n{\n     int t = readInt(\"Total time: \");\n     int hours = t/3600;\n     int minutes = t%3600/60;\n     int seconds = t%3600%60;\n     int sum = hours + minutes + seconds;\n     System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Short Circuit\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run() \n{\n     int t = readInt(\"Total time: \");\n     int hours = t/3600;\n     int minutes = t%3600/60;\n     int seconds = t%3600%60;\n     int sum = hours + minutes + seconds;\n     System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Short Circuit",
							"What is the result of this expression?": "11",
							"First Name": "Nereyal",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Java source code is saved in a file with which extension?": ".java",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run() \n{\n     boolean warmOutside = readBoolean(\"Warm outside? \");\n     boolean rainOutside = readBoolean(\"Raining? \");\n     boolean niceDay = warmOutside && !rainOutside;\n     System.out.println(\"Nice day: \" + niceDay);\n}",
							"Last Name": "Jeyakumar",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n     int evenNumber = readInt(\"Even number: \");\n     int sum = 0;\n     for (i = 2; i >= evenNumber; i+=2)\n     {\n          sum += i;\n     }\n     System.out.println(\"Even sum from 2 to \" + evenNumber + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iurzi88AOEKqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-06T18:36:45.719Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-06T19:18:42.034Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:36:45.722Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:23.835Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"questionCount": 23,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:07:16.539Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuczhPRMd-qxrugurLIq3q8wamU55QvUmWJ0BykOXA_mY7qnNjcSNYvdoQfKJQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run() \n{\n    boolean weather = readBoolean(\"Warm outside? \");\n    boolean raining = readBoolean(\"Raining? \");\n\n    boolean niceDay = weather && !raining;\n    System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run() \n{\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for(int i = 0; i < num; i++)\n    {\n        if(i % 2 == 0)\n        {\n            sum += i;\n        }\n    }\n    System.out.println(\"Even sum from 2 to \" + num + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run() \n{\n    int total = readInt(\"Total time: \");\n    int hours = total/3600; \n    int leftOver1 = total % 3600;\n    int minutes = leftOver1/60;\n    int seconds = leftOver1 % 60;\n\n    int sum = hours + minutes + seconds; \n    System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: B\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "B",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run() \n{\n    int total = readInt(\"Total time: \");\n    int hours = total/3600; \n    int leftOver1 = total % 3600;\n    int minutes = leftOver1/60;\n    int seconds = leftOver1 % 60;\n\n    int sum = hours + minutes + seconds; \n    System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Cayden",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Java source code is saved in a file with which extension?": ".java",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Which is a programming language?": "All of the above",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What is the output?": "Answer: 1212",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run() \n{\n    boolean weather = readBoolean(\"Warm outside? \");\n    boolean raining = readBoolean(\"Raining? \");\n\n    boolean niceDay = weather && !raining;\n    System.out.println(\"Nice day: \" + niceDay);\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Chiu",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run() \n{\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for(int i = 0; i < num; i++)\n    {\n        if(i % 2 == 0)\n        {\n            sum += i;\n        }\n    }\n    System.out.println(\"Even sum from 2 to \" + num + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-06T18:36:18.261Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-06T19:07:16.672Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEKqphYC6FQ",
					"submittedAt": "2025-03-06T18:36:18.264Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:28.090Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:32:53.786Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudDW-X73VZy3L4Jx-FBrDpye0ienXf5wy_Q_37hDZVSm2Vi7RHUDY9xbpWDHQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: boolean temperature = readBoolean(\"Warn outside? \");\nboolean rain = readBoolean(\"Raining? \");\n\nboolean warmNiceDay = temperature == true;\nboolean rainNiceDay = rain == false;\n\nboolean niceDay = warmNiceDay && rainNiceDay;\nSystem.out.println(\"Nice day: \" + niceDay);\n\n\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: int output = readInt(\"Enter a positive even integer: \");\nint sum =2\nfor(int i=2; i<=output; i+=2)\n{\n    sum+=i;\n}\nSystem.out.println(\"Even sum from 2 to\" + output + \"is\" + sum);\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: int time = readInt(\"Enter the total time in seconds: \");\nint hour = time/3600;\nint minutes = (time - hour*3600)/60;\nint seconds = (time - hour *3600)%60;\n\nint sum = hour + minutes + seconds;\n\nSystem.out.println(\"Total time: \" + time);\nSystem.out.println(\"Sum is \" + sum); \n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .class\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "int time = readInt(\"Enter the total time in seconds: \");\nint hour = time/3600;\nint minutes = (time - hour*3600)/60;\nint seconds = (time - hour *3600)%60;\n\nint sum = hour + minutes + seconds;\n\nSystem.out.println(\"Total time: \" + time);\nSystem.out.println(\"Sum is \" + sum); ",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Owen",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".class",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "boolean temperature = readBoolean(\"Warn outside? \");\nboolean rain = readBoolean(\"Raining? \");\n\nboolean warmNiceDay = temperature == true;\nboolean rainNiceDay = rain == false;\n\nboolean niceDay = warmNiceDay && rainNiceDay;\nSystem.out.println(\"Nice day: \" + niceDay);\n\n",
							"Last Name": "Kung",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "int output = readInt(\"Enter a positive even integer: \");\nint sum =2\nfor(int i=2; i<=output; i+=2)\n{\n    sum+=i;\n}\nSystem.out.println(\"Even sum from 2 to\" + output + \"is\" + sum);"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-06T18:36:50.638Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-06T19:32:53.900Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEKqphYC6FQ",
					"submittedAt": "2025-03-06T18:36:50.641Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:32.370Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:12:50.977Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440021905@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue7H6DUFcv-EMuQYLOEYnFuSwxTfGpazmGyAUHB8RO9CTa4pCbjaTGaCN6FYw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clifton\n\nQ: Last Name\nA: Lin\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? \");\n    boolean niceDay = !warm && !rain;\n    System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run\n{\n    int evenNum = readInt(\"Even number: \");\n    int sum = 2;\n    for(int i = evenNum; i > 2; i-=2)\n    {\n        sum = (i) + sum;\n    }\n    System.out.println(\"Even sum from 2 to \" + evenNum + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run\n{\n    int time = readInt(\"Total time: \");\n    int hour = time / 3600;\n    int min = (time % 3600) /60;\n    int sec = (time % 3600) %60;\n    int total = hour + min + sec;\n    System.out.println(\"Sum is \" + total);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: true && !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: syntax",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run\n{\n    int time = readInt(\"Total time: \");\n    int hour = time / 3600;\n    int min = (time % 3600) /60;\n    int sec = (time % 3600) %60;\n    int total = hour + min + sec;\n    System.out.println(\"Sum is \" + total);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Clifton",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Which is a programming language?": "All of the above",
							"The term that is used to describe the step for converting source code into bytecode is:": "syntax",
							"Java source code is saved in a file with which extension?": ".java",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 24",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "true && !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? \");\n    boolean niceDay = !warm && !rain;\n    System.out.println(\"Nice day: \" + niceDay);\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Lin",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run\n{\n    int evenNum = readInt(\"Even number: \");\n    int sum = 2;\n    for(int i = evenNum; i > 2; i-=2)\n    {\n        sum = (i) + sum;\n    }\n    System.out.println(\"Even sum from 2 to \" + evenNum + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-06T18:36:40.674Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-06T19:12:51.098Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-06T19:12:56.868Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEKqphYC6FQ",
					"submittedAt": "2025-03-06T18:36:40.677Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:36.554Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:23:21.787Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue7ig44SRL3WPH8zLe1UyVF9ZBiFcsOUV4xi3WFJeBhTBlOcDCXZLxuKyE7MQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? \");\n    boolean niceDay = warm && rain;\n    System.out.println (\"Nice day: \" + niceDay);\n\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int evenNumber = readInt(Even number: );\n    int result = 0;\n    for (int i = evenNumber; i >= 2; i -= 2)\n    {\n        int result += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + evenNumber + \" is \" + result);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int time = readInt(\"Total time: \");\n    int hour = time / 3600;\n    int minute = time % 3600 / 60;\n    int second = time % 3600 % 60;\n    int sum = hour + minute + second;\n    System.out.println (\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .class\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: interpret",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int time = readInt(\"Total time: \");\n    int hour = time / 3600;\n    int minute = time % 3600 / 60;\n    int second = time % 3600 % 60;\n    int sum = hour + minute + second;\n    System.out.println (\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Jennifer",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "5",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Java source code is saved in a file with which extension?": ".class",
							"The term that is used to describe the step for converting source code into bytecode is:": "interpret",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? \");\n    boolean niceDay = warm && rain;\n    System.out.println (\"Nice day: \" + niceDay);\n\n}",
							"Last Name": "Zheng",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int evenNumber = readInt(Even number: );\n    int result = 0;\n    for (int i = evenNumber; i >= 2; i -= 2)\n    {\n        int result += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + evenNumber + \" is \" + result);\n}"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I7ZHxyucSEKqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-06T18:37:08.009Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-06T19:23:21.933Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:37:08.045Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:41.227Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:15:37.126Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufV1EHNuutw1ginXbwUK7oWGnMQsiP1hJpQqWMQKaB1zQJmGxSAUrX_h7_04A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? \");\n    boolean day = warm && rain;\n    System.out.println(\"Nice day: \" + day);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    while(true)\n    {\n        int num = readInt(\"Even number: \");\n        if(num % 2 == 0)\n        {\n            break();\n        }       \n    }\n    for (int i = 0; i < num; i+= 2)\n    {\n        int sum += i;\n    }\n    System.out.println(\"Even sum fron 2 to \" + num + \"is\" + sum);        \n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: private void run();\n{\n    int t = readInt(\"Total time: \");\n    int h = t % 3600;\n    t = t - 3600 * h;\n    int m = t % 60;\n    t = t - 60 * m;\n    int sum = h + m + t;\n    System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 12\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: int\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: !\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "private void run();\n{\n    int t = readInt(\"Total time: \");\n    int h = t % 3600;\n    t = t - 3600 * h;\n    int m = t % 60;\n    t = t - 60 * m;\n    int sum = h + m + t;\n    System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "12",
							"First Name": "Lionson",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "!",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "int",
							"Java source code is saved in a file with which extension?": ".java",
							"Which is a programming language?": "All of the above",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"What is the value of 'num' after this code is run?": "6",
							"Which expression results in 'true'?": "!false || !true",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? \");\n    boolean day = warm && rain;\n    System.out.println(\"Nice day: \" + day);\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Meng",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    while(true)\n    {\n        int num = readInt(\"Even number: \");\n        if(num % 2 == 0)\n        {\n            break();\n        }       \n    }\n    for (int i = 0; i < num; i+= 2)\n    {\n        int sum += i;\n    }\n    System.out.println(\"Even sum fron 2 to \" + num + \"is\" + sum);        "
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-06T18:36:28.970Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-06T19:15:37.310Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEKqphYC6FQ",
					"submittedAt": "2025-03-06T18:36:28.973Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:45.279Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:07:30.628Z",
								"totalFormResponses": 27,
								"formTitle": "Test: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440030068@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucmb18Lo72zlFuMUH7oaK-Z02FsSKtMYuGY5zaKcimQUYAN-PiMEQoP-bCE_w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Moses\n\nQ: Last Name\nA: He\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean temp= readBoolean(“Warm outside?”);\n    boolean weather= readBoolean(“Raining?”);\n    if(temp&& !weather)\n    {\n        System.out.println(“Nice day: true”);\n    }\n    else\n    {\n        System.out.println(“Nice day: false”);\n    }\n\n    \n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int number = readInt(“Even number:”);\n    for(int i=2;i<number;i+=2)\n    {\n        sum+=i ;\n    }\n    System.out.println(“Even sum from 2 to ”+ “ number ”+ “ is ” +sum);\n}\n\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int t =readInt(“Total time: ”);\n    int seconds =t%60 ;\n    int a= t-seconds ;\n    int minutes = t%3600 ;\n    int hours = t/3600 ;\n    int Sum = hours+minutes+seconds ;\n    System.out.println(“Sum is ”+ Sum);\n}\n\nQ: \nA: B\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 24\n\nQ: Which is NOT a primitive type?\nA: char\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 5\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .class\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "B",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int t =readInt(“Total time: ”);\n    int seconds =t%60 ;\n    int a= t-seconds ;\n    int minutes = t%3600 ;\n    int hours = t/3600 ;\n    int Sum = hours+minutes+seconds ;\n    System.out.println(“Sum is ”+ Sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Moses",
							"How many times does this loop execute?": "5",
							"Which is not a logical operator?": "++",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Which is a programming language?": "All of the above",
							"Java source code is saved in a file with which extension?": ".class",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"What is the output?": "Answer: 24",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean temp= readBoolean(“Warm outside?”);\n    boolean weather= readBoolean(“Raining?”);\n    if(temp&& !weather)\n    {\n        System.out.println(“Nice day: true”);\n    }\n    else\n    {\n        System.out.println(“Nice day: false”);\n    }\n\n    \n}",
							"Which is NOT a primitive type?": "char",
							"Last Name": "He",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int number = readInt(“Even number:”);\n    for(int i=2;i<number;i+=2)\n    {\n        sum+=i ;\n    }\n    System.out.println(“Even sum from 2 to ”+ “ number ”+ “ is ” +sum);\n}\n"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-03-06T18:36:17.925Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-03-06T19:07:30.753Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IuZzI4aUTEKqphYC6FQ",
					"submittedAt": "2025-03-06T18:36:17.929Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:49.285Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:16:38.369Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudrVZLsuNhi2zdc-B7hSehiboP65iwa_MXXGFmrYqtld_ZkkbOY382WHMVJZQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang \n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public void run()\n{\n    boolean WarmOutside =readBoolean(\"Warm outside? \");\n    boolean raining =  readBoolean(\"Raining? \");\n    boolean niceDay =  WarmOutside && raining;\n    System.out.println(niceDay)\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public void run()\n{\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for (int i = 2; i < num; i = i + 2);\n    {\n        sum = sum + i;\n    }\n    System.out.println(\"Even sum form 2 to \" + num + \"is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public void run()\n{\n    int time = readInt(\"Total time: \");\n    int hours = time/3600;\n    int minutes = time % 3600 / 60;\n    int seconds = time % 3600 % 60 / 1;\n    int sum = hours + minutes + seconds;\n    System.out.println(\"Sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 5\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 5\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 4\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public void run()\n{\n    int time = readInt(\"Total time: \");\n    int hours = time/3600;\n    int minutes = time % 3600 / 60;\n    int seconds = time % 3600 % 60 / 1;\n    int sum = hours + minutes + seconds;\n    System.out.println(\"Sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "5",
							"First Name": "Steven",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "4",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Java source code is saved in a file with which extension?": ".java",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"What is the output?": "Answer: 1212",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "5",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public void run()\n{\n    boolean WarmOutside =readBoolean(\"Warm outside? \");\n    boolean raining =  readBoolean(\"Raining? \");\n    boolean niceDay =  WarmOutside && raining;\n    System.out.println(niceDay)\n}",
							"Which is NOT a primitive type?": "String",
							"Last Name": "Wang ",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public void run()\n{\n    int num = readInt(\"Even number: \");\n    int sum = 0;\n    for (int i = 2; i < num; i = i + 2);\n    {\n        sum = sum + i;\n    }\n    System.out.println(\"Even sum form 2 to \" + num + \"is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-03-06T18:36:26.455Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-03-06T19:16:38.486Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEKqphYC6FQ",
					"submittedAt": "2025-03-06T18:36:26.459Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.815Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849386",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T19:24:56.600Z",
								"totalFormResponses": 27,
								"extractionMethod": "FormApp",
								"formTitle": "Test: Basic Java",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudne0uBqLZdacL9MDWDMSUNR_Mb8wAUov91z72jo1Vv-ctS17Akh3EP2RXWnw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: 1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.\nA: public class run()\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? );\n    boolean niceDay = warm && !rain;\n    System.out.println(\"Nice day: \" + niceDay);\n}\n\nQ: 2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.\nA: public class run()\n{\n    int userInput = readInt(\"Even number: \");\n    int sum = 0;\n    for(int i = 2; i <= userInput; i += 2)\n    {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + userInput + \" is \" + sum);\n}\n\nQ: 3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.\nA: public class run()\n{\n    int nSecs = readInt(\"Total time: \");\n    int nMins = nSecs / 60;\n    int tSecs = nSecs % 60;\n    int tHours = nMins / 60;\n    int tMins = nMins % 60; \n    int sum = tSecs + tMins + tHours;\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: \nA: A\n\nQ: What is the correct way to output text with a line feed (return character)?\nA: System.out.println();\n\nQ: What is the result of this expression?\nA: 11\n\nQ: What is the output?\nA: Answer: 1212\n\nQ: Which is NOT a primitive type?\nA: String\n\nQ: What type of variable is used to store a decimal number?\nA: double\n\nQ: What is the value of x after this code is run?\nA: 4\n\nQ: Which expression returns an answer of 5?\nA: 15 % 10\n\nQ: Examine this code snippet. Which statement is correct?\nA: Strings should use '.equals' to do comparisons\n\nQ: What is the value of 'num' after this code is run?\nA: 6\n\nQ: What concept is associated with the previous question?\nA: Casting\n\nQ: Which expression results in 'true'?\nA: !false || !true\n\nQ: Which is not a logical operator?\nA: ++\n\nQ: Which expression is equivalent to !(x || y)\nA: !x && !y\n\nQ: What concept is associated with the code from the previous question?\nA: De-Morgan's Law\n\nQ: How many times does this loop execute?\nA: 4\n\nQ: Which is a programming language?\nA: All of the above\n\nQ: Java source code is saved in a file with which extension?\nA: .java\n\nQ: The term that is used to describe the step for converting source code into bytecode is:\nA: compile",
						"structuredData": {
							"": "A",
							"3. The program gets the total time t in seconds from the user. Convert t into hours, minutes and seconds, and then output the sum of the hours, minutes and seconds.  You must use mod (%) in your solution.": "public class run()\n{\n    int nSecs = readInt(\"Total time: \");\n    int nMins = nSecs / 60;\n    int tSecs = nSecs % 60;\n    int tHours = nMins / 60;\n    int tMins = nMins % 60; \n    int sum = tSecs + tMins + tHours;\n    System.out.println(\"The sum is \" + sum);\n}",
							"What concept is associated with the previous question?": "Casting",
							"What is the result of this expression?": "11",
							"First Name": "Vivian",
							"Which is not a logical operator?": "++",
							"How many times does this loop execute?": "4",
							"What is the value of x after this code is run?": "4",
							"What type of variable is used to store a decimal number?": "double",
							"The term that is used to describe the step for converting source code into bytecode is:": "compile",
							"Which is a programming language?": "All of the above",
							"Which expression is equivalent to !(x || y)": "!x && !y",
							"Java source code is saved in a file with which extension?": ".java",
							"What concept is associated with the code from the previous question?": "De-Morgan's Law",
							"What is the output?": "Answer: 1212",
							"Which expression results in 'true'?": "!false || !true",
							"What is the value of 'num' after this code is run?": "6",
							"What is the correct way to output text with a line feed (return character)?": "System.out.println();",
							"Which expression returns an answer of 5?": "15 % 10",
							"Which is NOT a primitive type?": "String",
							"1. A 'nice day' is when it is warm outside and not raining. Create a program that asks the user if it is warm outside and if it is raining. Get the results as booleans and then output true if it is a nice day or false otherwise. For full marks, your code should only use boolean logic. Do not use any 'if' statements.": "public class run()\n{\n    boolean warm = readBoolean(\"Warm outside? \");\n    boolean rain = readBoolean(\"Raining? );\n    boolean niceDay = warm && !rain;\n    System.out.println(\"Nice day: \" + niceDay);\n}",
							"Last Name": "Li",
							"Examine this code snippet. Which statement is correct?": "Strings should use '.equals' to do comparisons",
							"2. Ask the user for a POSITIVE EVEN integer and output the sum of all even integers from 2 to that number. You must use a 'for' loop.": "public class run()\n{\n    int userInput = readInt(\"Even number: \");\n    int sum = 0;\n    for(int i = 2; i <= userInput; i += 2)\n    {\n        sum += i;\n    }\n    System.out.println(\"Even sum from 2 to \" + userInput + \" is \" + sum);\n}"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg2/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"id": "Cg4Iz_iw9dcUEKqphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-06T18:37:54.240Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-06T19:24:56.747Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-06T18:37:54.243Z",
					"assignmentName": "Unit 2 Test: Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.818Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-05T12:02:59.358Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-18T13:41:27.907Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQrKmFgLoV",
					"submittedAt": "2025-03-05T12:02:59.411Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.822Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-05T12:02:45.028Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-20T17:39:04.652Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQrKmFgLoV",
					"submittedAt": "2025-03-05T12:02:45.061Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.827Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"id": "Cg0I_qLZkQsQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-05T12:02:38.040Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-22T16:03:45.492Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:02:38.046Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.830Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IwJXv6QsQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-05T12:02:59.376Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-23T22:35:54.052Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:02:59.382Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.834Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"id": "Cg0Ik7DJrAwQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-03-05T12:02:10.043Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-03-18T17:34:03.874Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:02:10.074Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.836Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-05T12:03:01.726Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-21T16:19:05.278Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QrKmFgLoV",
					"submittedAt": "2025-03-05T12:03:01.776Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.838Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-05T12:02:55.913Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-25T00:31:56.503Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:02:55.920Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.840Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Io-SHlhwQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-05T12:06:18.479Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-19T20:53:10.179Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:06:18.514Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.843Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-05T12:04:43.556Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-04-17T12:49:25.712Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8QrKmFgLoV",
					"submittedAt": "2025-03-05T12:04:43.560Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.846Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Edward Wang",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"id": "Cg0I7-PGhEAQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-05T12:04:45.513Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-27T17:50:42.559Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:04:45.520Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.848Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"id": "Cg0Ir5z7q0AQrKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-05T12:02:17.923Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-24T18:48:51.611Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:02:17.930Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.851Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-05T12:05:18.148Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-22T18:47:37.896Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQrKmFgLoV",
					"submittedAt": "2025-03-05T12:05:18.154Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.854Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-05T12:04:08.331Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-23T01:58:53.644Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQrKmFgLoV",
					"submittedAt": "2025-03-05T12:04:08.366Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.857Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-05T12:02:36.878Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-21T18:36:55.661Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQrKmFgLoV",
					"submittedAt": "2025-03-05T12:02:36.883Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.859Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-05T12:04:37.153Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-17T17:45:42.401Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEKyphYC6FQ",
					"submittedAt": "2025-03-05T12:04:37.187Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.862Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"studentWork": "[No content available]",
					"id": "Cg4I05uw78AOEKyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-03-05T12:02:23.977Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-03-21T17:37:07.518Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:02:24.012Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.866Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-05T12:04:02.922Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-24T05:21:10.447Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEKyphYC6FQ",
					"submittedAt": "2025-03-05T12:04:02.953Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.868Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEKyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-05T12:03:53.913Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-24T18:02:20.834Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:03:53.918Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.871Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"id": "Cg4I5dKR18sOEKyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-05T12:03:21.724Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-29T17:07:39.548Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:03:21.759Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.874Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-05T12:03:27.098Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-26T18:37:53.640Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEKyphYC6FQ",
					"submittedAt": "2025-03-05T12:03:27.103Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.879Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-05T12:03:09.269Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-24T17:18:00.203Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEKyphYC6FQ",
					"submittedAt": "2025-03-05T12:03:09.274Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.882Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-05T12:05:46.122Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-19T17:41:50.547Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEKyphYC6FQ",
					"submittedAt": "2025-03-05T12:05:46.126Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:46:53.884Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849388",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzg4/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iz_iw9dcUEKyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-05T12:03:45.528Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-04-15T03:48:50.990Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-05T12:03:45.533Z",
					"assignmentName": "Unit 3: Strings and Methods",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:01.193Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:09:34.124Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349168732@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucPDPRq_X8UKlfNK4HPuQbhuY0L5D_JaITAaGG4BLgLKsoSRo3_naxkwMjdDA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Joe\n\nQ: Last Name\nA: Zhuo\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void square(int length) {\n    System.out.println(\"Perimeter is \" + 4*length);\n    System.out.println(\"Area is \" + length*length);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: int sum = 0;\nfor (int i = 0; i < 3; i++) {\n    int num = readInt(\"Enter a number: \");\n    sum += num;\n}\nSystem.out.println(\"The sum is \" + sum);\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int dimes = 0, nickels = 0, pennies = 0;\npublic void centsToCoins(int cents) {\n    dimes = cents/10;\n    nickels = (cents%(dimes*10))/5;\n    pennies = (cents%(dimes*10+nickels*5))/5;\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Joe",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "int sum = 0;\nfor (int i = 0; i < 3; i++) {\n    int num = readInt(\"Enter a number: \");\n    sum += num;\n}\nSystem.out.println(\"The sum is \" + sum);",
							"Get the side length of a square and output both its perimeter and area.": "public void square(int length) {\n    System.out.println(\"Perimeter is \" + 4*length);\n    System.out.println(\"Area is \" + length*length);\n}",
							"Last Name": "Zhuo",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int dimes = 0, nickels = 0, pennies = 0;\npublic void centsToCoins(int cents) {\n    dimes = cents/10;\n    nickels = (cents%(dimes*10))/5;\n    pennies = (cents%(dimes*10+nickels*5))/5;\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IvfCrsQEQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-04T12:03:37.559Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-03-04T19:09:34.257Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:03:37.593Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:04.267Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-05T19:21:02.297Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf3c-C_f3hFzNcFXofiXaRb96oawPI4yo92Ld5XMv0miftTaxt2gsWQq6zBmQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n    int sideLength = readInt(\"Length? \");\n\n    int perimeter = sideLength * 4;\n    int area = sideLength * sideLength;\n\n   System.out.println(\"Perimeter is \" + perimeter);\n   System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    int sum = 0;\n\n    for (int i = 0; i < 3; i++)\n    {\n        int number = readInt(\"Enter a number: \");\n        sum += number;\n    }\n\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n{\n    int amount = readInt(\"Amount? );\n    int dimes = amount/10;\n    int nickels = 0;\n    int pennies = 0;\n\n    coinCheck();\n\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}\n\nprivate void coinCheck()\n{\n    if (amount % 10 != 0)\n    {\n        int leftover = amount - (dimes * 10);\n\n        while (leftover - 5 > 0)\n        {\n            leftover -= 5;\n            nickels++;\n        }\n        \n        leftover = pennies;\n    }\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Abithan",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    int sum = 0;\n\n    for (int i = 0; i < 3; i++)\n    {\n        int number = readInt(\"Enter a number: \");\n        sum += number;\n    }\n\n    System.out.println(\"The sum is \" + sum);\n}",
							"Last Name": "Paskaranathan",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n    int sideLength = readInt(\"Length? \");\n\n    int perimeter = sideLength * 4;\n    int area = sideLength * sideLength;\n\n   System.out.println(\"Perimeter is \" + perimeter);\n   System.out.println(\"Area is \" + area);\n}",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n{\n    int amount = readInt(\"Amount? );\n    int dimes = amount/10;\n    int nickels = 0;\n    int pennies = 0;\n\n    coinCheck();\n\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}\n\nprivate void coinCheck()\n{\n    if (amount % 10 != 0)\n    {\n        int leftover = amount - (dimes * 10);\n\n        while (leftover - 5 > 0)\n        {\n            leftover -= 5;\n            nickels++;\n        }\n        \n        leftover = pennies;\n    }\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-04T12:03:45.813Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-03-05T19:21:02.488Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQp6mFgLoV",
					"submittedAt": "2025-03-04T12:03:45.847Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:06.656Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:01:23.597Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufqpavsjem1w6fpNev_QEgtOL-lfsfHRZxWv0P9qqfDhao9TthVD_nexb7VLQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: int length = readInt(\"Length? \");\nSystem.out.println(\"Perimeter is \" + length*4);\nSystem.out.println(\"Length is \" + length*length);\n\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: sum = 0;\nfor (int i = 0; i < 3; i ++)\n{\n    int number = readInt(\"Enter a number: \");\n    sum += number;\n}\n\nSystem.out.println(\"The sum is \" + sum);\n\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int total = readInt(\"Amount? \");\n        int dimes = 0;\n        int nickels = 0;\n        int pennies = 0;\n        while(total > 0)\n        {\n            dimes = (total - total % 10)/10;\n            total = total - dimes * 10;\n            nickels = (total - total % 5)/5;\n            total = total - nickels * 5;\n            pennies = total;\n            break;\n        }\n        \n        System.out.println(\"Dimes: \" + dimes);\n        System.out.println(\"Nickels: \" + nickels);\n        System.out.println(\"Pennies: \" + pennies);\n\nQ: \nA: 8\n7\n6\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Compile error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Owen",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Compile error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "sum = 0;\nfor (int i = 0; i < 3; i ++)\n{\n    int number = readInt(\"Enter a number: \");\n    sum += number;\n}\n\nSystem.out.println(\"The sum is \" + sum);\n",
							"Which operator would you use to get the remainder?": "%",
							"Get the side length of a square and output both its perimeter and area.": "int length = readInt(\"Length? \");\nSystem.out.println(\"Perimeter is \" + length*4);\nSystem.out.println(\"Length is \" + length*length);\n",
							"Last Name": "Lee",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int total = readInt(\"Amount? \");\n        int dimes = 0;\n        int nickels = 0;\n        int pennies = 0;\n        while(total > 0)\n        {\n            dimes = (total - total % 10)/10;\n            total = total - dimes * 10;\n            nickels = (total - total % 5)/5;\n            total = total - nickels * 5;\n            pennies = total;\n            break;\n        }\n        \n        System.out.println(\"Dimes: \" + dimes);\n        System.out.println(\"Nickels: \" + nickels);\n        System.out.println(\"Pennies: \" + pennies);",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"id": "Cg0I_qLZkQsQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-04T12:03:27.588Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-04T19:01:23.757Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:03:27.623Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:08.958Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T14:38:20.368Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucDhkiSVMmSI8zNBgViRoUjD3Q049kxCKuE3lXgIrlhDDC7lTJi_pCotxEGLA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kian\n\nQ: Last Name\nA: Mistry\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n        int length = readInt (\"Length? \");\n        System.out.println (\"Perimeter is \" + length * 4);\n        System.out.println (\"Area is\" + length * length);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    int one = readInt (\"Enter a number: \");\n    int two = readInt (\"Enter a number: \");\n    int three = readInt (\"Enter a number: \");\n    System.out.println (\"The sum is \" + one + two + three);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n{\n    int cents = readInt (\"Amount? \");\n\n    int dimes = cents / 10;\n    cents = cents  % 10;\n\n    int nickels = cents / 5;\n    cents = cents % 5;\n\n    int pennies = cents;\n\n    System.out.println (\"Dimes: \" + dimes);\n    System.out.println (\"Nickels \" + nickels);\n    System.out.println (\"Pennies \" + pennies);\n\n    \n\n}\n\n\nQ: \nA: \n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Kian",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    int one = readInt (\"Enter a number: \");\n    int two = readInt (\"Enter a number: \");\n    int three = readInt (\"Enter a number: \");\n    System.out.println (\"The sum is \" + one + two + three);\n}",
							"Which operator would you use to get the remainder?": "%",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n        int length = readInt (\"Length? \");\n        System.out.println (\"Perimeter is \" + length * 4);\n        System.out.println (\"Area is\" + length * length);\n}",
							"Last Name": "Mistry",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n{\n    int cents = readInt (\"Amount? \");\n\n    int dimes = cents / 10;\n    cents = cents  % 10;\n\n    int nickels = cents / 5;\n    cents = cents % 5;\n\n    int pennies = cents;\n\n    System.out.println (\"Dimes: \" + dimes);\n    System.out.println (\"Nickels \" + nickels);\n    System.out.println (\"Pennies \" + pennies);\n\n    \n\n}\n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IwJXv6QsQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-04T12:04:12.708Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-06T14:38:20.512Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:04:12.733Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:16.935Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-05T00:20:27.514Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucOfcvlalPxJl2jDBO2GCdLpVU8d8kj3Yc3u8N9yOgg5KCQpt8sMuyMjC_kZg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: int length = readInt(\"Length? \");\nint perimeter = length * 4;\nint area = length * length;\nSystem.out.println(\"Perimeter is \" + perimeter);\nSystem.out.println(\"Area is \" + area);\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: int sum = 0;\nfor (int i = 0; i < 3; i++) {\n    int num = readInt(\"Enter a number: \");\n    sum += num;\n}\nSystem.out.println(\"The sum is \" + sum);\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int amount = readInt(\"Amount? \");\nwhile (amount > 0) {\n\tif (amount % 10 == 0) {\n\t\tSystem.out.println(\"Dimes: \" + amount / 10);\n\t\tSystem.out.println(\"Nickels: 0\");\n\t\tSystem.out.println(\"Pennies: 0\");\n\t\tbreak;\n\t} else {\n\t\tSystem.out.println(\"Dimes: \" + amount / 10);\n\t\tamount = amount % 10;\n\t\tif (amount % 5 == 0) {\n\t\t\tSystem.out.println(\"Nickels: \" + amount / 5);\n\t\t\tSystem.out.println(\"Pennies: 0\");\n\t\t\tbreak;\n\t\t} else {\n\t\t\tSystem.out.println(\"Nickels: \" + amount / 5);\n\t\t\tamount = amount % 5;\n\t\t\tSystem.out.println(\"Pennies: \" + amount / 1);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 0.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Syntax error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: true\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "0.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Jiayu",
							"What boolean is equivalent to this logical expression?   !(true || false)": "true",
							"What type of error is this?   int x = 18.43;": "Syntax error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "int sum = 0;\nfor (int i = 0; i < 3; i++) {\n    int num = readInt(\"Enter a number: \");\n    sum += num;\n}\nSystem.out.println(\"The sum is \" + sum);",
							"Which operator would you use to get the remainder?": "%",
							"Last Name": "Chen",
							"Get the side length of a square and output both its perimeter and area.": "int length = readInt(\"Length? \");\nint perimeter = length * 4;\nint area = length * length;\nSystem.out.println(\"Perimeter is \" + perimeter);\nSystem.out.println(\"Area is \" + area);",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int amount = readInt(\"Amount? \");\nwhile (amount > 0) {\n\tif (amount % 10 == 0) {\n\t\tSystem.out.println(\"Dimes: \" + amount / 10);\n\t\tSystem.out.println(\"Nickels: 0\");\n\t\tSystem.out.println(\"Pennies: 0\");\n\t\tbreak;\n\t} else {\n\t\tSystem.out.println(\"Dimes: \" + amount / 10);\n\t\tamount = amount % 10;\n\t\tif (amount % 5 == 0) {\n\t\t\tSystem.out.println(\"Nickels: \" + amount / 5);\n\t\t\tSystem.out.println(\"Pennies: 0\");\n\t\t\tbreak;\n\t\t} else {\n\t\t\tSystem.out.println(\"Nickels: \" + amount / 5);\n\t\t\tamount = amount % 5;\n\t\t\tSystem.out.println(\"Pennies: \" + amount / 1);\n\t\t\tbreak;\n\t\t}\n\t}\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-04T12:04:37.273Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-03-05T00:20:27.705Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Qp6mFgLoV",
					"submittedAt": "2025-03-04T12:04:37.306Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:19.319Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T02:26:18.393Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc1s9KWAo3n98clPHUSIXS1tmheNScKFOaCY88xyUzHZ_3BdHnSBUbZ9NYXGg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Veznu\n\nQ: Last Name\nA: Premathas\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: int length = readInt(\"Length? \");\n\nint perimeter  = length*4;\nint area = length*length;\n\nSystem.out.println(\"Perimeter is: \" + perimeter);\nSystem.out.println(\"Area is: \" + area);\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: int firstNumber = readInt(\"Enter a number: \");\nint secondNumber = readInt(\"Enter a number: \");\nint thirdNumber = readInt(\"Enter a number: \");\n\nint sum = firstNumber + secondNumber + thirdNumber;\nSystem.out.println(sum);\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int amount = readInt(\"Amount: \");\n\nint dimes = amount/10;\nint nickels = amount \n\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: true\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Veznu",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "true",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "int firstNumber = readInt(\"Enter a number: \");\nint secondNumber = readInt(\"Enter a number: \");\nint thirdNumber = readInt(\"Enter a number: \");\n\nint sum = firstNumber + secondNumber + thirdNumber;\nSystem.out.println(sum);",
							"Which operator would you use to get the remainder?": "%",
							"Last Name": "Premathas",
							"Get the side length of a square and output both its perimeter and area.": "int length = readInt(\"Length? \");\n\nint perimeter  = length*4;\nint area = length*length;\n\nSystem.out.println(\"Perimeter is: \" + perimeter);\nSystem.out.println(\"Area is: \" + area);",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int amount = readInt(\"Amount: \");\n\nint dimes = amount/10;\nint nickels = amount \n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"id": "Cg0IhKbr2BYQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-04T12:03:57.359Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-06T02:26:18.622Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:03:57.384Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:22.094Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-03-06T15:19:17.663Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufnCidlXMkDkaO8GqDQeYUXyj0Stzb9SiUR9hkpod-4ZxHb2O3X07N6KUMNaA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public class run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    System.out.println(\"Perimeter is \" + perimeter);\n    int area = length * length;\n    System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public class run()\n{\n    int sum = 0;\n    for(int i = 0; i > 3; i++)\n    {\n        int integer = readInt(\"Enter a number: \")\n        sum += integer;\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public class run()\n{\n    int amount = readInt(\"amount? \");\n    int nDimes = amount / 10;\n    System.out.println(\"Dimes: \" + nDimes);\n    int rDimes = amount % 10;\n    int nNickels = rDimes / 5;\n    System.out.println(\"Nickels: \" + nNickels);\n    int rNickels = rDimes % 5;\n    System.out.println(\"Pennies: \" + rNickels);\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Compile error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Vivian",
							"What type of error is this?   int x = 18.43;": "Compile error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public class run()\n{\n    int sum = 0;\n    for(int i = 0; i > 3; i++)\n    {\n        int integer = readInt(\"Enter a number: \")\n        sum += integer;\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n",
							"Which operator would you use to get the remainder?": "%",
							"Last Name": "Li",
							"Get the side length of a square and output both its perimeter and area.": "public class run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    System.out.println(\"Perimeter is \" + perimeter);\n    int area = length * length;\n    System.out.println(\"Area is \" + area);\n}",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public class run()\n{\n    int amount = readInt(\"amount? \");\n    int nDimes = amount / 10;\n    System.out.println(\"Dimes: \" + nDimes);\n    int rDimes = amount % 10;\n    int nNickels = rDimes / 5;\n    System.out.println(\"Nickels: \" + nNickels);\n    int rNickels = rDimes % 5;\n    System.out.println(\"Pennies: \" + rNickels);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"id": "Cg0Io-SHlhwQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-04T12:05:16.398Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-03-19T20:53:22.173Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:05:16.437Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:27.449Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-05T02:31:59.224Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudvNfDcVNn5PeY-z8FSZ1S6UCSYSdn7yJ0I4mKgPkus9byu8lVk3_atgMXMIQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run ()\n{\n    int length = readInt (\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n}\n\n    \n\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run ()\n{\n    int first = readInt(\"Enter a number: \");\n    int second = readInt(\"Enter a number: \");\n    int third = readInt(\"Enter a number: \");\n    int sum = first + second + third;\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: \nint total = readInt(\"Amount? \"); \nint dimes = 10;\nint nickels = 5;\nint pennies = 1;\nint totalDimes = total / dimes ;\nint remainderValueDimes = total % dimes;\nint totalNickels = remainderValueDimes / nickels;\nint remainderValueNickels = remainderValueDimes % nickels;\nint totalPennies = remainderValueNickels;\nSystem.out.println(\"Dimes: \" + totalDimes);\nSystem.out.println(\"Nickels: \" + totalNickels);\nSystem.out.println(\"Pennies: \" + totalPennies);\n\n\n\n\n\nQ: \nA: 8\n7\n6\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Syntax error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: true\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Clark",
							"What type of error is this?   int x = 18.43;": "Syntax error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "true",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run ()\n{\n    int first = readInt(\"Enter a number: \");\n    int second = readInt(\"Enter a number: \");\n    int third = readInt(\"Enter a number: \");\n    int sum = first + second + third;\n    System.out.println(\"The sum is \" + sum);\n}",
							"Which operator would you use to get the remainder?": "%",
							"Get the side length of a square and output both its perimeter and area.": "public void run ()\n{\n    int length = readInt (\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n}\n\n    \n",
							"Last Name": "Chen",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "\nint total = readInt(\"Amount? \"); \nint dimes = 10;\nint nickels = 5;\nint pennies = 1;\nint totalDimes = total / dimes ;\nint remainderValueDimes = total % dimes;\nint totalNickels = remainderValueDimes / nickels;\nint remainderValueNickels = remainderValueDimes % nickels;\nint totalPennies = remainderValueNickels;\nSystem.out.println(\"Dimes: \" + totalDimes);\nSystem.out.println(\"Nickels: \" + totalNickels);\nSystem.out.println(\"Pennies: \" + totalPennies);\n\n\n\n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-04T12:04:49.885Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-03-05T02:31:59.430Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8Qp6mFgLoV",
					"submittedAt": "2025-03-04T12:04:49.922Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:32.400Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:10:25.281Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuectEoF7A4GdYSaiYEC7wN4U_hNqOMFkoQgBo-C-qZAfWVY-0qd5rY0W-xa7Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Edward \n\nQ: Last Name\nA: Wang\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: int length = readInt (\"Length? );\nint perimeter = length*4;\nint area = length*length;\nSystem.out.println (\"Perimeter is \" + perimeter);\nSystem.out.println (\"Area is \" + area);\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: int sum = 0;\nfor (int i = 0 ;  i < 3 ; i++)\n{\n    int number = readInt (\"Enter a number: \");\n    sum += number;\n}\nSystem.out.println (\"The sum is \" + sum);\n\n\n\n\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int amount = readInt (\"Amount? \");\nint dimes = amount/10;\nint nickels = (amount%(dimes*10))/5;\nint pennies = (amount%(dimes*10+nickels*5));\n\nSystem.out.println (\"Dimes : \" + dimes);\nSystem.out.println (\"Nickels: \" + nickels);\nSystem.out.println (\"Pennies: \" + pennies);\n\n\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Edward ",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "int sum = 0;\nfor (int i = 0 ;  i < 3 ; i++)\n{\n    int number = readInt (\"Enter a number: \");\n    sum += number;\n}\nSystem.out.println (\"The sum is \" + sum);\n\n\n\n",
							"Last Name": "Wang",
							"Get the side length of a square and output both its perimeter and area.": "int length = readInt (\"Length? );\nint perimeter = length*4;\nint area = length*length;\nSystem.out.println (\"Perimeter is \" + perimeter);\nSystem.out.println (\"Area is \" + area);",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int amount = readInt (\"Amount? \");\nint dimes = amount/10;\nint nickels = (amount%(dimes*10))/5;\nint pennies = (amount%(dimes*10+nickels*5));\n\nSystem.out.println (\"Dimes : \" + dimes);\nSystem.out.println (\"Nickels: \" + nickels);\nSystem.out.println (\"Pennies: \" + pennies);\n\n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-04T12:05:48.127Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-04T19:10:25.433Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQp6mFgLoV",
					"submittedAt": "2025-03-04T12:05:48.160Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:47.515Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-05T19:19:29.884Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueuvZucttJfA_m_s4Wdm0npdd71buidx5DFSasWTCI05hP1PIRAEJsUSUINSw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n        int length = readInt(\"Length? \");\n        int perimeter = length * 4;\n        int area = length * length;\n        System.out.println(\"Perimeter is \" + perimeter);\n        System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n        int sum = 0;\n        for(int i = 0; i < 3; i++)\n        {\n                int num = readInt(\"Enter a number: \");\n                sum += num;\n        }\n        System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run() \n{\n        int amount = readInt(\"Amount? \");\n        int dimes = amount/10;\n        int remaining = amount % 10;\n        int nickels = remaining / 5;\n        int pennies = remaining % 5;\n        System.out.println(\"Dimes: \" + dimes);\n        System.out.println(\"Nickels: \" + nickels);\n        System.out.println(\"Pennies: \" + pennies);\n}\n\nQ: \nA: 5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Syntax error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: true\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Leo",
							"What type of error is this?   int x = 18.43;": "Syntax error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "true",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n        int sum = 0;\n        for(int i = 0; i < 3; i++)\n        {\n                int num = readInt(\"Enter a number: \");\n                sum += num;\n        }\n        System.out.println(\"The sum is \" + sum);\n}",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n        int length = readInt(\"Length? \");\n        int perimeter = length * 4;\n        int area = length * length;\n        System.out.println(\"Perimeter is \" + perimeter);\n        System.out.println(\"Area is \" + area);\n}",
							"Last Name": "So",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run() \n{\n        int amount = readInt(\"Amount? \");\n        int dimes = amount/10;\n        int remaining = amount % 10;\n        int nickels = remaining / 5;\n        int pennies = remaining % 5;\n        System.out.println(\"Dimes: \" + dimes);\n        System.out.println(\"Nickels: \" + nickels);\n        System.out.println(\"Pennies: \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"id": "Cg0Ir5z7q0AQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-04T12:03:12.741Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-03-05T19:19:30.021Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:03:12.771Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:47:54.506Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-05T01:20:03.416Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufNURgRtD0QD4LcIszjtF5DgXVV5VaR3QWYlpnuoQtaPXol0qaizIAZXkoXGQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: int length = readInt (\"Length?\");\n\n\n\nSystem.out.println (\"Perimeter is \" + length*4);\n\n\nSystem.out.println (\"Area is \" + length*length);\n\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: int sum=0;\n        for (int i=0; i<3; i++)\n        {\n            int number = readInt (\"enter a number:\");\n            sum+=number;\n        }\n        \n      \n        System.out.println (\"The sum is \" + sum);\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int amount = readInt (\"Amount?\");\n\n\nint dimes =  amount/10;\nint remainingAfterDimes = amount %10;\n\nint nickels = remainingAfterDimes/5;\nint remainingAfterNickels = remainingAfterDimes % 5;\n\n int pennies = remainingAfterNickels;\n\nSystem.out.println(\"Dimes: \" + dimes);\nSystem.out.println(\"Nickels: \" + nickels);\nSystem.out.println(\"Pennies: \" + pennies);\n\n\nQ: \nA: 8\n7\n6\n5\n8\n7\n6\n5\n8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5\n8\n7\n6\n5\n8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Mark",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "int sum=0;\n        for (int i=0; i<3; i++)\n        {\n            int number = readInt (\"enter a number:\");\n            sum+=number;\n        }\n        \n      \n        System.out.println (\"The sum is \" + sum);",
							"Which operator would you use to get the remainder?": "%",
							"Get the side length of a square and output both its perimeter and area.": "int length = readInt (\"Length?\");\n\n\n\nSystem.out.println (\"Perimeter is \" + length*4);\n\n\nSystem.out.println (\"Area is \" + length*length);\n",
							"Last Name": "Ku",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int amount = readInt (\"Amount?\");\n\n\nint dimes =  amount/10;\nint remainingAfterDimes = amount %10;\n\nint nickels = remainingAfterDimes/5;\nint remainingAfterNickels = remainingAfterDimes % 5;\n\n int pennies = remainingAfterNickels;\n\nSystem.out.println(\"Dimes: \" + dimes);\nSystem.out.println(\"Nickels: \" + nickels);\nSystem.out.println(\"Pennies: \" + pennies);\n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-04T12:05:09.623Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-05T01:20:03.815Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQp6mFgLoV",
					"submittedAt": "2025-03-04T12:05:09.629Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:48:52.330Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:33:39.808Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudprJ-_uylDs1X0_yvQV_aOg54cIH5nE0SBxXfKZcWyxnu1UKaUnREOx-75vw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n    double length = readDouble(\"Length? \");\n    double perimeter = length * 4; \n    double area = length * length; \n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    int sum = 0; \n    for(int i = 0; i < 3; i++)\n    {\n        int number = readInt(\"Enter a number: \");\n        sum += number; \n    }\n    System.out.println(\"The sum is \" + sum); \n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n{\n    int amount = readInt(\"Amount? \");\n    int dimes = amount / 10;\n    System.out.println(\"Dimes: \" + dimes);\n    amount % 10; \n    int nickels = amount / 5; \n    System.out.println(\"Nickels: \" + nickels);\n    amount % 5; \n    int pennies = amount / 1; \n    System.out.println(\"Pennies: \" + pennies);\n}\n\nQ: \nA: 8\n7\n6\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Syntax error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Carmen",
							"What type of error is this?   int x = 18.43;": "Syntax error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    int sum = 0; \n    for(int i = 0; i < 3; i++)\n    {\n        int number = readInt(\"Enter a number: \");\n        sum += number; \n    }\n    System.out.println(\"The sum is \" + sum); \n}",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n    double length = readDouble(\"Length? \");\n    double perimeter = length * 4; \n    double area = length * length; \n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n}",
							"Last Name": "Cheung",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n{\n    int amount = readInt(\"Amount? \");\n    int dimes = amount / 10;\n    System.out.println(\"Dimes: \" + dimes);\n    amount % 10; \n    int nickels = amount / 5; \n    System.out.println(\"Nickels: \" + nickels);\n    amount % 5; \n    int pennies = amount / 1; \n    System.out.println(\"Pennies: \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-04T12:05:21.929Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-04T19:33:39.962Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:05:21.935Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:49:24.890Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-06T15:15:25.425Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufZy8nqQ-lPDPT2dZput17kddYrwMbMoMAOOMA6dhgndsPLaYj27-wZ5cKr5w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Sena \n\nQ: Last Name\nA: Godek\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n    getSideLength();\n}\n\nprivate void getSideLength()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length + length + length + length;\n    int area = length*length;\n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    sumOfThreeNumbers();\n}\n\nprivate void sumOfThreeNumbers()\n{\n    int number = readInt(\"Enter a number \");\n    int sum = 0;\n    for(int i = 0; i < 3; i++)\n    {\n        sum+=number;\n        number = readInt(\"Enter a number \");\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n{\n    minNumOfDimesAndNickles();\n}\n\nprivate void minNumOfDimesAndNickles()\n{\n    int amount = readInt(\"Amount?\" );\n    amountOfDimes = amount%10;\n    dimes = (amount - amountOfDimes) / 10;\n    amountOfNickles = amountOfDimes%5;\n    nickel = (amountOfDimes - amountOfNickles) / 5;\n    pennies = amountOfNickles; \n     System.out.println(\"Dimes \" + dimes);\n    System.out.println(\"Nickels \" + nickel);\n    System.out.println(\"Pennies \" + pennies);\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Syntax error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Sena ",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Syntax error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    sumOfThreeNumbers();\n}\n\nprivate void sumOfThreeNumbers()\n{\n    int number = readInt(\"Enter a number \");\n    int sum = 0;\n    for(int i = 0; i < 3; i++)\n    {\n        sum+=number;\n        number = readInt(\"Enter a number \");\n    }\n    System.out.println(\"The sum is \" + sum);\n}",
							"Which operator would you use to get the remainder?": "%",
							"Last Name": "Godek",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n    getSideLength();\n}\n\nprivate void getSideLength()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length + length + length + length;\n    int area = length*length;\n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n}",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n{\n    minNumOfDimesAndNickles();\n}\n\nprivate void minNumOfDimesAndNickles()\n{\n    int amount = readInt(\"Amount?\" );\n    amountOfDimes = amount%10;\n    dimes = (amount - amountOfDimes) / 10;\n    amountOfNickles = amountOfDimes%5;\n    nickel = (amountOfDimes - amountOfNickles) / 5;\n    pennies = amountOfNickles; \n     System.out.println(\"Dimes \" + dimes);\n    System.out.println(\"Nickels \" + nickel);\n    System.out.println(\"Pennies \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"id": "Cg0IvNTT8mcQp6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-04T12:03:18.801Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-03-06T15:15:25.593Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:03:18.806Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:49:26.787Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:07:30.555Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud8G7j9iR8skwgIXI0GLHvNPIyNd-1xE34bLHDzGG7V_88qb14LDFju7jFbew"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run() {\n    int length = readInt(\"Length? \");\n    System.out.println(\"Perimeter is \" + (length*4));\n    System.out.println(\"Area is \" + (length*length));\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run() {\n    int sum = 0;\n    for(int i = 0; i<3; i++) {\n        int num = readInt(\"Enter a number: \");\n        sum += num;\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run() {\n    int amount = readInt(\"Amount? \");\n    int dimes = amount / 10;\n    amount = amount % 10; \n    int nickels = amount / 5;\n    amount = amount % 5;\n    int pennies = amount;\n\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}\n\nQ: \nA: 8\n7\n6\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6",
							"Determine the value of:  12 % 7 / 2": "2",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Saiful",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run() {\n    int sum = 0;\n    for(int i = 0; i<3; i++) {\n        int num = readInt(\"Enter a number: \");\n        sum += num;\n    }\n    System.out.println(\"The sum is \" + sum);\n}",
							"Last Name": "Shaik",
							"Get the side length of a square and output both its perimeter and area.": "public void run() {\n    int length = readInt(\"Length? \");\n    System.out.println(\"Perimeter is \" + (length*4));\n    System.out.println(\"Area is \" + (length*length));\n}",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run() {\n    int amount = readInt(\"Amount? \");\n    int dimes = amount / 10;\n    amount = amount % 10; \n    int nickels = amount / 5;\n    amount = amount % 5;\n    int pennies = amount;\n\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-04T12:05:31.975Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-03-04T19:07:30.709Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEKephYC6FQ",
					"submittedAt": "2025-03-04T12:05:32.004Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:49:28.529Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-05T23:03:09.597Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "350797049@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufmNkbIUnUcZk-pIQ5088xN8yk3EWgYeWlXQ-DOeYHkUgz9vKNIb4lTqYUl3A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: John \n\nQ: Last Name\nA: Ning\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: \n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: \n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: \n\nQ: \nA: xxxxx\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: -\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Compile error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && y",
						"structuredData": {
							"": "xxxxx",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && y",
							"First Name": "John ",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Compile error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "",
							"Which operator would you use to get the remainder?": "-",
							"Get the side length of a square and output both its perimeter and area.": "",
							"Last Name": "Ning",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-03-04T12:03:14.055Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-03-05T23:03:09.793Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOEKephYC6FQ",
					"submittedAt": "2025-03-04T12:03:14.059Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:30.545Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:05:23.404Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuex9XuSvaaLZn49xy1Fkx9uSX0JWRhAdQ_SCjgnd4omzV_EWtidgiGTm8Xk4w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run() \n{\n     int length = readInt(\"What is the length of the square?\");\n     int perimeter = 4 * length;\n     int area = length * length;\n     System.out.println(\"Perimeter is \" + perimeter);\n     System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run() \n{\n     int numOne= readInt(\"Enter a number: \");\n     int numTwo= readInt(\"Enter a number: \");\n     int numThree= readInt(\"Enter a number: \");\n     int sum = numOne + numTwo + numThree;\n     System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n{\n     //get amount\n     int totalCents = readInt(\"Amount? \");\n\n     //calculations\n     int dimes = totalCents/10;\n     int dimesRemainder = totalCents % 10;\n     int nickels = dimesRemainder/5;\n     int pennies = dimesRemainder% 5;\n\n     //tell user the amounts\n     System.out.println(\"Dimes: \" + dimes);\n     System.out.println(\"Nickels: \" + nickels):\n     System.out.println(\"Pennies: \" + pennies);\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Nereyal",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run() \n{\n     int numOne= readInt(\"Enter a number: \");\n     int numTwo= readInt(\"Enter a number: \");\n     int numThree= readInt(\"Enter a number: \");\n     int sum = numOne + numTwo + numThree;\n     System.out.println(\"The sum is \" + sum);\n}",
							"Last Name": "Jeyakumar",
							"Get the side length of a square and output both its perimeter and area.": "public void run() \n{\n     int length = readInt(\"What is the length of the square?\");\n     int perimeter = 4 * length;\n     int area = length * length;\n     System.out.println(\"Perimeter is \" + perimeter);\n     System.out.println(\"Area is \" + area);\n}",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n{\n     //get amount\n     int totalCents = readInt(\"Amount? \");\n\n     //calculations\n     int dimes = totalCents/10;\n     int dimesRemainder = totalCents % 10;\n     int nickels = dimesRemainder/5;\n     int pennies = dimesRemainder% 5;\n\n     //tell user the amounts\n     System.out.println(\"Dimes: \" + dimes);\n     System.out.println(\"Nickels: \" + nickels):\n     System.out.println(\"Pennies: \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-04T12:04:56.621Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-04T19:05:23.565Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEKephYC6FQ",
					"submittedAt": "2025-03-04T12:04:56.626Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:32.392Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-05T02:35:47.534Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudd3hThNAwAOc4U6HqCvuSDd9peleaBY80SYlA7Qg-xhyT8AX1YL-bu-8LAoA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    int num1 = readInt(\"Enter a number: \");\n    int num2 = readInt(\"Enter a number: \");\n    int num3 = readInt(\"Enter a number: \");\n    int sum = num1 + num2 + num3;\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run() \n{\n    int amount = readInt(\"Amount? \");\n    int dimes = 0;\n    int nickels = 0;\n    int pennies = 0;\n    dimes = amount / 10;\n    int leftOver1 = amount % 10;\n    nickels = leftOver1 / 5;\n    pennies = leftOver1 % 5;\n\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Syntax error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Cayden",
							"What type of error is this?   int x = 18.43;": "Syntax error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    int num1 = readInt(\"Enter a number: \");\n    int num2 = readInt(\"Enter a number: \");\n    int num3 = readInt(\"Enter a number: \");\n    int sum = num1 + num2 + num3;\n    System.out.println(\"The sum is \" + sum);\n}",
							"Which operator would you use to get the remainder?": "%",
							"Last Name": "Chiu",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n}",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run() \n{\n    int amount = readInt(\"Amount? \");\n    int dimes = 0;\n    int nickels = 0;\n    int pennies = 0;\n    dimes = amount / 10;\n    int leftOver1 = amount % 10;\n    nickels = leftOver1 / 5;\n    pennies = leftOver1 % 5;\n\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4IvpGn9MAOEKephYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-04T12:04:54.345Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-05T02:35:47.937Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:04:54.350Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:34.207Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-04T20:15:14.825Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuftJ_bzS9Sc3eJaPBxgBkSNzroUN8K73sjmjXgY44bB5162_4VBzTaodMW4zA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: \nint length = readInt (\"Length?\");\nint perimeter = (length*4);\nSystem.out.println(\"Perimeter is \" + perimeter);\nint area = (length*length);\nSystem.out.println(\"Area is \" + area);\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: int first = readInt (\"Enter a number: \");\nint second = readInt (\"Enter a number: \");\nint third = readInt (\"Enter a number: \");\nint sum = first+second+third;\nSystem.out.println(\"The sum is \" + sum);\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: int amount = readInt (\"Amount? \");\nint dimes = amount/10;\nint pennies= (amount-dime*10)%5;\nint nickels = (amount-dimes*10-pennies)/5;\nSystem.out.println(\"Dimes: \" + dimes);\nSystem.out.println(\"Nickels: \" + nickels);\nSystem.out.println(\"Pennies: \" + pennies);\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Owen",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "int first = readInt (\"Enter a number: \");\nint second = readInt (\"Enter a number: \");\nint third = readInt (\"Enter a number: \");\nint sum = first+second+third;\nSystem.out.println(\"The sum is \" + sum);",
							"Last Name": "Kung",
							"Get the side length of a square and output both its perimeter and area.": "\nint length = readInt (\"Length?\");\nint perimeter = (length*4);\nSystem.out.println(\"Perimeter is \" + perimeter);\nint area = (length*length);\nSystem.out.println(\"Area is \" + area);",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "int amount = readInt (\"Amount? \");\nint dimes = amount/10;\nint pennies= (amount-dime*10)%5;\nint nickels = (amount-dimes*10-pennies)/5;\nSystem.out.println(\"Dimes: \" + dimes);\nSystem.out.println(\"Nickels: \" + nickels);\nSystem.out.println(\"Pennies: \" + pennies);",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEKephYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-04T12:04:20.335Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-03-04T20:15:15.012Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:04:20.340Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:36.030Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:15:05.906Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueaoq5qcZgsAH67kmf25SR0yxSfMHuLV1qDo5svHOObqTnTbS_AbzUQGXiZSQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n    System.out.println (\"Perimeter is \" + perimeter);\n    System.out.println (\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    int a = readInt(\"Enter a number: \");\n    int b = readInt(\"Enter a number: \");\n    int c = readInt(\"Enter a number: \");\n    int sum = a + b + c;\n    System.out.println (\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: \npublic void run()\n{\n    int amount = readInt(\"Amount? \");\n    int left = amount % 10;\n    int tens = amount - left;\n    int dimes = tens / 10;\n    int pennies = left % 2;\n    int twos = left - pennies;\n    int nickels = twos / 2;\n    System.out.println (\"Dimes: \" + dimes);\n    System.out.println (\"Nickels: \" + nickels);\n    System.out.println (\"Pennies: \" + pennies);\n}\n\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Jennifer",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Which operator would you use to get the remainder?": "%",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    int a = readInt(\"Enter a number: \");\n    int b = readInt(\"Enter a number: \");\n    int c = readInt(\"Enter a number: \");\n    int sum = a + b + c;\n    System.out.println (\"The sum is \" + sum);\n}",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n    System.out.println (\"Perimeter is \" + perimeter);\n    System.out.println (\"Area is \" + area);\n}",
							"Last Name": "Zheng",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "\npublic void run()\n{\n    int amount = readInt(\"Amount? \");\n    int left = amount % 10;\n    int tens = amount - left;\n    int dimes = tens / 10;\n    int pennies = left % 2;\n    int twos = left - pennies;\n    int nickels = twos / 2;\n    System.out.println (\"Dimes: \" + dimes);\n    System.out.println (\"Nickels: \" + nickels);\n    System.out.println (\"Pennies: \" + pennies);\n}\n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-04T12:04:02.128Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-04T19:15:06.165Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEKephYC6FQ",
					"submittedAt": "2025-03-04T12:04:02.132Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:37.794Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 12,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-03-04T19:11:58.256Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuetq5rjQhrlNIg03LtDf1psnqL_M9m7FOLU16j6U0_bUBwlrtefYigjfcajzw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public void run()\n{\n\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n\n\n}\n\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n\n    int first = readInt(\"Enter a number: \");\n    int second = readInt(\"Enter a number: \");\n    int third = readInt(\"Enter a number: \");\n    int answer = fisrt + second + third;\n    System.out.println(\"The sum is \" + answer);\n\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n{\n\n    int amount = readInt(\"Amount? \");\n    int dimes = amount / 10;\n    amount % 10;\n    int nickels = amount / 5;\n    amount % 5;\n    int pennies = amount / 1;\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: true\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Lionson",
							"What boolean is equivalent to this logical expression?   !(true || false)": "true",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n\n    int first = readInt(\"Enter a number: \");\n    int second = readInt(\"Enter a number: \");\n    int third = readInt(\"Enter a number: \");\n    int answer = fisrt + second + third;\n    System.out.println(\"The sum is \" + answer);\n\n}",
							"Which operator would you use to get the remainder?": "%",
							"Get the side length of a square and output both its perimeter and area.": "public void run()\n{\n\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    int area = length * length;\n    System.out.println(\"Perimeter is \" + perimeter);\n    System.out.println(\"Area is \" + area);\n\n\n}\n",
							"Last Name": "Meng",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n{\n\n    int amount = readInt(\"Amount? \");\n    int dimes = amount / 10;\n    amount % 10;\n    int nickels = amount / 5;\n    amount % 5;\n    int pennies = amount / 1;\n    System.out.println(\"Dimes: \" + dimes);\n    System.out.println(\"Nickels: \" + nickels);\n    System.out.println(\"Pennies: \" + pennies);\n\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"id": "Cg4Iu8ODue4SEKephYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-04T12:06:35.599Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-04T19:11:58.380Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-03-04T12:06:35.604Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:39.843Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"questionCount": 11,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T03:03:18.817Z",
								"totalFormResponses": 22,
								"formTitle": "Unit 2 Quiz: Basic Java",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueymk_Sgc2703yKBB3U5-FUTq7ev0EB-0Kb-RWBKnvoBu68aJp4QvPgKxYR3w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang\n\nQ: Get the side length of a square and output both its perimeter and area.\nA:     public void run()\n    {\n        int length = readInt(\"Please select a length? \");\n        int perimeter = length * 4;\n        int area = length * length;\n        System.out.println(\"perimeter is \" + perimeter);\n        System.out.println(\"area is \" + area);\n    }\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public void run()\n{\n    int sum = 0;\n    for (int i = 0; i < 3; i++)\n    {\n        int num = readInt(\"Enter a number: \");\n        sum = sum + num;\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public void run()\n\nint amount = readInt(\"Amount? \")\n\n\nQ: \nA: 8\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: What type of error is this?   int x = 18.43;\nA: Loss of Precision error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Steven",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"What type of error is this?   int x = 18.43;": "Loss of Precision error",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public void run()\n{\n    int sum = 0;\n    for (int i = 0; i < 3; i++)\n    {\n        int num = readInt(\"Enter a number: \");\n        sum = sum + num;\n    }\n    System.out.println(\"The sum is \" + sum);\n}",
							"Which operator would you use to get the remainder?": "%",
							"Last Name": "Wang",
							"Get the side length of a square and output both its perimeter and area.": "    public void run()\n    {\n        int length = readInt(\"Please select a length? \");\n        int perimeter = length * 4;\n        int area = length * length;\n        System.out.println(\"perimeter is \" + perimeter);\n        System.out.println(\"area is \" + area);\n    }",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public void run()\n\nint amount = readInt(\"Amount? \")\n",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-03-04T12:06:09.243Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-03-06T03:03:19.096Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEKephYC6FQ",
					"submittedAt": "2025-03-04T12:06:09.248Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.594Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849383",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"questionCount": 12,
								"matchedByEmail": true,
								"responseTime": "2025-03-06T15:19:17.663Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 2 Quiz: Basic Java",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufnCidlXMkDkaO8GqDQeYUXyj0Stzb9SiUR9hkpod-4ZxHb2O3X07N6KUMNaA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: Get the side length of a square and output both its perimeter and area.\nA: public class run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    System.out.println(\"Perimeter is \" + perimeter);\n    int area = length * length;\n    System.out.println(\"Area is \" + area);\n}\n\nQ: Get 3 integers from the user and output their sum.  You must use an appropriate loop.\nA: public class run()\n{\n    int sum = 0;\n    for(int i = 0; i > 3; i++)\n    {\n        int integer = readInt(\"Enter a number: \")\n        sum += integer;\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n\n\nQ: Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.\nA: public class run()\n{\n    int amount = readInt(\"amount? \");\n    int nDimes = amount / 10;\n    System.out.println(\"Dimes: \" + nDimes);\n    int rDimes = amount % 10;\n    int nNickels = rDimes / 5;\n    System.out.println(\"Nickels: \" + nNickels);\n    int rNickels = rDimes % 5;\n    System.out.println(\"Pennies: \" + rNickels);\n}\n\nQ: \nA: 8\n7\n6\n5\n\nQ: Which of the following is a good variable name?\nA: bigDog\n\nQ: Which operator would you use to get the remainder?\nA: %\n\nQ: Determine the value of:  12 % 7 / 2\nA: 2.5\n\nQ: What type of error is this?   int x = 18.43;\nA: Compile error\n\nQ: What boolean is equivalent to this logical expression?   !(true || false)\nA: false\n\nQ: Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)\nA: !x && !y",
						"structuredData": {
							"": "8\n7\n6\n5",
							"Determine the value of:  12 % 7 / 2": "2.5",
							"Which of the following is equivalent to this expression using De Morgan's Law?    !(x || y)": "!x && !y",
							"First Name": "Vivian",
							"What type of error is this?   int x = 18.43;": "Compile error",
							"What boolean is equivalent to this logical expression?   !(true || false)": "false",
							"Get 3 integers from the user and output their sum.  You must use an appropriate loop.": "public class run()\n{\n    int sum = 0;\n    for(int i = 0; i > 3; i++)\n    {\n        int integer = readInt(\"Enter a number: \")\n        sum += integer;\n    }\n    System.out.println(\"The sum is \" + sum);\n}\n",
							"Which operator would you use to get the remainder?": "%",
							"Get the side length of a square and output both its perimeter and area.": "public class run()\n{\n    int length = readInt(\"Length? \");\n    int perimeter = length * 4;\n    System.out.println(\"Perimeter is \" + perimeter);\n    int area = length * length;\n    System.out.println(\"Area is \" + area);\n}",
							"Last Name": "Li",
							"Get an amount in cents from the user.  Then output the minimum number of dimes, nickels and pennies required to make up that amount.  For full marks you must use the mod (%) operator appropriately.": "public class run()\n{\n    int amount = readInt(\"amount? \");\n    int nDimes = amount / 10;\n    System.out.println(\"Dimes: \" + nDimes);\n    int rDimes = amount % 10;\n    int nNickels = rDimes / 5;\n    System.out.println(\"Nickels: \" + nNickels);\n    int rNickels = rDimes % 5;\n    System.out.println(\"Pennies: \" + rNickels);\n}",
							"Which of the following is a good variable name?": "bigDog"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5Mzgz/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-04T12:04:17.482Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-03-06T15:19:17.804Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEKephYC6FQ",
					"submittedAt": "2025-03-04T12:04:17.514Z",
					"assignmentName": "Unit 2 Quiz: Basic Java (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.596Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-24T13:16:46.261Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-24T19:39:21.616Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-24T19:39:28.846Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQkamFgLoV",
					"submittedAt": "2025-02-24T13:16:46.266Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.599Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-24T13:16:56.708Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-24T18:40:28.201Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQkamFgLoV",
					"submittedAt": "2025-02-24T13:16:56.713Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.601Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"attachmentCount": 0,
					"id": "Cg0I_qLZkQsQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-24T13:16:41.846Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-24T23:42:53.237Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:16:41.852Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.603Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-24T13:17:13.588Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-24T18:43:53.397Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQkamFgLoV",
					"submittedAt": "2025-02-24T13:17:13.595Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.605Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-24T13:16:16.537Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-25T20:01:11.318Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQkamFgLoV",
					"submittedAt": "2025-02-24T13:16:16.548Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.608Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I5qyc4Q4QkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-24T13:17:53.308Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-24T18:36:28.250Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:17:53.315Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.610Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IhKbr2BYQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-24T13:17:30.459Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-24T18:38:13.924Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:17:30.494Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.613Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"id": "Cg0Io-SHlhwQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-24T13:16:13.257Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-24T13:17:38.019Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-24T13:17:46.713Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:16:13.261Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.616Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-24T13:19:20.535Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-24T19:37:10.027Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQkamFgLoV",
					"submittedAt": "2025-02-24T13:19:20.539Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.618Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-24T13:16:21.973Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-24T19:06:00.865Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-24T19:06:06.559Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:16:22.013Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.621Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ine-5hUQQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-24T13:20:11.783Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-24T14:29:40.251Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:20:11.789Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.632Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I0ruNqlsQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-24T13:17:44.346Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-24T18:37:57.916Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:17:44.351Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.635Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IvNTT8mcQkamFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-24T13:16:44.331Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-24T18:37:00.648Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:16:44.337Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.641Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-24T13:17:59.064Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-24T18:44:56.005Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEJGphYC6FQ",
					"submittedAt": "2025-02-24T13:17:59.069Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.644Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-24T13:16:36.795Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-24T18:40:53.865Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOEJGphYC6FQ",
					"submittedAt": "2025-02-24T13:16:36.802Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.649Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"id": "Cg4Iurzi88AOEJGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-24T13:18:10.120Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-24T18:42:42.035Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:18:10.126Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.652Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-24T13:17:38.027Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-24T18:39:32.910Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEJGphYC6FQ",
					"submittedAt": "2025-02-24T13:17:38.068Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.654Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEJGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-24T13:17:15.489Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-24T18:55:45.479Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:17:15.495Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.656Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-24T13:18:06.575Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-24T18:50:50.257Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-24T18:51:18.021Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEJGphYC6FQ",
					"submittedAt": "2025-02-24T13:18:06.611Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.658Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-24T13:16:55.333Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-24T18:44:03.218Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEJGphYC6FQ",
					"submittedAt": "2025-02-24T13:16:55.337Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.660Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-24T13:18:47.960Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-24T18:59:18.208Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEJGphYC6FQ",
					"submittedAt": "2025-02-24T13:18:47.967Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.663Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"feedback": "",
					"studentId": "111100032418663696789",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Moses He",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTEJGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-24T13:16:07.375Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-24T17:04:40.975Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:16:07.380Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.665Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "102479132795602540628",
					"feedback": "",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"type": "form_skipped_no_emails",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Steven Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "[No content available]",
					"id": "Cg4Ik8mXwcMUEJGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-24T13:18:03.990Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-26T14:24:28.763Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:18:04.025Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:41.668Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849361",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [
								{
									"formId": "1HXT3McMmz2L9yUxlGATWPQxhxuJVosKvzTef3UZAINg",
									"skipReason": "Known problematic form with missing email collection",
									"error": "Form \"Learning Survey\" skipped - no email data available for student matching",
									"type": "form_skipped_no_emails"
								}
							],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Vivian Li",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYx/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"id": "Cg4Iz_iw9dcUEJGphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-24T13:18:13.415Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-24T18:41:39.183Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-24T13:18:13.421Z",
					"assignmentName": "Learning Survey",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:45.517Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T18:57:50.686Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "349168732@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf6NjXIHLXGYrM6ZkvqL0SUGat2o5Wr7Zvr5fOAQo0LggjbIBY2l_zgMGcZZg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Joe\n\nQ: Last Name\nA: Zhuo\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\npublic void run()\n{\n    while (noBallsPresent())\n    {\n          while (frontIsClear()) \n          {\n                move();\n           }\n           jumpHurdle();\n    }\n    takeBall();\n}    \n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void runToWall()\n{\n    while (frontIsClear())\n    {\n        if (ballsPresent())\n        {\n             takeBall();\n         }\n         else\n         {\n              putBall();\n         }\n         move();\n    }\n}\n\npublic void turnToEast()\n{\n    while (notFacingEast())\n    {\n         turnLeft();\n    }\n}\n\npublic void run()\n{\n    for (int i = 0; i < 4; i++) \n    {\n         runToWall();\n         turnLeft();\n    }\n    turnToEast();\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void placeTwoBalls() \n{\n    for (int i = 0; i < 2; i++) \n    {\n         putBall();\n    }\n}\n\npublic void moveToEnd()\n{\n    while (frontIsClear())\n    {\n         move();\n    }\n}\n\npublic void turnToEast()\n{\n    while (notFacingEast())\n    {\n         turnLeft();\n    }\n}\n\npublic void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n         moveToEnd();\n         placeTwoBalls();\n         turnLeft();\n     }\n    turnToEast();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\npublic void run()\n{\n    while (noBallsPresent())\n    {\n          while (frontIsClear()) \n          {\n                move();\n           }\n           jumpHurdle();\n    }\n    takeBall();\n}    ",
							"First Name": "Joe",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"How many balls will be put down by Karel?": "106",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void placeTwoBalls() \n{\n    for (int i = 0; i < 2; i++) \n    {\n         putBall();\n    }\n}\n\npublic void moveToEnd()\n{\n    while (frontIsClear())\n    {\n         move();\n    }\n}\n\npublic void turnToEast()\n{\n    while (notFacingEast())\n    {\n         turnLeft();\n    }\n}\n\npublic void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n         moveToEnd();\n         placeTwoBalls();\n         turnLeft();\n     }\n    turnToEast();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void runToWall()\n{\n    while (frontIsClear())\n    {\n        if (ballsPresent())\n        {\n             takeBall();\n         }\n         else\n         {\n              putBall();\n         }\n         move();\n    }\n}\n\npublic void turnToEast()\n{\n    while (notFacingEast())\n    {\n         turnLeft();\n    }\n}\n\npublic void run()\n{\n    for (int i = 0; i < 4; i++) \n    {\n         runToWall();\n         turnLeft();\n    }\n    turnToEast();\n}",
							"Last Name": "Zhuo",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"id": "Cg0IvfCrsQEQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-21T18:36:46.745Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-21T18:57:50.786Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:46.782Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:49.138Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:18:30.140Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueCUIQwF_PzfdqD7Ks26432oXTLbgNJcJuCZ8npB9hFaNBYEaCphuqeHlUPgA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while (frontIsClear())\n    {\n        move();\n        \n        if (frontIsBlocked())\n        {\n            if (noBallsPresent())\n            {\n                jumpHurdle();\n            }\n            else\n            {\n            takeBall();\n            }\n        }\n    }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    while (notFacingWest())\n    {\n        invertBalls();\n        \n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            turnLeft();\n        }\n    }\n    \n    theWayDown();\n}\n\nprivate void invertBalls()\n{\n    if (noBallsPresent())\n    {\n        putBall();\n    }\n    else\n    {\n        takeBall();\n    }\n}\n\nprivate void theWayDown()\n{\n    while (frontIsClear())\n    {\n        invertBalls();\n\n        move();\n       \n        if (frontIsBlocked())\n        {\n            turnLeft();\n        }     \n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        \n        putBallsGo();\n        \n        turnLeft();\n    }\n}\n\nprivate void putBallsGo()\n{\n    for (int i = 0; i < 2; i++)\n    {\n        putBall();\n    }\n\n    while (frontIsClear()\n    {\n        move();\n     }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while (frontIsClear())\n    {\n        move();\n        \n        if (frontIsBlocked())\n        {\n            if (noBallsPresent())\n            {\n                jumpHurdle();\n            }\n            else\n            {\n            takeBall();\n            }\n        }\n    }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Abithan",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        \n        putBallsGo();\n        \n        turnLeft();\n    }\n}\n\nprivate void putBallsGo()\n{\n    for (int i = 0; i < 2; i++)\n    {\n        putBall();\n    }\n\n    while (frontIsClear()\n    {\n        move();\n     }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    while (notFacingWest())\n    {\n        invertBalls();\n        \n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            turnLeft();\n        }\n    }\n    \n    theWayDown();\n}\n\nprivate void invertBalls()\n{\n    if (noBallsPresent())\n    {\n        putBall();\n    }\n    else\n    {\n        takeBall();\n    }\n}\n\nprivate void theWayDown()\n{\n    while (frontIsClear())\n    {\n        invertBalls();\n\n        move();\n       \n        if (frontIsBlocked())\n        {\n            turnLeft();\n        }     \n    }\n}",
							"Last Name": "Paskaranathan",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"id": "Cg0Isq_W0gkQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-21T18:37:37.040Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-21T19:18:30.260Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:37.046Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:52.516Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:10:17.933Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueciMsPfkLmi8Jlp8uvwQgPK68xk_L1FpYv595Zdv5QV73wTKVp9feQvjPvBw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Lee\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jump();\n        }\n    }\n    takeBall();\n}\n\nprivate void jump()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        while(frontIsClear())\n        {\n            switch();\n            move();\n        }\n        turnLeft();\n    }\n}\n\nprivate void switch()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        while(frontIsClear())\n        {\n            move();\n        }\n        turnLeft();\n        placeBalls();\n    }\n}\n\nprivate void placeBalls()\n{\n    putBall();\n    putBall();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: for all of the above\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jump();\n        }\n    }\n    takeBall();\n}\n\nprivate void jump()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Owen",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"How many balls will be put down by Karel?": "107",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "for all of the above",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        while(frontIsClear())\n        {\n            move();\n        }\n        turnLeft();\n        placeBalls();\n    }\n}\n\nprivate void placeBalls()\n{\n    putBall();\n    putBall();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        while(frontIsClear())\n        {\n            switch();\n            move();\n        }\n        turnLeft();\n    }\n}\n\nprivate void switch()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}",
							"Last Name": "Lee",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-21T18:36:53.225Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-21T19:10:18.109Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQj6mFgLoV",
					"submittedAt": "2025-02-21T18:36:53.227Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:55.955Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T18:57:50.246Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud6OkJ0dEB3uaCu6icZjcFeu1EieJZzwhxbepGj5K78ggxnVeQn_dUkyMwQLw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kian \n\nQ: Last Name\nA: Mistry\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        jumpHurdle();\n    }\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnLeft();\n    turnLeft();\n    turnLeft();\n    move();\n    turnLeft();\n    turnLeft();\n    turnLeft();\n    move();\n    turnLeft();\n}\n\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    while (frontIsClear())\n    {\n        checkForBall();\n        move();\n        if (frontIsBlocked())\n        {\n            turnCorner();\n        }\n    }\n}\nprivate void turnCorner();\n{\n    if (frontIsBlocked())\n    {\n        turnLeft();\n    }\n}\nprivate void checkForBall();\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n}\n\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for (int i = 0; i < 2; i++)\n    while (frontIsClear())\n    {\n        move();\n        if (frontIsBlocked())\n        {\n             placeCorner();\n        }\n    }\n}\nprivate void placeCorner()\n{\n     if (frontIsBlocked())\n    {\n        putBall();\n        turnLeft();\n    }\n}\n\n\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: //* comment */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: if-else statement\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: while loop\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: if statement\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: for all of the above\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "while loop",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        jumpHurdle();\n    }\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnLeft();\n    turnLeft();\n    turnLeft();\n    move();\n    turnLeft();\n    turnLeft();\n    turnLeft();\n    move();\n    turnLeft();\n}\n",
							"First Name": "Kian ",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "for all of the above",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "if-else statement",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "if statement",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for (int i = 0; i < 2; i++)\n    while (frontIsClear())\n    {\n        move();\n        if (frontIsBlocked())\n        {\n             placeCorner();\n        }\n    }\n}\nprivate void placeCorner()\n{\n     if (frontIsBlocked())\n    {\n        putBall();\n        turnLeft();\n    }\n}\n\n",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    while (frontIsClear())\n    {\n        checkForBall();\n        move();\n        if (frontIsBlocked())\n        {\n            turnCorner();\n        }\n    }\n}\nprivate void turnCorner();\n{\n    if (frontIsBlocked())\n    {\n        turnLeft();\n    }\n}\nprivate void checkForBall();\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n}\n",
							"Last Name": "Mistry",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "//* comment */"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"id": "Cg0IwJXv6QsQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-21T18:36:42.516Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-21T18:57:50.386Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:42.518Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:51:59.396Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349064972@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:11:51.831Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349064972@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucrBsS6Iq47gheAzrQiEnAgAwM5CWjlctS25tTd-iXIjaO7yubhhT9mp3UNuA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Kelton\n\nQ: Last Name\nA: Kuan\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() {\n    while(noBallsPresent()) {\n        if (frontIsClear()) {\n            move();\n        } else {\n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run() {\n    for (int i = 0; i < 4; i++) {\n        completeLine();\n    }\n}\n\nprivate void completeLine() {\n    while (frontIsClear()) {\n        checkBalls();\n        move();\n    }\n    checkBalls();\n    turnLeft();\n}\n\nprivate void checkBalls() {\n    if (ballsPresent()) {\n        takeBall();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run() {\n    for (int i = 0; i < 4; i++) {\n        completeLine();\n    }\n}\n\nprivate void completeLine() {\n    while (frontIsClear()) {\n        move();\n    }\n    putBall();\n    putBall();\n    turnLeft();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run() {\n    while(noBallsPresent()) {\n        if (frontIsClear()) {\n            move();\n        } else {\n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Kelton",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"How many balls will be put down by Karel?": "107",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run() {\n    for (int i = 0; i < 4; i++) {\n        completeLine();\n    }\n}\n\nprivate void completeLine() {\n    while (frontIsClear()) {\n        move();\n    }\n    putBall();\n    putBall();\n    turnLeft();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run() {\n    for (int i = 0; i < 4; i++) {\n        completeLine();\n    }\n}\n\nprivate void completeLine() {\n    while (frontIsClear()) {\n        checkBalls();\n        move();\n    }\n    checkBalls();\n    turnLeft();\n}\n\nprivate void checkBalls() {\n    if (ballsPresent()) {\n        takeBall();\n    }\n}",
							"Last Name": "Kuan",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-21T18:36:43.077Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-21T19:11:51.937Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQj6mFgLoV",
					"submittedAt": "2025-02-21T18:36:43.079Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:03.440Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:15:11.739Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuchfpmT2LD4DEQPQgi46IIdsKHV1ba6LXPJ-W2XBWZFGUUA_AgYPltj9GdY8Q"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() {\n    while (frontIsClear()) {\n        move();\n        if (frontIsBlocked()) {\n            if (noBallsPresent()) {\n                jumpHurdle();\n            } else {\n                takeBall();\n            }\n        }\n    }\n}\n\nprivate void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run() {\n    while (frontIsClear()) {\n        replaceBall();\n        move();\n        if (frontIsBlocked()) {\n            turnLeft();\n            if (facingEast()) {\n                break();\n            }\n        }\n    }\n}\n\nprivate void replaceBall() {\n    if (ballsPresent()) {\n        takeBall();\n    } else {\n        putBall();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run() {\n    for (int i = 0; i < 8; i++) {\n        while (frontIsClear()) {\n            move();\n        }\n        fillCorner();\n    }\n}\n\nprivate void fillCorner() {\n     putBall();\n     turnLeft();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: for loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: calling\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run() {\n    while (frontIsClear()) {\n        move();\n        if (frontIsBlocked()) {\n            if (noBallsPresent()) {\n                jumpHurdle();\n            } else {\n                takeBall();\n            }\n        }\n    }\n}\n\nprivate void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Jiayu",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"A control structure is used inside the block of another control structure. This is referred to as": "calling",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "for loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run() {\n    for (int i = 0; i < 8; i++) {\n        while (frontIsClear()) {\n            move();\n        }\n        fillCorner();\n    }\n}\n\nprivate void fillCorner() {\n     putBall();\n     turnLeft();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run() {\n    while (frontIsClear()) {\n        replaceBall();\n        move();\n        if (frontIsBlocked()) {\n            turnLeft();\n            if (facingEast()) {\n                break();\n            }\n        }\n    }\n}\n\nprivate void replaceBall() {\n    if (ballsPresent()) {\n        takeBall();\n    } else {\n        putBall();\n    }\n}",
							"Last Name": "Chen",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-21T18:36:48.416Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-21T19:15:12.042Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Qj6mFgLoV",
					"submittedAt": "2025-02-21T18:36:48.599Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:08.583Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348588096@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:19:19.511Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "348588096@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufj7u-kimsfCApgEz09a4Wt9XOae387fQZxLLNklTyU2KSkGmT3bVBq7wQnEQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Veznu\n\nQ: Last Name\nA: Premathas\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        { \n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft(); \n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for ( int x = 0 ; x < 4 ; x ++)\n    {\n        moveToWall();\n        turnLeft();\n    }\n}\n\nprivate void checkForBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    } \n    else \n    {\n        putBall();\n    }\n}\n\nprivate void moveToWall()\n{\n    while(frontIsClear())\n    {\n        move();\n        checkForBall();\n    }\n}\n\n\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for ( int x = 0 ; x < 4 ; x ++)\n    {\n        putBall();\n        putBall();\n        headToWall();\n        turnLeft();\n    }\n   \n} \n\nprivate void headToWall()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        { \n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft(); \n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Veznu",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for ( int x = 0 ; x < 4 ; x ++)\n    {\n        putBall();\n        putBall();\n        headToWall();\n        turnLeft();\n    }\n   \n} \n\nprivate void headToWall()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for ( int x = 0 ; x < 4 ; x ++)\n    {\n        moveToWall();\n        turnLeft();\n    }\n}\n\nprivate void checkForBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    } \n    else \n    {\n        putBall();\n    }\n}\n\nprivate void moveToWall()\n{\n    while(frontIsClear())\n    {\n        move();\n        checkForBall();\n    }\n}\n\n",
							"Last Name": "Premathas",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"id": "Cg0IhKbr2BYQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-21T18:36:49.790Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-21T19:19:19.613Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:49.793Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:12.364Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:01:18.840Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349045377@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufxda4bOP-ert8ewZHTkkw8tJKpIoogDYS6DTUEPQ4rtK4eMUszrDzEeZEVRw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nathan\n\nQ: Last Name\nA: Ji\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    if(ballsPresent())\n    takeBall();\n    while(frontIsClear())\n    {\n        move();\n    }\n    jumpHurdle();\n{\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n{\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        while(frontIsClear())\n        {\n            changeOneSide();\n        }\n    }\n}\n\nprivate void changeOneSide()\n{\n    if(BallsPresent())\n    {\n        takeBall();\n        move();\n    }\n    else\n    {\n        putBall();\n        move();\n    }\n    turnLeft();\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for(int i = 0; i < 2; i++)\n    {\n        runOneLap();\n    }\n}\n\nprivate void runOneLane()\n{\n    while(frontIsClear()) \n    {\n        move();\n    }\n    putBall();\n    turnLeft();\n    }\n\nprivate void runOneLap()\n{\n    runOneLane();\n    runOneLane();\n    runOneLane();\n    runOneLane();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 10\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    if(ballsPresent())\n    takeBall();\n    while(frontIsClear())\n    {\n        move();\n    }\n    jumpHurdle();\n{\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n{",
							"First Name": "Nathan",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "10",
							"How many balls will be put down by Karel?": "107",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for(int i = 0; i < 2; i++)\n    {\n        runOneLap();\n    }\n}\n\nprivate void runOneLane()\n{\n    while(frontIsClear()) \n    {\n        move();\n    }\n    putBall();\n    turnLeft();\n    }\n\nprivate void runOneLap()\n{\n    runOneLane();\n    runOneLane();\n    runOneLane();\n    runOneLane();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        while(frontIsClear())\n        {\n            changeOneSide();\n        }\n    }\n}\n\nprivate void changeOneSide()\n{\n    if(BallsPresent())\n    {\n        takeBall();\n        move();\n    }\n    else\n    {\n        putBall();\n        move();\n    }\n    turnLeft();\n}",
							"Last Name": "Ji",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Io-SHlhwQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-21T18:36:58.036Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-21T19:01:19.180Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:58.039Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:15.969Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:47:53.893Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue9TAIg1N3rXlM2KT_c9e39rSj3PhRt0kw6-nKHwZWY3QzAh2YYZpOXhg2N_g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run ()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle()\n        }\n        takeBall();\n    }\n}\n\nprivate void jumpHurdle ()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\n\n\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run ()\n{\n    while(frontIsClear())\n    {\n        safeBall();\n        move();\n    }\n    if(facingEast())\n    {\n        turnLeft();\n        if(frontIsClear())\n        {\n            move();\n            turnLeft();\n        }\n        if(frontIsBlocked())\n        {\n            turnAround();\n            moveToWall();\n            turnRight();\n            moveToWall();\n            turnAround();\n    }\n    if(facingWest())\n    {\n        turnRight();\n        if(frontIsClear())\n        {\n            move();\n            turnRight();\n        }\n        if(frontIsBlocked())\n        {\n            turnAround();\n            moveToWall();\n            turnLeft();\n    }\n}\n        \n\n\n\nprivate void safeBall()\n{\n    if(ballsPresent()\n    {\n        takeBall();\n    }\n}\n\nprivate void moveToWall()\n{\n    while(frontIsClear());\n    {\n        move();\n    }\n}\n        \n    \n\n\n\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run ()\n{\n    for(int i=0; i < 4; i++) \n    {\n        while(frontIsClear())\n        {\n            move();\n        }\n        turnLeft();\n        putBall();\n        putBall();\n    }\n    turnRight();\n}\n            \n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: if-else statement\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: is a place in code where the program stops running\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: statements\n\nQ: An 'if' statement...\nA: more than one of the above",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run ()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle()\n        }\n        takeBall();\n    }\n}\n\nprivate void jumpHurdle ()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\n\n",
							"First Name": "Clark",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "is a place in code where the program stops running",
							"Which of the following is a condition?": "frontIsClear()",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"How many balls will be put down by Karel?": "106",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "statements",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "if-else statement",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run ()\n{\n    for(int i=0; i < 4; i++) \n    {\n        while(frontIsClear())\n        {\n            move();\n        }\n        turnLeft();\n        putBall();\n        putBall();\n    }\n    turnRight();\n}\n            ",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run ()\n{\n    while(frontIsClear())\n    {\n        safeBall();\n        move();\n    }\n    if(facingEast())\n    {\n        turnLeft();\n        if(frontIsClear())\n        {\n            move();\n            turnLeft();\n        }\n        if(frontIsBlocked())\n        {\n            turnAround();\n            moveToWall();\n            turnRight();\n            moveToWall();\n            turnAround();\n    }\n    if(facingWest())\n    {\n        turnRight();\n        if(frontIsClear())\n        {\n            move();\n            turnRight();\n        }\n        if(frontIsBlocked())\n        {\n            turnAround();\n            moveToWall();\n            turnLeft();\n    }\n}\n        \n\n\n\nprivate void safeBall()\n{\n    if(ballsPresent()\n    {\n        takeBall();\n    }\n}\n\nprivate void moveToWall()\n{\n    while(frontIsClear());\n    {\n        move();\n    }\n}\n        \n    \n\n\n",
							"Last Name": "Chen",
							"An 'if' statement...": "more than one of the above",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-21T18:36:57.225Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-21T19:47:53.984Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8Qj6mFgLoV",
					"submittedAt": "2025-02-21T18:36:57.228Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:19.529Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:01:46.319Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud2ASWATKuiWeCNH5negMfgAjJ_D0fgJKdheXhaXXYh1yyDJFUP4lI8_H9h1w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Edward\n\nQ: Last Name\nA: Wang\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n            checkBall();\n        }\n        turnLeft();\n    }\n}\n\nprivate void checkBall()\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        placeBalls();\n        turnLeft();\n    }\n}\n\nprivate void placeBalls()\n{\n    putBall();\n    putBall();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Edward",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        placeBalls();\n        turnLeft();\n    }\n}\n\nprivate void placeBalls()\n{\n    putBall();\n    putBall();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n            checkBall();\n        }\n        turnLeft();\n    }\n}\n\nprivate void checkBall()\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}",
							"Last Name": "Wang",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I7-PGhEAQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-21T18:36:41.520Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-21T19:01:46.438Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:41.522Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:22.815Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:12:45.867Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueM4a8gubMVdRuDG_Jn2A5xA1x3cBTYl6eX97B192ZMtRPtaXAasRV66E7oYA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n        while(noBallsPresent())\n        {\n                move();\n                if(frontIsBlocked())\n                {\n                        jumpHurdle();\n                }\n        }\n        takeBall();\n}\n\nprivate void jumpHurdle()\n{\n        turnLeft();\n        move();\n        turnRight();\n        move();\n        turnRight();\n        move();\n        turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n        for(int i = 0; i < 4; i++)\n        {\n                while(frontIsClear())\n                {\n                        move();\n                        swapBalls();\n                }\n                turnLeft();\n        }\n}\n\nprivate void swapBalls()\n{\n        if(ballsPresent())\n        {\n                takeBall();\n        }\n        else \n        {\n                putBall();\n        }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n        for(int i = 0; i < 4; i++)\n        {\n                goToCorner();\n                placeBalls();\n        }\n}\n\nprivate void goToCorner()\n{\n        while(frontIsClear())\n        {\n                move();\n        }\n}\n\nprivate void placeBalls()\n{\n        putBall();\n        putBall();\n        turnLeft(); \n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: for loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n        while(noBallsPresent())\n        {\n                move();\n                if(frontIsBlocked())\n                {\n                        jumpHurdle();\n                }\n        }\n        takeBall();\n}\n\nprivate void jumpHurdle()\n{\n        turnLeft();\n        move();\n        turnRight();\n        move();\n        turnRight();\n        move();\n        turnLeft();\n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Leo",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "for loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n        for(int i = 0; i < 4; i++)\n        {\n                goToCorner();\n                placeBalls();\n        }\n}\n\nprivate void goToCorner()\n{\n        while(frontIsClear())\n        {\n                move();\n        }\n}\n\nprivate void placeBalls()\n{\n        putBall();\n        putBall();\n        turnLeft(); \n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n        for(int i = 0; i < 4; i++)\n        {\n                while(frontIsClear())\n                {\n                        move();\n                        swapBalls();\n                }\n                turnLeft();\n        }\n}\n\nprivate void swapBalls()\n{\n        if(ballsPresent())\n        {\n                takeBall();\n        }\n        else \n        {\n                putBall();\n        }\n}",
							"Last Name": "So",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-21T18:36:45.579Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-21T19:12:45.960Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQj6mFgLoV",
					"submittedAt": "2025-02-21T18:36:45.582Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:26.277Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:08:23.920Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucO9JgblyyHrAQK1dY8lOo5pLcbLn5sxgew3RRbi2xRgA408IAjcvX3eYnZoA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for (int i=0; i<4; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n            check();\n            if (frontIsBlocked())\n            {\n                turnLeft();\n            }\n        }\n    }\n}\n\n\n//this method allows Karel to take ball if ball is present and put a ball if no ball is present\n\nprivate void check()\n{\n    if (noBallsPresent())\n    {\n        putBall();\n    }\n    else\n    {\n        takeBall();\n    }\n   \n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for (int i=0; i<4; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        if (frontIsBlocked())\n        {\n            stack();\n            turnLeft();\n        }\n    }\n}\n        \nprivate void stack()\n{\n    putBall();\n    putBall();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: for loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: if statement\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: statements\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "if statement",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Mark",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"How many balls will be put down by Karel?": "107",
							"A control structure is used inside the block of another control structure. This is referred to as": "statements",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "for loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for (int i=0; i<4; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        if (frontIsBlocked())\n        {\n            stack();\n            turnLeft();\n        }\n    }\n}\n        \nprivate void stack()\n{\n    putBall();\n    putBall();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for (int i=0; i<4; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n            check();\n            if (frontIsBlocked())\n            {\n                turnLeft();\n            }\n        }\n    }\n}\n\n\n//this method allows Karel to take ball if ball is present and put a ball if no ball is present\n\nprivate void check()\n{\n    if (noBallsPresent())\n    {\n        putBall();\n    }\n    else\n    {\n        takeBall();\n    }\n   \n}",
							"Last Name": "Ku",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0Ine-5hUQQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-21T18:36:45.281Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-21T19:08:24.045Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:45.445Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:29.894Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:37:43.777Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudyGQUn5esufmGftMsy9xxWsCg7alcwntjy9Ip3bmi8x3QtjIogPio7-8BIwg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsBlocked())\n        {\n            jumpHurdle();\n        }        \n        move();\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for(int i=0; i < 4; i++)\n    {\n        cleanRow();\n    }\n}\n\nprivate void cleanRow()\n{\n    while(frontIsClear())\n    {\n        move();\n        checkBall();\n    }\n    turnLeft();\n}\n\nprivate void checkBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for(int i=0; i < 4; i++)\n    {\n        moveForward();\n    }\n}\n\nprivate void moveForward()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n    putBall();\n    putBall();\n    turnLeft();\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsBlocked())\n        {\n            jumpHurdle();\n        }        \n        move();\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Carmen",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for(int i=0; i < 4; i++)\n    {\n        moveForward();\n    }\n}\n\nprivate void moveForward()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n    putBall();\n    putBall();\n    turnLeft();\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for(int i=0; i < 4; i++)\n    {\n        cleanRow();\n    }\n}\n\nprivate void cleanRow()\n{\n    while(frontIsClear())\n    {\n        move();\n        checkBall();\n    }\n    turnLeft();\n}\n\nprivate void checkBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}",
							"Last Name": "Cheung",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-21T18:36:54.938Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-21T19:37:43.868Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I0ruNqlsQj6mFgLoV",
					"submittedAt": "2025-02-21T18:36:54.971Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:34.021Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:26:28.935Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufCachsrLweFI9b4UfMvfiW4PNav0x2ZxC6jLAXA5SdZfwruGVSMI_Uyi2C-g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Sena\n\nQ: Last Name\nA: Godek\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(frontIsBlocked())\n        {\n            if(noBallsPresent())\n            {\n                 jumpHurdle();\n            }\n            if(ballsPresent())\n            {\n                takeBall();\n            }\n        } \n    }\n}\n\nprivate void jumpHurdle()\n{\n        turnLeft();\n        move();\n        turnRight();\n        move();\n        turnRight();\n        move();\n        turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    while(notFacingSouth())\n    {\n        takeOrPutBall();\n        move();\n        if(frontIsBlocked())\n        {\n            turnLeft(); \n        }\n    }\n    while(facingSouth())\n    {\n        takeOrPutBall();\n        move();\n        faceEast();\n    }\n}\n\nprivate void takeOrPutBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    if(noBallsPresent())\n    {\n        putBall();\n    }\n}\n\nprivate void faceEast()\n{\n    if(frontIsBlocked())\n    {\n        if(facingSouth())\n        {\n           turnLeft();\n        }\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    while(noBallsPresent())\n    }\n        placeBalls();\n        move();\n        if(frontIsBlocked())\n        {\n            turnLeft();\n        }\n    }\n    turnLeft();\n}\n\nprivate void placeBalls()\n{\n    for(int i = 0; i < 2; i++)\n    {\n        putBall();\n    }\n}\n\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(frontIsBlocked())\n        {\n            if(noBallsPresent())\n            {\n                 jumpHurdle();\n            }\n            if(ballsPresent())\n            {\n                takeBall();\n            }\n        } \n    }\n}\n\nprivate void jumpHurdle()\n{\n        turnLeft();\n        move();\n        turnRight();\n        move();\n        turnRight();\n        move();\n        turnLeft();\n}",
							"First Name": "Sena",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"How many balls will be put down by Karel?": "107",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    while(noBallsPresent())\n    }\n        placeBalls();\n        move();\n        if(frontIsBlocked())\n        {\n            turnLeft();\n        }\n    }\n    turnLeft();\n}\n\nprivate void placeBalls()\n{\n    for(int i = 0; i < 2; i++)\n    {\n        putBall();\n    }\n}\n",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    while(notFacingSouth())\n    {\n        takeOrPutBall();\n        move();\n        if(frontIsBlocked())\n        {\n            turnLeft(); \n        }\n    }\n    while(facingSouth())\n    {\n        takeOrPutBall();\n        move();\n        faceEast();\n    }\n}\n\nprivate void takeOrPutBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    if(noBallsPresent())\n    {\n        putBall();\n    }\n}\n\nprivate void faceEast()\n{\n    if(frontIsBlocked())\n    {\n        if(facingSouth())\n        {\n           turnLeft();\n        }\n    }\n}",
							"Last Name": "Godek",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0IvNTT8mcQj6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-21T18:36:48.517Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-21T19:26:29.053Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:48.519Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:37.560Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:03:40.847Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuddg_YWwKVESsRRneMDW1BbpFAonz9dQwaRq2yhKRdFaYeVFYgxstzAzMrXQg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() {\n    while(noBallsPresent()) {\n        if(frontIsClear()) {\n            move();\n        } else {\n            jumpHurdle();\n        }\n    }\n}\n\npublic void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run() {\n    for(int i = 0; i < 4; i++) {\n        Row();\n        turnLeft();\n    }\n}\n\npublic void Row() {\n    while(frontIsClear()) {\n        if(ballsPresent()) {\n            takeBall();\n        }\n        if(noBallsPresent()) {\n            putBall();\n        }\n        move();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run() {\n    ballsAtCorners();\n}\n\npublic void ballsAtCorners() {\n    for(int i = 0; i<4; i++){\n        while(frontIsClear()) {\n            move();\n        }\n        putBall();\n        putBall();\n        turnLeft();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run() {\n    while(noBallsPresent()) {\n        if(frontIsClear()) {\n            move();\n        } else {\n            jumpHurdle();\n        }\n    }\n}\n\npublic void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Saiful",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run() {\n    ballsAtCorners();\n}\n\npublic void ballsAtCorners() {\n    for(int i = 0; i<4; i++){\n        while(frontIsClear()) {\n            move();\n        }\n        putBall();\n        putBall();\n        turnLeft();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run() {\n    for(int i = 0; i < 4; i++) {\n        Row();\n        turnLeft();\n    }\n}\n\npublic void Row() {\n    while(frontIsClear()) {\n        if(ballsPresent()) {\n            takeBall();\n        }\n        if(noBallsPresent()) {\n            putBall();\n        }\n        move();\n    }\n}",
							"Last Name": "Shaik",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"id": "Cg4Iwe6fnb8OEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-21T18:37:01.496Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-21T19:03:40.958Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:01.498Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:41.089Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "350797049@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:09:05.925Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "350797049@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuflXLfxNt_WudoGsq1fuK06UJSD9X10BEbj4iBNdor5MjlbIIyQqTGb3pV-ww"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: John\n\nQ: Last Name\nA: Ning\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: \npublic void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            turnLeft();\n            move();\n            turnRight(); \n            move();\n            turnRight();\n            move();\n            turnLeft();\n        }\n    }\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for(int i = 0; i < 4; i++)\n    { \n        while (frontIsClear())\n        {\n            if (ballsPresent())\n            {\n                takeBall();\n                move();\n            }\n            else\n            {\n            move();\n            }\n        }\n        turnLeft();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for(int i = 0; i < 4; i++) \n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        If (frontIsBlocked())\n        {\n            turnLeft();\n        }\n    putBall();\n    putBall();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: // comment\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: if-else statement\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "\npublic void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            turnLeft();\n            move();\n            turnRight(); \n            move();\n            turnRight();\n            move();\n            turnLeft();\n        }\n    }\n}",
							"First Name": "John",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "106",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "if-else statement",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for(int i = 0; i < 4; i++) \n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        If (frontIsBlocked())\n        {\n            turnLeft();\n        }\n    putBall();\n    putBall();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for(int i = 0; i < 4; i++)\n    { \n        while (frontIsClear())\n        {\n            if (ballsPresent())\n            {\n                takeBall();\n                move();\n            }\n            else\n            {\n            move();\n            }\n        }\n        turnLeft();\n    }\n}",
							"Last Name": "Ning",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "// comment"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"id": "Cg4I05uw78AOEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-21T18:37:00.356Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-21T19:09:06.039Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:00.361Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:45.996Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:15:54.986Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc4bffHtwgegzqeRPxQ0UtU6xaIM5XMehKHxnINW7kbbhPWkgTE056tZwFocA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\n\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        switchOneSide();\n    }\n}\n\nprivate void switchOneSide()\n{\n    while (frontIsClear())\n    {\n        move();\n        switchBall();\n    }\n    turnLeft();\n}\n\nprivate void switchBall()\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        placeTwoBalls();\n        turnLeft();\n    }\n}\n\nprivate void placeTwoBalls()\n{\n    for (int i = 0 ; i < 2 ; i++)\n    {\n        putBall();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: for loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n    }\n    takeBall();\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\n",
							"First Name": "Nereyal",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "for loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n        placeTwoBalls();\n        turnLeft();\n    }\n}\n\nprivate void placeTwoBalls()\n{\n    for (int i = 0 ; i < 2 ; i++)\n    {\n        putBall();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for (int i = 0 ; i < 4 ; i++)\n    {\n        switchOneSide();\n    }\n}\n\nprivate void switchOneSide()\n{\n    while (frontIsClear())\n    {\n        move();\n        switchBall();\n    }\n    turnLeft();\n}\n\nprivate void switchBall()\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}",
							"Last Name": "Jeyakumar",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-21T18:36:44.415Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-21T19:15:55.103Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEI-phYC6FQ",
					"submittedAt": "2025-02-21T18:36:44.418Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:49.671Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T18:57:06.389Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuckhjHg34mxzuZlcRggDA4DiTwycIxOA8rh4yTW_TWrsrJ_CkRmeQ0M_KpdYg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() \n{\n    while(noBallsPresent())\n    {\n        while(frontIsClear())\n        {\n            move();\n        }\n\n        if(frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n\n    takeBall();\n}\n\nprivate void jumpHurdle() \n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        moveStraight();\n        turnLeft();\n    }\n}\n\nprivate void controlBall()\n{\n    if(noBallsPresent())\n    {\n        putBall();\n    }\n    else\n    {\n        takeBall();\n    }\n}\n\nprivate void moveStraight()\n{\n    while(frontIsClear())\n    {\n        controlBall();\n        move();\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        putBall();\n        putBall();\n        moveStraight();\n        turnLeft();\n    }\n}\n\nprivate void moveStraight()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run() \n{\n    while(noBallsPresent())\n    {\n        while(frontIsClear())\n        {\n            move();\n        }\n\n        if(frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n\n    takeBall();\n}\n\nprivate void jumpHurdle() \n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Cayden",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"How many balls will be put down by Karel?": "107",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        putBall();\n        putBall();\n        moveStraight();\n        turnLeft();\n    }\n}\n\nprivate void moveStraight()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        moveStraight();\n        turnLeft();\n    }\n}\n\nprivate void controlBall()\n{\n    if(noBallsPresent())\n    {\n        putBall();\n    }\n    else\n    {\n        takeBall();\n    }\n}\n\nprivate void moveStraight()\n{\n    while(frontIsClear())\n    {\n        controlBall();\n        move();\n    }\n}",
							"Last Name": "Chiu",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-21T18:36:44.190Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-21T18:57:06.545Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-21T18:57:26.353Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:44.193Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:53.160Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:30:25.765Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucPWd6okQAVIfigxas3EgR9d_5a8IlSzuP6bs0uKVW5aalKaVKly1icBOarGw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: kung\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n         if(frontIsClear())\n         {\n             move()\n         }\n             else\n        {\n            jumpHurdle();\n        }\n    } \n    takeBall();\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    clearStreet();\n    backToFirstAvenue();\n    while(leftIsClear())\n    {\n         turnLeft();\n         move();\n         turnRight();\n         clearStreet();\n         backToFirstAvenue();\n    }\n    backToOrigin();\n}\nprivate void clearStreet()\n{\n    while(frontIsClear())\n    {\n         move();\n         if(ballsPresent())\n         {\n              takeBall();\n         }\n    }\n}\nprivate void backToFirstAvenue()\n{\n    turnAround();\n    while(frontIsClear());\n    {\n         move();\n    }\n    turnAround();\n}\nprivate void backToOrigin()\n{\n    turnRight();\n    while(frontIsClear())\n    {\n         move();\n    }\n    turnLeft();\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n     for(int i=0; i<4; i++)\n     {\n         runAndTurn();\n     }\n    \n}\nprivate void runAndTurn()\n{\n    while(frontIsClear())\n    {\n          move();\n    }\n    putBall();\n    putBall();\n    turnLeft(); \n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: */  comment */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: for loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: for all of the above\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(noBallsPresent())\n    {\n         if(frontIsClear())\n         {\n             move()\n         }\n             else\n        {\n            jumpHurdle();\n        }\n    } \n    takeBall();\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Owen",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "106",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "for all of the above",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "for loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n     for(int i=0; i<4; i++)\n     {\n         runAndTurn();\n     }\n    \n}\nprivate void runAndTurn()\n{\n    while(frontIsClear())\n    {\n          move();\n    }\n    putBall();\n    putBall();\n    turnLeft(); \n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    clearStreet();\n    backToFirstAvenue();\n    while(leftIsClear())\n    {\n         turnLeft();\n         move();\n         turnRight();\n         clearStreet();\n         backToFirstAvenue();\n    }\n    backToOrigin();\n}\nprivate void clearStreet()\n{\n    while(frontIsClear())\n    {\n         move();\n         if(ballsPresent())\n         {\n              takeBall();\n         }\n    }\n}\nprivate void backToFirstAvenue()\n{\n    turnAround();\n    while(frontIsClear());\n    {\n         move();\n    }\n    turnAround();\n}\nprivate void backToOrigin()\n{\n    turnRight();\n    while(frontIsClear())\n    {\n         move();\n    }\n    turnLeft();\n}",
							"Last Name": "kung",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "*/  comment */"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-21T18:36:55.879Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-21T19:30:25.852Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEI-phYC6FQ",
					"submittedAt": "2025-02-21T18:36:55.882Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:52:56.900Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T18:59:58.427Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "440021905@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuc30cNxnUGBrGTHLT5qLuKdNmSibMnAgblmv1Ybnvpr2SYGoIhUAyKl68_jzQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Clifton\n\nQ: Last Name\nA: Lin\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\nwhile(noBallsPresent())\n{\nif(frontIsBlocked())\n{\njumpHurdle();\n}\nelse\n{\nmove();\n}\n}\ntakeBall();\n}\n\npublic void jumpHurdle()\n{\nturnLeft();\nmove();\nturnRight();\nmove();\nturnRight();\nmove();\nturnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\nrunWhole();\nwhile(frontIsClear())\n{\nrunWhole();\n}\nturnAround();\nwhile(frontIsClear())\n{\nmove();\n}\nturnLeft();\n}\n}\n\npublic void runWhole()\n{\nmoveToEnd();\nturnAround();\nsafeInverse();\nturnRight();\n}\n\npublic void moveToEnd()\n{\nwhile(frontIsClear())\n{\nmove();\n}\n}\n\npublic void safeInverse()\n{\nwhile(frontIsClear())\n{\nif(ballsPresent())\n{\ntakeBall();\n}\nelse\n{\nputBall();\n}\nmove();\n}\nif(ballsPresent())\n{\ntakeBall();\n}\nelse\n{\nputBall();\n}\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\nfor(int i = 0; i < 4; i++)\n{\nputBall();\nputBall();\nwhile(frontIsClear())\n{\nmove();\n}\nturnLeft();\n}\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 9\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: if statement\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: if-else statement\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: for all of the above\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "if statement",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\nwhile(noBallsPresent())\n{\nif(frontIsBlocked())\n{\njumpHurdle();\n}\nelse\n{\nmove();\n}\n}\ntakeBall();\n}\n\npublic void jumpHurdle()\n{\nturnLeft();\nmove();\nturnRight();\nmove();\nturnRight();\nmove();\nturnLeft();\n}",
							"First Name": "Clifton",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "9",
							"How many balls will be put down by Karel?": "106",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "for all of the above",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "if-else statement",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\nfor(int i = 0; i < 4; i++)\n{\nputBall();\nputBall();\nwhile(frontIsClear())\n{\nmove();\n}\nturnLeft();\n}\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\nrunWhole();\nwhile(frontIsClear())\n{\nrunWhole();\n}\nturnAround();\nwhile(frontIsClear())\n{\nmove();\n}\nturnLeft();\n}\n}\n\npublic void runWhole()\n{\nmoveToEnd();\nturnAround();\nsafeInverse();\nturnRight();\n}\n\npublic void moveToEnd()\n{\nwhile(frontIsClear())\n{\nmove();\n}\n}\n\npublic void safeInverse()\n{\nwhile(frontIsClear())\n{\nif(ballsPresent())\n{\ntakeBall();\n}\nelse\n{\nputBall();\n}\nmove();\n}\nif(ballsPresent())\n{\ntakeBall();\n}\nelse\n{\nputBall();\n}\n}",
							"Last Name": "Lin",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"id": "Cg4I55juyqAPEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-21T18:37:25.378Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-21T18:59:58.537Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:25.381Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:00.651Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:21:09.274Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf7HOYtd71wQyJplRoIC4uvlY-gOYgNVkn6SfIArpP7zOKNOAhKrFKidRpFwA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n        else\n        {\n            move();\n        }\n    }\n    takeBall();\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        while (frontIsClear())\n        {\n            clearRow();\n        }\n        turnLeft();\n    }\n}\nprivate void clearRow()\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n    move();\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        putBall();\n        putBall();\n        while (frontIsClear())\n        {\n            move();\n        }\n        turnLeft();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: bottom-up design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: statements\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n        else\n        {\n            move();\n        }\n    }\n    takeBall();\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Jennifer",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"How many balls will be put down by Karel?": "107",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"A control structure is used inside the block of another control structure. This is referred to as": "statements",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        putBall();\n        putBall();\n        while (frontIsClear())\n        {\n            move();\n        }\n        turnLeft();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        while (frontIsClear())\n        {\n            clearRow();\n        }\n        turnLeft();\n    }\n}\nprivate void clearRow()\n{\n    if (ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n    move();\n}",
							"Last Name": "Zheng",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "bottom-up design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"id": "Cg4I7ZHxyucSEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-21T18:37:44.030Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-21T19:21:09.361Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:44.035Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:04.442Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:04:46.931Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuf9-55MzbxcXIu6RXmSalA4m6YQNLrteKd45Y9bkFQv8kbLkXS5bQ0RxhHqVg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        if(frontIsBlocked())\n        {\n            jump();\n        }\n\n    }\n    takeBall();\n}\n\nprivate void jump()\n{\n\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n    move();\n\n}\n\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    while(leftIsClear())\n    {\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n        else\n        {\n             putBall();\n        }\n        clean();\n        return();\n    }\n\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n   else\n   {\n         putBall();\n    }\n    clean();\n        \n    turnAround();\n    while(frontIsClear())\n    {\n        move();\n    }\n    turnLeft();\n    while(frontIsClear())\n    {\n        move();\n    }\n    turnLeft();\n     \n}\n\nprivate void clean()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n        else\n        {\n            putBall();\n         }\n    }\n}\n\nprivate void return()\n{\n    turnLeft();\n    move();\n    turnLeft();\n    while(frontIsClear())\n    {\n        move();\n    }\n    turnAround();\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n        for(int i=0; i<4; i++)\n        {\n            putBalls();\n            while(frontIsClear())\n            {\n                 move();\n            }\n            turnLeft();\n        }\n}\n\n\nprivate void putBalls()\n{\n    putBall();\n    putBall();\n}\n\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: /*  comment  */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        if(frontIsBlocked())\n        {\n            jump();\n        }\n\n    }\n    takeBall();\n}\n\nprivate void jump()\n{\n\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n    move();\n\n}\n",
							"First Name": "Lionson",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"Which of the following is a condition?": "frontIsClear()",
							"A condition...": "always returns true or false",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"How many balls will be put down by Karel?": "107",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n        for(int i=0; i<4; i++)\n        {\n            putBalls();\n            while(frontIsClear())\n            {\n                 move();\n            }\n            turnLeft();\n        }\n}\n\n\nprivate void putBalls()\n{\n    putBall();\n    putBall();\n}\n",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    while(leftIsClear())\n    {\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n        else\n        {\n             putBall();\n        }\n        clean();\n        return();\n    }\n\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n   else\n   {\n         putBall();\n    }\n    clean();\n        \n    turnAround();\n    while(frontIsClear())\n    {\n        move();\n    }\n    turnLeft();\n    while(frontIsClear())\n    {\n        move();\n    }\n    turnLeft();\n     \n}\n\nprivate void clean()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n        else\n        {\n            putBall();\n         }\n    }\n}\n\nprivate void return()\n{\n    turnLeft();\n    move();\n    turnLeft();\n    while(frontIsClear())\n    {\n        move();\n    }\n    turnAround();\n}",
							"Last Name": "Meng",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "/*  comment  */"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iu8ODue4SEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-21T18:37:29.590Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-21T19:04:47.028Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:29.623Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:08.006Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:06:20.434Z",
								"totalFormResponses": 28,
								"extractionMethod": "FormApp",
								"formTitle": "Unit 1 Test: Karel the Dog",
								"contentType": "form",
								"email": "440030068@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufE9WgqYxFvUsxQuH_q3MGrhRrDkRi7K6GhNa41soTe6J2jrhNVsjERvrwSEA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Moses\n\nQ: Last Name\nA: He\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for(int i=0;i<7;i++)\n    {\n        if(frontIsClear)\n        {\n            move();\n        }\n        else\n        {\n           jumpUp();\n        }\n    }\n}\nprivate void turnRight ()\n{\n    turnLeft();\n    turnLeft();\n    turnLeft();\n\n}\nprivate void jumpUp ()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: private void run()\n{\n    for(int i=0;i<4;i++)\n    {\n        while(frontIsClear)\n        {\n            move();\n            if(ballsPresent)\n            {\n                takeBall();\n            }\n            else\n            {\n                putBall();\n            }\n        turnLeft();\n        }\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: private void run()\n{\n    for(int i=0;i<4;i++)\n    {\n        while(frontIsClear)\n        {\n            move();    \n         }\n    putBall();\n    putBall();\n    turnLeft();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: void()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: // comment\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 10\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "void()",
							"Which control structure requires a condition?": "All of the above",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for(int i=0;i<7;i++)\n    {\n        if(frontIsClear)\n        {\n            move();\n        }\n        else\n        {\n           jumpUp();\n        }\n    }\n}\nprivate void turnRight ()\n{\n    turnLeft();\n    turnLeft();\n    turnLeft();\n\n}\nprivate void jumpUp ()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"First Name": "Moses",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "10",
							"How many balls will be put down by Karel?": "106",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"We teach Karel new commands by creating": "methods",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "private void run()\n{\n    for(int i=0;i<4;i++)\n    {\n        while(frontIsClear)\n        {\n            move();    \n         }\n    putBall();\n    putBall();\n    turnLeft();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "private void run()\n{\n    for(int i=0;i<4;i++)\n    {\n        while(frontIsClear)\n        {\n            move();\n            if(ballsPresent)\n            {\n                takeBall();\n            }\n            else\n            {\n                putBall();\n            }\n        turnLeft();\n        }\n    }\n}",
							"Last Name": "He",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "// comment"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-21T18:36:37.315Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-21T19:06:20.529Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:37.346Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:11.656Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"studentId": "102479132795602540628",
					"feedback": "",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 24,
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:19:48.590Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuetDfaz17TvNPEXdu53pDNEkZSsolP0UJ7FZ5IZYqrX8g0JDOmsmrGTitkolA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public class Superkarel extends Karel \n{\n    public void run()\n    {\n        while (noBallsPresent())\n        {\n            if (frontIsBlocked))\n            {\n                jumpHurdle();\n            }\n\n            if (frontIsClear())\n            {\n                move();\n            }\n        }\n        takeBall();\n    }\n\n    public void jumpHurdle()\n    {\n        turnLeft();\n        move();\n        turnRight();\n        move();\n        turnRight();\n        move();\n        turnLeft();\n    }\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public class Superkarel extends Karel \n{\n    public void run()\n    {\n        for ( int i=0; i < 4; i++)\n        {\n            clearRow();\n            turnLeft();\n        }\n    }\n\n    public void clearRow()\n    {\n        while (frontIsClear())\n        {\n            if (ballsPresent())\n            {\n                takeBall();\n            }\n\n            if (noBallsPresennt())\n            {\n                putBall();\n            }\n            move();\n        }\n    }\n}\n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public class Superkarel extends Karel \n{\n    public void run()\n    {\n        for ( int i=0; i < 4; i++)\n        {\n            getInPosition();\n            placeBalls();\n        }\n    }\n    \n    public void getInPosition()\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n    }\n\n    public void placeBalls()\n    {\n        putBall();\n        putBall();\n        turnLeft();\n    }\n}\n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: */  comment */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 106\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: while loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public class Superkarel extends Karel \n{\n    public void run()\n    {\n        while (noBallsPresent())\n        {\n            if (frontIsBlocked))\n            {\n                jumpHurdle();\n            }\n\n            if (frontIsClear())\n            {\n                move();\n            }\n        }\n        takeBall();\n    }\n\n    public void jumpHurdle()\n    {\n        turnLeft();\n        move();\n        turnRight();\n        move();\n        turnRight();\n        move();\n        turnLeft();\n    }\n}",
							"First Name": "Steven",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"How many balls will be put down by Karel?": "106",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Which is a valid Karel command?": "turnLeft();",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "while loop",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public class Superkarel extends Karel \n{\n    public void run()\n    {\n        for ( int i=0; i < 4; i++)\n        {\n            getInPosition();\n            placeBalls();\n        }\n    }\n    \n    public void getInPosition()\n    {\n        while (frontIsClear())\n        {\n            move();\n        }\n    }\n\n    public void placeBalls()\n    {\n        putBall();\n        putBall();\n        turnLeft();\n    }\n}",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public class Superkarel extends Karel \n{\n    public void run()\n    {\n        for ( int i=0; i < 4; i++)\n        {\n            clearRow();\n            turnLeft();\n        }\n    }\n\n    public void clearRow()\n    {\n        while (frontIsClear())\n        {\n            if (ballsPresent())\n            {\n                takeBall();\n            }\n\n            if (noBallsPresennt())\n            {\n                putBall();\n            }\n            move();\n        }\n    }\n}",
							"Last Name": "Wang",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "*/  comment */"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Ik8mXwcMUEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-21T18:37:06.327Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-21T19:19:48.716Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:37:06.331Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:16.003Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849359",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"questionCount": 24,
								"matchedByEmail": true,
								"responseTime": "2025-02-21T19:01:34.874Z",
								"totalFormResponses": 28,
								"formTitle": "Unit 1 Test: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucm_7Dpa4tRRkjcmmHXrik14HS-Zci8As260yMU6j3dH4lESGvaFCiDTqHC6A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n    }\n\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n}\n\npublic void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.\nA: public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        goStraight();\n        turnCorner();\n    }\n}\n\npublic void detectBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}\n\npublic void goStraight()\n{\n    while(frontIsClear())\n    {\n        detectBall();\n        move();\n    }\n}\n\npublic void turnCorner()\n{\n    if(frontIsBlocked())\n    {\n        detectBall();\n        turnLeft();\n    }\n}\n        \n\nQ: Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.\nA: public void run()\n{\n    for(int i = 0; i < 8; i++)\n    {\n        goStraight();\n        turnCorner();\n    }\n}\n\npublic void goStraight()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n    if(frontIsBlocked())\n    {\n        putBall();\n        turnLeft();\n    }\n} \n\nQ: Which is a valid Karel command?\nA: turnLeft();\n\nQ: What method is the entry point to a Karel program?\nA: run()\n\nQ: What is a method?\nA: A method is a command that Karel can do. It has a name and a set of instructions.\n\nQ: Starting with the big problem and breaking it down into smaller problems is called\nA: top-down design\n\nQ: Which of the following should be used for a single-line comment?\nA: // comment\n\nQ: Which of the following should be used for a multi-line comment?\nA: //* comment */\n\nQ: Which 'for' loop will repeat 5 times?\nA: for(int i = 0; i < 5; i++) {}\n\nQ: How many balls will be put down by Karel?\nA: 107\n\nQ: A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?\nA: 0\n\nQ: You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?\nA: for loop\n\nQ: Which of the following is a condition?\nA: frontIsClear()\n\nQ: Which control structure requires a condition?\nA: All of the above\n\nQ: A wall is directly in front of Karel. Which condition should you use?\nA: frontIsBlocked()\n\nQ: If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?\nA: while loop\n\nQ: A condition...\nA: always returns true or false\n\nQ: We teach Karel new commands by creating\nA: methods\n\nQ: Code indenting is required...\nA: to help us (humans) more easily see the structure of the code\n\nQ: A control structure is used inside the block of another control structure. This is referred to as\nA: nesting\n\nQ: An 'if' statement...\nA: must always have a condition",
						"structuredData": {
							"What method is the entry point to a Karel program?": "run()",
							"Which control structure requires a condition?": "All of the above",
							"Which 'for' loop will repeat 5 times?": "for(int i = 0; i < 5; i++) {}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world can be of any size, but there will always be a ball in the last avenue as shown in the diagram. Have Karel move to the end of the street and pick up the ball, jumping over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n    }\n\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n}\n\npublic void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"First Name": "Vivian",
							"What is a method?": "A method is a command that Karel can do. It has a name and a set of instructions.",
							"Which of the following should be used for a single-line comment?": "// comment",
							"A condition...": "always returns true or false",
							"Which of the following is a condition?": "frontIsClear()",
							"A Karel world is exactly 10 avenues wide. Karel starts in the bottom left corner facing East. How many times will this loop execute its 'move' instruction?": "0",
							"How many balls will be put down by Karel?": "107",
							"Which is a valid Karel command?": "turnLeft();",
							"A control structure is used inside the block of another control structure. This is referred to as": "nesting",
							"Code indenting is required...": "to help us (humans) more easily see the structure of the code",
							"If you want Karel to pick up all the tennis balls at a location but don't know how many there are, which control structure should you use?": "while loop",
							"You want Karel to move from the left to the right side of the world and then back. Which control structure should you use?": "for loop",
							"We teach Karel new commands by creating": "methods",
							"A wall is directly in front of Karel. Which condition should you use?": "frontIsBlocked()",
							"Karel starts and ends in the south-west corner facing east. The starting world has no balls. Have Karel put down 2 balls in all 4 corners of the world.  You must use a 'for' and a 'while' loop appropriately in your solution. You must also create and use at least one appropriate method. The following diagram shows the end screen.": "public void run()\n{\n    for(int i = 0; i < 8; i++)\n    {\n        goStraight();\n        turnCorner();\n    }\n}\n\npublic void goStraight()\n{\n    while(frontIsClear())\n    {\n        move();\n    }\n    if(frontIsBlocked())\n    {\n        putBall();\n        turnLeft();\n    }\n} ",
							"There are balls randomly placed around the perimeter of the world. The balls can be in any position around the perimeter of the world and the world can be any size larger than 2 x 2. Have Karel travel around the perimeter - if there is a ball, pick it up, and if there isn't, put one down. Karel starts and ends in the south-west corner facing east as shown in the diagram.  You must use appropriate loops and define and use appropriate methods.": "public void run()\n{\n    for(int i = 0; i < 4; i++)\n    {\n        goStraight();\n        turnCorner();\n    }\n}\n\npublic void detectBall()\n{\n    if(ballsPresent())\n    {\n        takeBall();\n    }\n    else\n    {\n        putBall();\n    }\n}\n\npublic void goStraight()\n{\n    while(frontIsClear())\n    {\n        detectBall();\n        move();\n    }\n}\n\npublic void turnCorner()\n{\n    if(frontIsBlocked())\n    {\n        detectBall();\n        turnLeft();\n    }\n}\n        ",
							"Last Name": "Li",
							"An 'if' statement...": "must always have a condition",
							"Starting with the big problem and breaking it down into smaller problems is called": "top-down design",
							"Which of the following should be used for a multi-line comment?": "//* comment */"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU5/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"id": "Cg4Iz_iw9dcUEI-phYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-21T18:36:47.115Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-21T19:01:35.009Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-21T18:36:47.117Z",
					"assignmentName": "Unit 1 Test: Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:47.169Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "349168732@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-18T19:12:04.577Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucPmWIi_D8wjNkKSacn3Lw8HiuW9wx2AN5NXsa32DAaANexQro-ZtbQoQMrog"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    \n     while (frontIsClear())\n     {  \n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n           }\n      }\n        \n       putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for(int i=0; I<7; I++)\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Mark",
							"Last Name": "Ku",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    \n     while (frontIsClear())\n     {  \n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n           }\n      }\n        \n       putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for(int i=0; I<7; I++)\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-19T12:35:46.948Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-21T18:58:22.731Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-21T18:58:25.722Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvfCrsQEQjKmFgLoV",
					"submittedAt": "2025-02-19T12:35:46.955Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:48.207Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "348582230@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:50:43.920Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348582230@gapps.yrdsb.ca",
								"responseId": "2_ABaOnud06Y6QAg375OBugmtpwRa5WIcjrAJYGLsm2fwW7NZkOIJnh_pVt6k9wUjb7w"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Abithan\n\nQ: Last Name\nA: Paskaranathan\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while (frontIsClear())\n    {\n        move();\n\n        if (ballsPresent())\n        {\n            takeBall();\n        }\n    }\n\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for (int i = 0; i < 7; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n\n            if (frontIsBlocked())\n            {\n                jumpHurdle();\n            }\n        }\n    }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Abithan",
							"Last Name": "Paskaranathan",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while (frontIsClear())\n    {\n        move();\n\n        if (ballsPresent())\n        {\n            takeBall();\n        }\n    }\n\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for (int i = 0; i < 7; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n\n            if (frontIsBlocked())\n            {\n                jumpHurdle();\n            }\n        }\n    }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-19T12:35:38.062Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-19T18:50:44.033Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQjKmFgLoV",
					"submittedAt": "2025-02-19T12:35:38.068Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:49.306Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "348590274@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:57:30.965Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "348590274@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudkC1kiT4VAzW1sz4MB7nbWAhlWEt__R5YDi8zlM_EB-12xPkZBLgjv4pOeFw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Owen \n\nQ: Last Name\nA: Lee\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while(frontIsClear()){\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        {\n    }\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    move();\n    jumpHurdle();\n    move();\n    jumpHurdle();\n    jumpHurdle();\n    move();\n    move();\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Owen ",
							"Last Name": "Lee",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while(frontIsClear()){\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        {\n    }\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    move();\n    jumpHurdle();\n    move();\n    jumpHurdle();\n    jumpHurdle();\n    move();\n    move();\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-19T12:35:31.969Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-19T18:57:31.192Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQjKmFgLoV",
					"submittedAt": "2025-02-19T12:35:31.974Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:50.438Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "348586678@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-21T18:20:50.944Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348586678@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucktFUIybHj_xcpJMMARsq8LzVDeBZE4yvfaWK0dJQjDBktSXQb6kAYFeKN-A"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Kian\n\nQ: Last Name\nA: Mistry\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n    {\n         while (frontIsClear())\n          {\n               if (noBallsPresent())\n               {\n                    move();\n                }\n                else if (ballsPresent())\n                {\n                     takeBall();\n                }\n     }\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for (int i = 0; i < 8; i++)\n    {\n         if (frontIsClear())\n         {\n             move();\n          }\n         else \n         {\n             jumpHurdle();\n          }\n }\n\npublic void jumpHurdle();\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Kian",
							"Last Name": "Mistry",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n    {\n         while (frontIsClear())\n          {\n               if (noBallsPresent())\n               {\n                    move();\n                }\n                else if (ballsPresent())\n                {\n                     takeBall();\n                }\n     }",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for (int i = 0; i < 8; i++)\n    {\n         if (frontIsClear())\n         {\n             move();\n          }\n         else \n         {\n             jumpHurdle();\n          }\n }\n\npublic void jumpHurdle();\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"id": "Cg0IwJXv6QsQjKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-19T12:36:03.413Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-19T19:09:37.866Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-21T18:20:51.007Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:03.417Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:51.583Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348615568@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:49:55.701Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "348615568@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudy6L2BOtwVNixc4Edc74xaPRP-lGsRbqbn9UoxZKJAZp2vhzjwI1oYlAPE2g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Jiayu\n\nQ: Last Name\nA: Chen\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run() {\n    while (frontIsClear()) {\n        move();\n        if (ballsPresent()) {\n        takeBall();\n        }\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() {\n   for (int i = 0; i < 8; i++) {\n        move();\n        if (frontIsBlocked()) {\n            jumpHurdle();\n        }\n    }\n}\n\nprivate void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Jiayu",
							"Last Name": "Chen",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run() {\n    while (frontIsClear()) {\n        move();\n        if (ballsPresent()) {\n        takeBall();\n        }\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run() {\n   for (int i = 0; i < 8; i++) {\n        move();\n        if (frontIsBlocked()) {\n            jumpHurdle();\n        }\n    }\n}\n\nprivate void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-19T12:36:15.778Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-19T18:49:55.802Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-19T18:50:18.084Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4QjKmFgLoV",
					"submittedAt": "2025-02-19T12:36:15.784Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:52.843Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "349045377@gapps.yrdsb.ca",
								"matchedByEmail": false,
								"responseTime": "2025-06-18T19:12:04.577Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucPmWIi_D8wjNkKSacn3Lw8HiuW9wx2AN5NXsa32DAaANexQro-ZtbQoQMrog"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    \n     while (frontIsClear())\n     {  \n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n           }\n      }\n        \n       putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for(int i=0; I<7; I++)\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Mark",
							"Last Name": "Ku",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    \n     while (frontIsClear())\n     {  \n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n           }\n      }\n        \n       putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for(int i=0; I<7; I++)\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-19T12:37:49.246Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-23T01:26:13.060Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQjKmFgLoV",
					"submittedAt": "2025-02-19T12:37:49.250Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:53.996Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "348606054@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:56:16.247Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "348606054@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuett4yRdlr2gbppr9xlpeHlGq5jlqfAzM-tquApdkqRgqOPMho--QmrG8MEVg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Clark\n\nQ: Last Name\nA: Chen\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n\n    while(noBallsPresent()\n    {\n        move();\n    }\n    if(ballsPresent()\n    {\n        takeBall();\n    }\n    while(frontIsClear()\n    {\n        move();\n    }\n    putBall();\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    move();\n    jumpHurdle();\n    move();\n    jumpHurdle();\n    jumpHurdle();\n    while(frontIsClear()\n    {\n        move();\n    }\n\nprivate void jumpHurdle() \n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n}\n\n\n\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Clark",
							"Last Name": "Chen",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n\n    while(noBallsPresent()\n    {\n        move();\n    }\n    if(ballsPresent()\n    {\n        takeBall();\n    }\n    while(frontIsClear()\n    {\n        move();\n    }\n    putBall();",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    move();\n    jumpHurdle();\n    move();\n    jumpHurdle();\n    jumpHurdle();\n    while(frontIsClear()\n    {\n        move();\n    }\n\nprivate void jumpHurdle() \n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n}\n\n\n",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ik_u42h8QjKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-19T12:36:21.444Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-19T18:56:16.334Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:21.449Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:55.164Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "349541300@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:01:33.099Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349541300@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudUG1VK67dQyBiIFSLB0ukeVITnP8C8ZMen_1jAZha-Y7Iyv4l_fTxmPVaYFw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Edward \n\nQ: Last Name\nA: Wang\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        if (ballsPresent())\n        {\n            takeBall();\n        }\n    }\n    while (frontIsClear())\n    {\n        move();\n    }\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for (int i = 0 ; i < 7 ; i++)\n    {\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n        else \n        {\n            move();\n        }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Edward ",
							"Last Name": "Wang",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        if (ballsPresent())\n        {\n            takeBall();\n        }\n    }\n    while (frontIsClear())\n    {\n        move();\n    }\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for (int i = 0 ; i < 7 ; i++)\n    {\n        if (frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n        else \n        {\n            move();\n        }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0I7-PGhEAQjKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-19T12:36:44.076Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-19T19:01:33.209Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:44.113Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:56.420Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "348611500@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:03:18.074Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "348611500@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuda6H97rLTgtGZdEOgO3hQLgJwQocbRFRuhJ9-y17Mawaj73sl1nhTMUvoRnw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Leo\n\nQ: Last Name\nA: So\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run() \n{\n        while(frontIsClear())\n        {\n                if(ballsPresent())\n                {\n                        takeBall();\n                }\n                move();\n        }\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n        for(int i = 0; i < 8; i ++)\n        {\n                if(frontIsBlocked())\n                {\n                        jumpHurdle();\n                }\n                else\n                {\n                        move();\n                }\n}\n\n\nprivate void jumpHurdle()\n{\n        turnLeft():\n        move();\n        turnRight();\n        if(frontIsBlocked())\n        {\n                turnRight();\n                move();\n                turnLeft();\n        }\n        else\n        {\n                move();\n                turnRight();\n                move();\n                turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Leo",
							"Last Name": "So",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run() \n{\n        while(frontIsClear())\n        {\n                if(ballsPresent())\n                {\n                        takeBall();\n                }\n                move();\n        }\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n        for(int i = 0; i < 8; i ++)\n        {\n                if(frontIsBlocked())\n                {\n                        jumpHurdle();\n                }\n                else\n                {\n                        move();\n                }\n}\n\n\nprivate void jumpHurdle()\n{\n        turnLeft():\n        move();\n        turnRight();\n        if(frontIsBlocked())\n        {\n                turnRight();\n                move();\n                turnLeft();\n        }\n        else\n        {\n                move();\n                turnRight();\n                move();\n                turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0Ir5z7q0AQjKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-19T12:35:02.758Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-19T19:03:18.156Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:35:02.762Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:57.452Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349932921@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-06-18T19:12:04.577Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349932921@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucPmWIi_D8wjNkKSacn3Lw8HiuW9wx2AN5NXsa32DAaANexQro-ZtbQoQMrog"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Mark\n\nQ: Last Name\nA: Ku\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    \n     while (frontIsClear())\n     {  \n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n           }\n      }\n        \n       putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for(int i=0; I<7; I++)\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Mark",
							"Last Name": "Ku",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    \n     while (frontIsClear())\n     {  \n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n           }\n      }\n        \n       putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for(int i=0; I<7; I++)\n    {\n        if (frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n}\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-19T12:37:30.994Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-19T18:56:01.921Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-06-18T19:12:04.688Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQjKmFgLoV",
					"submittedAt": "2025-02-19T12:37:30.999Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:58.535Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "349781427@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:03:14.769Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "349781427@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudeD3wqTW1C-86ftDIGfhJmiF1gBPOsJUWPq-9D2m5ZsMipw2EiWLIUf-VkWA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Carmen\n\nQ: Last Name\nA: Cheung\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        takeBall();\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    if(int i=0; i < 8; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n        jumpOverHurdle();\n}\n\nprivate void jumpOverHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n    move();\n    turnRight();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Carmen",
							"Last Name": "Cheung",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        takeBall();\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    if(int i=0; i < 8; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n        jumpOverHurdle();\n}\n\nprivate void jumpOverHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n    move();\n    turnRight();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQjKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-19T12:37:10.122Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-19T19:03:14.845Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:37:10.126Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:53:59.767Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "349683599@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:02:07.757Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349683599@gapps.yrdsb.ca",
								"responseId": "2_ABaOnue6QZiVhAjC72CnxQ2ufYYP5ggAKOY-5kDxIHX35eAK-zC9lX7pqwopqTPhhA"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Sena \n\nQ: Last Name\nA: Godek\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n             takeBall();\n        }\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    clearWorld();\n}\n\nprivate void clearWorld()\n{\n    for(int i = 0; i < 8; i++)\n    {\n        if(frontIsClear())\n        {\n             move();\n        }\n        else\n        {\n             turnLeft();\n             move();\n             turnRight();\n             move();\n             turnRight();\n             move();\n             turnLeft();\n        }\n    }\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: move()",
						"structuredData": {
							"Basic Karel can do all of the following except": "move()",
							"First Name": "Sena ",
							"Last Name": "Godek",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n             takeBall();\n        }\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    clearWorld();\n}\n\nprivate void clearWorld()\n{\n    for(int i = 0; i < 8; i++)\n    {\n        if(frontIsClear())\n        {\n             move();\n        }\n        else\n        {\n             turnLeft();\n             move();\n             turnRight();\n             move();\n             turnRight();\n             move();\n             turnLeft();\n        }\n    }\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"id": "Cg0IvNTT8mcQjKmFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-19T12:35:19.119Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-19T19:02:07.878Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:35:19.152Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:01.063Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "350794947@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:51:53.070Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350794947@gapps.yrdsb.ca",
								"responseId": "2_ABaOnucMGFXmmh5Et3LZALOvuOq55bbmffDLwwqogvMEc6Z58D59W0S1QBUZsP6cng"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Saiful\n\nQ: Last Name\nA: Shaik\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run() {\n    while(frontIsClear()) {\n        move();\n        if(ballsPresent(){\n                takeBall();\n            }\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() {\n    for(int i = 1; i <8; i++) {\n        if(frontIsClear()) {\n            move();\n        }\n        if(frontIsBlocked()) {\n             jumpHurdle();\n        }\n    }\n}\n\npublic void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Saiful",
							"Last Name": "Shaik",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run() {\n    while(frontIsClear()) {\n        move();\n        if(ballsPresent(){\n                takeBall();\n            }\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run() {\n    for(int i = 1; i <8; i++) {\n        if(frontIsClear()) {\n            move();\n        }\n        if(frontIsBlocked()) {\n             jumpHurdle();\n        }\n    }\n}\n\npublic void jumpHurdle() {\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4Iwe6fnb8OEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-19T12:36:24.455Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-19T18:51:53.186Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:24.460Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:02.476Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "350826681@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:58:45.708Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "350826681@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueLDNq8UmpQQ4Qd4-JMFnSIuP1JpsqQQPMarXh6LWoX-IZa-AqTZWbm8Z-xAw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Nereyal\n\nQ: Last Name\nA: Jeyakumar\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n     while (frontIsClear())\n     {\n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n          }\n     }\n     putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n     for (int i = 0 ; i < 7 ; i++)\n     {\n          if (frontIsClear())\n          {\n               move();\n          }\n          else\n          {\n               jumpHurdle();\n          }         \n}\n\nprivate void jumpHurdle()\n{\n     turnLeft();\n     move();\n     turnRight();\n     move();\n     turnRight();\n     move();\n     turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Nereyal",
							"Last Name": "Jeyakumar",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n     while (frontIsClear())\n     {\n          move();\n          if (ballsPresent())\n          {\n               takeBall();\n          }\n     }\n     putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n     for (int i = 0 ; i < 7 ; i++)\n     {\n          if (frontIsClear())\n          {\n               move();\n          }\n          else\n          {\n               jumpHurdle();\n          }         \n}\n\nprivate void jumpHurdle()\n{\n     turnLeft();\n     move();\n     turnRight();\n     move();\n     turnRight();\n     move();\n     turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4Iurzi88AOEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-19T12:37:18.698Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-19T18:58:45.839Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:37:18.702Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:03.591Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "349581918@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-20T01:37:14.806Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "349581918@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuexDBnbBlH3eIFQF5r1gP4qeg4n6QOxhKVJw3vGtbFbAmzkbNBemWZKnen7ig"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Cayden\n\nQ: Last Name\nA: Chiu\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n    }\n\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run() \n{\n    if(int = 0; i < 7; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n    }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Cayden",
							"Last Name": "Chiu",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n    }\n\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run() \n{\n    if(int = 0; i < 7; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jumpHurdle();\n        }\n    }\n}\n\nprivate void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"id": "Cg4IvpGn9MAOEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-19T12:36:47.568Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-20T01:37:15.002Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:47.574Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:04.851Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "440002825@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:26:12.530Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "440002825@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuevKlRxH8YrF2UwQ6b9Ts2L1RzVXH3ubpo9qZ8z5EtfQqQ-e7EWm-R64CfsAQ"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Owen\n\nQ: Last Name\nA: Kung\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public class RandomBall extends SuperKarel\n{\n     public void run()\n     {\n          while(frontIsClear())\n          {\n                 move();\n                 if(ballsPresent())\n                 {\n                       takeBall();\n                 }\n          }\n          putBall();\n      }\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public class Hurdle extends SuperKarel\n{\n     public void run()\n     {\n          if(frontIsClear())\n          {\n              move();\n          }\n          else\n           {\n                jumpHurdle();\n            }\n     }\n      private void jumpHurdle();\n      {\n           if(frontIsBlocked())\n           {\n                turnLeft();\n                move();\n                turnRight();\n                move();\n                turnRight();\n                move();\n                turnLeft();\n           }\n       }\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Owen",
							"Last Name": "Kung",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public class RandomBall extends SuperKarel\n{\n     public void run()\n     {\n          while(frontIsClear())\n          {\n                 move();\n                 if(ballsPresent())\n                 {\n                       takeBall();\n                 }\n          }\n          putBall();\n      }\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public class Hurdle extends SuperKarel\n{\n     public void run()\n     {\n          if(frontIsClear())\n          {\n              move();\n          }\n          else\n           {\n                jumpHurdle();\n            }\n     }\n      private void jumpHurdle();\n      {\n           if(frontIsBlocked())\n           {\n                turnLeft();\n                move();\n                turnRight();\n                move();\n                turnRight();\n                move();\n                turnLeft();\n           }\n       }\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-19T12:35:48.686Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-19T19:26:12.616Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEIyphYC6FQ",
					"submittedAt": "2025-02-19T12:35:48.691Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:06.520Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440021905@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:38:23.667Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "440021905@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufNbtd_MbeAysKeJdMpRSQ3EWdrODxSxd8TYGx2vFwcI7wbyameLDFqbGRaSg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Clifton\n\nQ: Last Name\nA: Lin\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        move();\n    }\n    takeBall();\n    while(frontIsClear())\n    {\n        move();\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n}\n\npublic void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Clifton",
							"Last Name": "Lin",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        move();\n    }\n    takeBall();\n    while(frontIsClear())\n    {\n        move();\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    while(frontIsClear())\n    {\n        move();\n        if(frontIsBlocked())\n        {\n            jumpHurdle();\n        }\n    }\n}\n\npublic void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    move();\n    turnRight();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"id": "Cg4I55juyqAPEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-19T12:36:50.555Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-19T19:38:23.815Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:50.589Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:07.628Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "440027909@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:01:59.937Z",
								"totalFormResponses": 22,
								"extractionMethod": "FormApp",
								"formTitle": "Practice Quiz: Karel the Dog",
								"contentType": "form",
								"email": "440027909@gapps.yrdsb.ca",
								"responseId": "2_ABaOnuecNJ1DGa23nzECHM3H5Hz5zE1295aayOi8FrTFubz3QAYOfCPJ4JIfFZTorw"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Jennifer\n\nQ: Last Name\nA: Zheng\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while (noBallsPresent())\n    {\n        move();\n    }\n    takeBall();\n    while (frontIsClear())\n    {\n        move();\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for (int i = 0; i < 7; i++)\n    {\n        if (frontIsBlocked())\n        {\n            turnLeft();\n            move();\n            turnRight();\n            move();\n            turnRight();\n            move();\n            turnLeft();\n        }\n        else \n        {\n            move();\n        }\n    }\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Jennifer",
							"Last Name": "Zheng",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while (noBallsPresent())\n    {\n        move();\n    }\n    takeBall();\n    while (frontIsClear())\n    {\n        move();\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for (int i = 0; i < 7; i++)\n    {\n        if (frontIsBlocked())\n        {\n            turnLeft();\n            move();\n            turnRight();\n            move();\n            turnRight();\n            move();\n            turnLeft();\n        }\n        else \n        {\n            move();\n        }\n    }\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"id": "Cg4I7ZHxyucSEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-19T12:35:43.747Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-19T19:02:00.034Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:35:43.785Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:08.718Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "440029897@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T18:55:05.775Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440029897@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueb4RPtodGcF2fhk6XYCWac-lVmqpOMbJ4zouicLSpvEk-MJEUXVw8Q7sfR-g"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Lionson\n\nQ: Last Name\nA: Meng\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        if(ballsPresent())\n        {\n             takeBall();\n        }\n        if(frontIsBlocked())\n        {\n            putBall();\n        }\n    }\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    for(int i=0; i<7; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jump();\n        }\n    }\n}\n\nprivate void jump()\n{\n    turnLeft();\n    move();\n    turnLeft();\n    move();\n    turnLeft();\n    move();\n    turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Lionson",
							"Last Name": "Meng",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    while(noBallsPresent())\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        if(ballsPresent())\n        {\n             takeBall();\n        }\n        if(frontIsBlocked())\n        {\n            putBall();\n        }\n    }\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    for(int i=0; i<7; i++)\n    {\n        if(frontIsClear())\n        {\n            move();\n        }\n        else\n        {\n            jump();\n        }\n    }\n}\n\nprivate void jump()\n{\n    turnLeft();\n    move();\n    turnLeft();\n    move();\n    turnLeft();\n    move();\n    turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"id": "Cg4Iu8ODue4SEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-19T12:38:24.792Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-19T18:55:05.861Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:38:24.796Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:09.791Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "111100032418663696789",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "440030068@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:23:09.267Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440030068@gapps.yrdsb.ca",
								"responseId": "2_ABaOnufqYRlxI6uQvtZUUknWsrGB9cvxLX25sLPbY8-2VGLpfso2MOurJRu3fKAZvg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Moses\n\nQ: Last Name\nA: He\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n       while (frontIsClear())\n       {\n                 move();\n                 If (balllsPresent())\n                  {\n                           takeBall();\n                   }\n         }\n         putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n             move();\n             jumpUp();\n             move();\n             jumpUp();\n             jumpUp();\n             move();\n             move();\n}\n\nprivate void turnRight()\n{\n          turnLeft();\n          turnLeft();\n          turnLeft();\n}\nprivate void jumpUp()\n{\n          turnLeft();\n          move();\n          turnRight();\n          move();\n          turnRight();\n          move();\n          turnLeft();\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Moses",
							"Last Name": "He",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n       while (frontIsClear())\n       {\n                 move();\n                 If (balllsPresent())\n                  {\n                           takeBall();\n                   }\n         }\n         putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n             move();\n             jumpUp();\n             move();\n             jumpUp();\n             jumpUp();\n             move();\n             move();\n}\n\nprivate void turnRight()\n{\n          turnLeft();\n          turnLeft();\n          turnLeft();\n}\nprivate void jumpUp()\n{\n          turnLeft();\n          move();\n          turnRight();\n          move();\n          turnRight();\n          move();\n          turnLeft();\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T12:34:47.042Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T19:23:09.367Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T19:23:17.342Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4IuZzI4aUTEIyphYC6FQ",
					"submittedAt": "2025-02-19T12:34:47.047Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:10.964Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"questionCount": 6,
								"requestedEmail": "440037784@gapps.yrdsb.ca",
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:18:36.807Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "440037784@gapps.yrdsb.ca",
								"responseId": "2_ABaOnudCYkZQ-eYXe1-lEIKLgUT0P41P9JES-548me3jMc0ktPquoVsILagzQdrcag"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Q: First Name\nA: Steven\n\nQ: Last Name\nA: Wang\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public class SuperKarelProgram extends SuperKarel\n{\n    while (noBallsPresent())\n    {\n        move();\n    }\n    takeBall()\n    while (frontIsClear())\n    {\n        move();\n    }\n    putBall();\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public class SuperKarelProgram extends SuperKarel\n{\n   for (int i=0; i<8; i++)\n   {\n      jumpHurdle \n   }\n}\n\npublic void jumpHurdle \n{\n   if (frontIsBlocked())\n   {\n      turnLeft();\n      move();\n      turnRight();\n      move();\n      turnRight();\n      move();\n      turnLeft();\n   }\n   else\n   {\n      move();\n   }\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Steven",
							"Last Name": "Wang",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public class SuperKarelProgram extends SuperKarel\n{\n    while (noBallsPresent())\n    {\n        move();\n    }\n    takeBall()\n    while (frontIsClear())\n    {\n        move();\n    }\n    putBall();\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public class SuperKarelProgram extends SuperKarel\n{\n   for (int i=0; i<8; i++)\n   {\n      jumpHurdle \n   }\n}\n\npublic void jumpHurdle \n{\n   if (frontIsBlocked())\n   {\n      turnLeft();\n      move();\n      turnRight();\n      move();\n      turnRight();\n      move();\n      turnLeft();\n   }\n   else\n   {\n      move();\n   }\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-19T12:37:32.607Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-19T19:18:37.028Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEIyphYC6FQ",
					"submittedAt": "2025-02-19T12:37:32.611Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.149Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849356",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "form_response",
							"formsMatchInfo": {
								"requestedEmail": "341207876@gapps.yrdsb.ca",
								"questionCount": 6,
								"matchedByEmail": true,
								"responseTime": "2025-02-19T19:44:19.869Z",
								"totalFormResponses": 22,
								"formTitle": "Practice Quiz: Karel the Dog",
								"extractionMethod": "FormApp",
								"contentType": "form",
								"email": "341207876@gapps.yrdsb.ca",
								"responseId": "2_ABaOnueBJfULjTv6v0JnqykddTwC2ZyJq6XBb6VMpxzIKbbEQ3kaYHKRZQo9pG72Sg"
							},
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Q: First Name\nA: Vivian\n\nQ: Last Name\nA: Li\n\nQ: Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.\nA: public void run()\n{\n    if(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n        else\n        {\n            if(frontIsClear())\n            {\n                move();\n            }\n        }\n    \n    if(frontIsBlocked())\n    {\n        putBall();\n    }\n}\n\nQ: Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.\nA: public void run()\n{\n    if(frontIsClear())\n    {\n        move();\n    }\n    else\n    {\n        jumpHurdle();\n    }\n}\n\npublic void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    if(frontIsClear())\n    {\n        move();\n        turnRight();\n        move();\n        turnLeft();\n    }\n    else\n    { \n        turnRight();\n        move();\n        turnLeft();\n    }\n}\n\nQ: What is the main programming language that we are learning in this course?\nA: Java\n\nQ: Basic Karel can do all of the following except\nA: turnRight()",
						"structuredData": {
							"Basic Karel can do all of the following except": "turnRight()",
							"First Name": "Vivian",
							"Last Name": "Li",
							"Karel starts in the south-west corner of the world facing east. Exactly 1 ball is randomly placed on the first street anywhere except for the starting and ending spots. Have Karel pick up the ball and then move Karel to the end of the street and drop one ball. Don't define additional methods, but use appropriate control structures.": "public void run()\n{\n    if(frontIsClear())\n    {\n        move();\n        if(ballsPresent())\n        {\n            takeBall();\n        }\n        else\n        {\n            if(frontIsClear())\n            {\n                move();\n            }\n        }\n    \n    if(frontIsBlocked())\n    {\n        putBall();\n    }\n}",
							"Karel starts in the south-west corner facing east as shown in the diagram. Any number of hurdles are randomly placed anywhere on the first street. The world is exactly 8 avenues wide. Have Karel move to the end of the street, making sure to jump over hurdles along the way. Make and use 1 appropriate method.": "public void run()\n{\n    if(frontIsClear())\n    {\n        move();\n    }\n    else\n    {\n        jumpHurdle();\n    }\n}\n\npublic void jumpHurdle()\n{\n    turnLeft();\n    move();\n    turnRight();\n    if(frontIsClear())\n    {\n        move();\n        turnRight();\n        move();\n        turnLeft();\n    }\n    else\n    { \n        turnRight();\n        move();\n        turnLeft();\n    }\n}",
							"What is the main programming language that we are learning in this course?": "Java"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzU2/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "[No content available]",
					"id": "Cg4Iz_iw9dcUEIyphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-19T12:36:44.780Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-19T19:45:35.994Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:44.820Z",
					"assignmentName": "Unit 1 Quiz: Karel the Dog (Practice)",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.151Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IvfCrsQEQk6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-19T12:33:37.771Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-21T18:58:33.929Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:33:37.777Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.153Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-19T12:33:47.154Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-25T19:09:19.541Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQk6mFgLoV",
					"submittedAt": "2025-02-19T12:33:47.191Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.155Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-19T12:33:16.666Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-03-02T16:16:54.580Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQk6mFgLoV",
					"submittedAt": "2025-02-19T12:33:16.670Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.156Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-19T12:33:44.871Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-03-02T20:59:44.485Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQk6mFgLoV",
					"submittedAt": "2025-02-19T12:33:44.876Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.158Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "[No content available]",
					"id": "Cg0Ik7DJrAwQk6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-19T12:32:53.144Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-25T20:01:24.449Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:32:53.149Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.160Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-19T12:34:07.474Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-19T18:34:21.686Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Qk6mFgLoV",
					"submittedAt": "2025-02-19T12:34:07.478Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.162Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQk6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-19T12:34:03.708Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-03-04T01:44:49.865Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:34:03.713Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.164Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-19T12:35:07.714Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-27T14:04:42.956Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQk6mFgLoV",
					"submittedAt": "2025-02-19T12:35:07.718Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.166Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-19T12:35:44.922Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-03-02T16:39:18.323Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQk6mFgLoV",
					"submittedAt": "2025-02-19T12:35:44.927Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.167Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"id": "Cg0Ine-5hUQQk6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-19T12:35:47.462Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-03-01T18:33:22.837Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:35:47.468Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.169Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQk6mFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-19T12:34:14.851Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-03-01T03:50:52.664Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:34:14.855Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.172Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-19T12:33:26.699Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-26T19:30:42.194Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQk6mFgLoV",
					"submittedAt": "2025-02-19T12:33:26.705Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.174Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-19T12:34:39.648Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-19T13:26:15.402Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEJOphYC6FQ",
					"submittedAt": "2025-02-19T12:34:39.653Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.177Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "[No content available]",
					"id": "Cg4Iurzi88AOEJOphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-19T12:35:34.512Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-03-01T20:53:42.522Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:35:34.553Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.179Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"id": "Cg4IvpGn9MAOEJOphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-19T12:34:49.899Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-03-03T01:05:08.552Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:34:49.905Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.182Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Owen Kung",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"id": "Cg4I5dKR18sOEJOphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-19T12:33:52.868Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-04-28T23:35:48.519Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:33:52.993Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.184Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clifton Lin",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-19T12:34:59.319Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-03-13T16:25:05.763Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEJOphYC6FQ",
					"submittedAt": "2025-02-19T12:34:59.324Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.186Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"attachmentCount": 0,
					"id": "Cg4I7ZHxyucSEJOphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-19T12:33:22.320Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-03-03T14:33:41.378Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:33:22.359Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.188Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "[No content available]",
					"id": "Cg4Iu8ODue4SEJOphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-19T12:36:18.417Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-03-03T21:36:43.773Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:36:18.424Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.191Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Moses He",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"id": "Cg4IuZzI4aUTEJOphYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T12:32:47.781Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-03-03T22:57:33.746Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-19T12:32:47.786Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.193Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849363",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Vivian Li",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzYz/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-19T12:34:48.197Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-28T21:58:36.424Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEJOphYC6FQ",
					"submittedAt": "2025-02-19T12:34:48.202Z",
					"assignmentName": "Unit 2:  Basic Java",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.195Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "108625539120933569850",
					"score": 100,
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"draftGrade": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-o4PXuw"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-o4PXuw",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.342Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.342Z",
						"percentage": 100
					},
					"studentName": "Joe Zhuo",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-o4PXuw]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"id": "Cg0IvfCrsQEQ-6iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-14T11:37:49.314Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-14T19:13:34.407Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:19:54.788Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.342Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.342Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:37:49.318Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.197Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "102770026016844657024",
					"feedback": "",
					"score": 100,
					"draftGrade": 100,
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-8dN3qR"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-8dN3qR",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.348Z",
					"studentName": "Abithan Paskaranathan",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.348Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-8dN3qR]\n",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-14T11:38:19.875Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-18T19:19:16.053Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:18:36.883Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.348Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.348Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:38:19.881Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.200Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"draftGrade": 100,
					"score": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "Karel Maze Challenge | CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-y8cdga"
								}
							]
						},
						"text": "[Link: Karel Maze Challenge | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-y8cdga",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.977Z",
					"studentName": "Owen Lee",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.977Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-y8cdga]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-14T11:37:35.975Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-14T19:26:50.320Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:17:11.138Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.977Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.977Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0I_qLZkQsQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:37:35.980Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.202Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "114799240624991928862",
					"feedback": "",
					"draftGrade": 100,
					"score": 100,
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "Karel Maze Challenge | CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-3VYovW"
								}
							]
						},
						"images": [],
						"text": "[Link: Karel Maze Challenge | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-3VYovW",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.652Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.652Z",
						"percentage": 100
					},
					"studentName": "Kian Mistry",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-3VYovW]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"attachmentCount": 1,
					"id": "Cg0IwJXv6QsQ-6iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-14T11:38:22.238Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-18T19:31:33.890Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:18:06.307Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.652Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.652Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:38:22.246Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.203Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"score": 90,
					"draftGrade": 90,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "Karel Maze Challenge Java | CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-java-DaOhr0"
								}
							]
						},
						"text": "[Link: Karel Maze Challenge Java | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-java-DaOhr0",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.658Z",
					"studentName": "Kelton Kuan",
					"grade": {
						"feedback": "",
						"score": 90,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.658Z",
						"percentage": 90
					},
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-java-DaOhr0]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-14T11:37:13.389Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-14T19:17:04.831Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:16:25.868Z",
								"pointsEarned": 90,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.658Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.658Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 90,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:37:13.395Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.207Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"score": 100,
					"draftGrade": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "Karel Maze Challenge | CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-GdhUpL"
								}
							]
						},
						"text": "[Link: Karel Maze Challenge | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-GdhUpL",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.351Z",
					"studentName": "Jiayu Chen",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.351Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-GdhUpL]\n",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-14T11:39:02.915Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-18T19:04:04.901Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:13:41.310Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.351Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.351Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q-6iFgLoV",
					"submittedAt": "2025-02-14T11:39:02.953Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.209Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "106643648486889104973",
					"draftGrade": 100,
					"score": 100,
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-n1G4Kj"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-n1G4Kj",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:51.053Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:51.053Z",
						"percentage": 100
					},
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-n1G4Kj]\n",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-14T11:38:08.436Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-19T01:41:57.610Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:18:43.838Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:51.053Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:51.053Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:38:08.442Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.211Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "107676755417854538820",
					"draftGrade": 100,
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"score": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-hm3dcE"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-hm3dcE",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.726Z",
					"studentName": "Nathan Ji",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.726Z",
						"percentage": 100
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-hm3dcE]\n",
					"id": "Cg0Io-SHlhwQ-6iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-14T11:39:22.859Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-19T18:58:07.717Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:15:48.675Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.726Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.726Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:39:22.866Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.213Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"score": 100,
					"draftGrade": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-rwv3AE"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-rwv3AE",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.353Z",
					"studentName": "Clark Chen",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.353Z",
						"percentage": 100
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-rwv3AE]\n",
					"id": "Cg0Ik_u42h8Q-6iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-14T11:39:24.118Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-19T17:55:14.724Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:13:25.241Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.353Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.353Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:39:24.126Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.215Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "115626057019275215839",
					"feedback": "",
					"draftGrade": 100,
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"score": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "Karel Maze Challenge | CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-pzbDio"
								}
							]
						},
						"text": "[Link: Karel Maze Challenge | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-pzbDio",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.361Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.361Z",
						"percentage": 100
					},
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-pzbDio]\n",
					"attachmentCount": 1,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-14T11:39:27.246Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-19T23:34:10.330Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:19:29.142Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.361Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.361Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:39:27.253Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.219Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "106702075817947945830",
					"score": 100,
					"draftGrade": 100,
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-tTQE2C"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-tTQE2C",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.669Z",
					"studentName": "Leo So",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.669Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-tTQE2C]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-14T11:37:23.233Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-19T19:45:12.515Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:19:17.632Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.669Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.669Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:37:23.239Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.221Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "115009994018138969054",
					"feedback": "",
					"score": 100,
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"draftGrade": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-viQu13"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-viQu13",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.678Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.678Z",
						"percentage": 100
					},
					"studentName": "Mark Ku",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-viQu13]\n",
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-14T11:40:00.358Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-16T17:36:26.060Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-18T18:39:38.670Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-18T18:46:29.680Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:16:06.253Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.678Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.678Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg0Ine-5hUQQ-6iFgLoV",
					"submittedAt": "2025-02-14T11:40:00.364Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.223Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "105982258071886610739",
					"score": 100,
					"draftGrade": 100,
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-dItBXc"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-dItBXc",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.361Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.361Z",
						"percentage": 100
					},
					"studentName": "Carmen Cheung",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-dItBXc]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 1,
					"id": "Cg0I0ruNqlsQ-6iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-14T11:39:43.299Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-18T19:13:04.832Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:13:56.766Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.361Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.361Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:39:43.305Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.225Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "101472071522836988061",
					"feedback": "",
					"score": 100,
					"draftGrade": 100,
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-fjHw6L"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-fjHw6L",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:51.012Z",
					"studentName": "Sena Godek",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:51.012Z",
						"percentage": 100
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-fjHw6L]\n",
					"attachmentCount": 1,
					"id": "Cg0IvNTT8mcQ-6iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-14T11:37:42.940Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-18T18:57:02.078Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:14:37.496Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:51.012Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:51.012Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:37:42.967Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.228Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"draftGrade": 100,
					"score": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-W1XEtQ"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-W1XEtQ",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:51.031Z",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:51.031Z",
						"percentage": 100
					},
					"studentName": "Saiful Shaik",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-W1XEtQ]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-14T11:40:06.811Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-18T19:04:58.209Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:19:04.307Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:51.031Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:51.031Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEPuohYC6FQ",
					"submittedAt": "2025-02-14T11:40:06.851Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.230Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"score": 100,
					"draftGrade": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "Karel Maze Challenge | CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-ZxVEeS"
								}
							]
						},
						"images": [],
						"text": "[Link: Karel Maze Challenge | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-ZxVEeS",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.645Z",
					"studentName": "John Ning",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.645Z",
						"percentage": 100
					},
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-ZxVEeS]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 1,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-14T11:37:28.815Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-18T19:25:58.351Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:18:16.498Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.645Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.645Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4I05uw78AOEPuohYC6FQ",
					"submittedAt": "2025-02-14T11:37:28.821Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.233Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "117262722973198948166",
					"feedback": "",
					"draftGrade": 90,
					"score": 90,
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 2,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-WNI3DA"
								},
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-optional-challenge-UD3hiH"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-WNI3DA\n\n[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-optional-challenge-UD3hiH",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.966Z",
					"studentName": "Nereyal Jeyakumar",
					"grade": {
						"feedback": "",
						"score": 90,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.966Z",
						"percentage": 90
					},
					"attachmentCount": 2,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-WNI3DA]\n[Link: https://codehs.com/sandbox/id/karel-maze-optional-challenge-UD3hiH]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"id": "Cg4Iurzi88AOEPuohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-14T11:39:50.216Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-18T19:31:58.252Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:15:34.814Z",
								"pointsEarned": 90,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.966Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.966Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 90,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:39:50.221Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.236Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "101721674440588752421",
					"score": 100,
					"draftGrade": 100,
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-5kjQyb"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-5kjQyb",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.353Z",
					"studentName": "Cayden Chiu",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.353Z",
						"percentage": 100
					},
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-5kjQyb]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 1,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-14T11:39:11.981Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-19T18:42:03.406Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:14:05.646Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.353Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.353Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4IvpGn9MAOEPuohYC6FQ",
					"submittedAt": "2025-02-14T11:39:11.988Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.239Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"score": 100,
					"draftGrade": 100,
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "Karel Maze Challenge | CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-JQY5qv"
								}
							]
						},
						"text": "[Link: Karel Maze Challenge | CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-JQY5qv",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.983Z",
					"studentName": "Owen Kung",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.983Z",
						"percentage": 100
					},
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-JQY5qv]\n",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-14T11:38:55.507Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-19T19:29:02.113Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:16:47.643Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 100,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.982Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.983Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4I5dKR18sOEPuohYC6FQ",
					"submittedAt": "2025-02-14T11:38:55.512Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.241Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "102099373101721031728",
					"feedback": "",
					"draftGrade": 90,
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"score": 90,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-1bSkEw"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-1bSkEw",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.362Z",
					"grade": {
						"feedback": "",
						"score": 90,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.362Z",
						"percentage": 90
					},
					"studentName": "Clifton Lin",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-1bSkEw]\n",
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"id": "Cg4I55juyqAPEPuohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-14T11:38:38.048Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-18T19:04:06.663Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:17:31.975Z",
								"pointsEarned": 90,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.362Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.362Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 90,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:38:38.084Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.244Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "109110963825415956180",
					"feedback": "",
					"draftGrade": 100,
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"score": 100,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/karel-maze-challenge-Sp4SWH"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karel-maze-challenge-Sp4SWH",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.362Z",
					"studentName": "Jennifer Zheng",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.362Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karel-maze-challenge-Sp4SWH]\n",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-14T11:37:47.649Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-19T04:18:25.848Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-19T04:18:31.728Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-19T18:38:31.169Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:19:44.896Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.362Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.362Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEPuohYC6FQ",
					"submittedAt": "2025-02-14T11:37:47.687Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.247Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"score": 90,
					"draftGrade": 90,
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "Super maze | CodeHS",
									"url": "https://codehs.com/sandbox/id/super-maze-pWG43f"
								}
							]
						},
						"images": [],
						"text": "[Link: Super maze | CodeHS] https://codehs.com/sandbox/id/super-maze-pWG43f",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.676Z",
					"studentName": "Lionson Meng",
					"grade": {
						"feedback": "",
						"score": 90,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.676Z",
						"percentage": 90
					},
					"studentWork": "[Link: https://codehs.com/sandbox/id/super-maze-pWG43f]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 1,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-14T11:40:19.413Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-18T19:48:29.146Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:17:48.708Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 90,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.676Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.676Z",
								"pointsEarned": 90,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEPuohYC6FQ",
					"submittedAt": "2025-02-14T11:40:19.418Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.249Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "111100032418663696789",
					"score": 60,
					"draftGrade": 60,
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/new-sandbox-program-yHskqR"
								}
							]
						},
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/new-sandbox-program-yHskqR",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:50.736Z",
					"grade": {
						"feedback": "",
						"score": 60,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:50.736Z",
						"percentage": 60
					},
					"studentName": "Moses He",
					"studentWork": "[Link: https://codehs.com/sandbox/id/new-sandbox-program-yHskqR]\n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"attachmentCount": 1,
					"id": "Cg4IuZzI4aUTEPuohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-14T11:37:07.086Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T19:08:24.930Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T19:09:10.136Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-19T19:09:29.347Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:14:57.107Z",
								"pointsEarned": 60,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:50.736Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:50.736Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 60,
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:37:07.093Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.252Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "102479132795602540628",
					"draftGrade": 100,
					"score": 100,
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"type": "link",
									"title": "CodeHS",
									"url": "https://codehs.com/sandbox/id/karrel-maze-XcpaQn"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/karrel-maze-XcpaQn",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-26T13:11:51.054Z",
					"studentName": "Steven Wang",
					"grade": {
						"feedback": "",
						"score": 100,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-26T13:11:51.054Z",
						"percentage": 100
					},
					"attachmentCount": 1,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "[Link: https://codehs.com/sandbox/id/karrel-maze-XcpaQn]\n",
					"id": "Cg4Ik8mXwcMUEPuohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-14T11:40:08.033Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-20T03:22:30.323Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:19:36.978Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:51.054Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:51.054Z",
								"pointsEarned": 100,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						}
					],
					"submittedAt": "2025-02-14T11:40:08.039Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "graded"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849339",
					"feedback": "",
					"studentId": "103612229036956651130",
					"draftGrade": 90,
					"score": 90,
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "assignment",
							"totalAttachments": 1,
							"attachmentTypes": [
								{
									"title": "CodeHS",
									"type": "link",
									"url": "https://codehs.com/sandbox/id/5x5-maze-4u49hU"
								}
							]
						},
						"images": [],
						"text": "[Link: CodeHS] https://codehs.com/sandbox/id/5x5-maze-4u49hU",
						"structuredData": {}
					},
					"late": false,
					"gradedAt": "2025-02-28T22:20:41.624Z",
					"grade": {
						"feedback": "",
						"score": 90,
						"gradedBy": "teacher",
						"maxScore": 100,
						"gradedAt": "2025-02-28T22:20:41.624Z",
						"percentage": 90
					},
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzM5/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"attachmentCount": 1,
					"studentWork": "[Link: https://codehs.com/sandbox/id/5x5-maze-4u49hU]\n",
					"id": "Cg4Iz_iw9dcUEPuohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-14T11:38:28.280Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-19T19:21:08.263Z",
								"state": "TURNED_IN"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:17:20.327Z",
								"pointsEarned": 40,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-20T16:17:21.699Z",
								"actorUserId": "112484954830087908606",
								"pointsEarned": 90,
								"maxPoints": 100,
								"gradeChangeType": "DRAFT_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "112484954830087908606",
								"stateTimestamp": "2025-02-26T13:11:51.049Z",
								"state": "RETURNED"
							}
						},
						{
							"gradeHistory": {
								"gradeTimestamp": "2025-02-26T13:11:51.050Z",
								"pointsEarned": 90,
								"actorUserId": "112484954830087908606",
								"maxPoints": 100,
								"gradeChangeType": "ASSIGNED_GRADE_POINTS_EARNED_CHANGE"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-28T22:20:41.624Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-14T11:38:28.285Z",
					"assignmentName": "Karel Maze Challenge",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"id": "Cg0IvfCrsQEQ0fiXtLwV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-13T12:32:57.950Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-13T23:04:50.752Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:32:57.976Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"id": "Cg0Isq_W0gkQ0fiXtLwV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-13T12:33:23.073Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-13T12:41:35.936Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:33:23.077Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"studentWork": "Selected: Yes",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"id": "Cg0I_qLZkQsQ0fiXtLwV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-13T12:32:46.506Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-13T14:45:25.075Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:32:46.511Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"studentWork": "Selected: Maybe",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"id": "Cg0IwJXv6QsQ0fiXtLwV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-13T12:33:18.111Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-13T20:40:31.449Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:33:18.148Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "101103182210295183966",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"studentWork": "Selected: Maybe",
					"id": "Cg0Ik7DJrAwQ0fiXtLwV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-13T12:32:24.753Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-13T20:42:41.038Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:32:24.776Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "Selected: Yes",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-13T12:33:29.967Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-13T14:55:09.269Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q0fiXtLwV",
					"submittedAt": "2025-02-13T12:33:29.995Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "Selected: Yes",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-13T12:33:45.454Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-14T18:39:06.432Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ0fiXtLwV",
					"submittedAt": "2025-02-13T12:33:45.491Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-13T12:36:19.390Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-14T10:55:58.250Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ0fiXtLwV",
					"submittedAt": "2025-02-13T12:36:19.424Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-13T12:34:07.986Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-15T02:54:34.577Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8Q0fiXtLwV",
					"submittedAt": "2025-02-13T12:34:08.012Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-13T12:35:25.263Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-13T17:50:32.748Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ0fiXtLwV",
					"submittedAt": "2025-02-13T12:35:25.267Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "Selected: Maybe",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-13T12:32:28.872Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-14T16:47:05.276Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ0fiXtLwV",
					"submittedAt": "2025-02-13T12:32:28.878Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"studentWork": "Selected: Maybe",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-13T12:34:57.394Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-14T13:40:43.282Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQ0fiXtLwV",
					"submittedAt": "2025-02-13T12:34:57.399Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"studentWork": "Selected: Maybe",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"id": "Cg0I0ruNqlsQ0fiXtLwV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-13T12:33:57.624Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-14T03:25:19.869Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:33:57.630Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "101472071522836988061",
					"feedback": "",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-13T12:32:38.620Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-14T18:10:44.118Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ0fiXtLwV",
					"submittedAt": "2025-02-13T12:32:38.645Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "Selected: Yes",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-13T12:35:16.154Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-13T13:42:36.446Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OENH4l7S8FQ",
					"submittedAt": "2025-02-13T12:35:16.158Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": true,
					"studentName": "John Ning",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-13T12:32:32.368Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-19T14:21:08.014Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOENH4l7S8FQ",
					"submittedAt": "2025-02-13T12:32:32.396Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"studentWork": "Selected: Yes",
					"attachmentCount": 0,
					"id": "Cg4Iurzi88AOENH4l7S8FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-13T12:34:43.848Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-13T18:21:35.204Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:34:43.880Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"attachmentCount": 0,
					"studentWork": "Selected: Yes",
					"id": "Cg4IvpGn9MAOENH4l7S8FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-13T12:33:42.169Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-13T13:58:19.618Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:33:42.202Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "107302250831066714187",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": true,
					"studentName": "Owen Kung",
					"studentWork": "Selected: Maybe",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-13T12:33:49.858Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-18T18:17:54.626Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOENH4l7S8FQ",
					"submittedAt": "2025-02-13T12:33:49.893Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Yes",
						"structuredData": {
							"selectedAnswer": "Yes"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"studentWork": "Selected: Yes",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-13T12:33:44.003Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-13T15:25:20.072Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPENH4l7S8FQ",
					"submittedAt": "2025-02-13T12:33:44.025Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "Selected: Maybe",
					"id": "Cg4I7ZHxyucSENH4l7S8FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-13T12:33:20.520Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-14T16:42:25.926Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:33:20.668Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.254Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Maybe",
						"structuredData": {
							"selectedAnswer": "Maybe"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"attachmentCount": 0,
					"studentWork": "Selected: Maybe",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-13T12:35:20.080Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-14T01:47:36.321Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SENH4l7S8FQ",
					"submittedAt": "2025-02-13T12:35:20.085Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.255Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737770077265",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: No",
						"structuredData": {
							"selectedAnswer": "No"
						}
					},
					"late": true,
					"studentName": "Moses He",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3NzcwMDc3MjY1/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "Selected: No",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTENH4l7S8FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-13T12:32:17.499Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-26T16:49:57.075Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-13T12:32:17.531Z",
					"assignmentName": "Do you want to learn to create animations?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.257Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "108625539120933569850",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"id": "Cg0IvfCrsQEQ56iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-04T13:02:06.069Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-06T22:25:14.944Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:02:06.104Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.259Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-04T13:02:27.695Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-10T19:40:40.603Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ56iFgLoV",
					"submittedAt": "2025-02-04T13:02:27.730Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.261Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-04T13:01:46.517Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-12T18:39:09.114Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQ56iFgLoV",
					"submittedAt": "2025-02-04T13:01:46.548Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.264Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg0IwJXv6QsQ56iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-04T13:02:35.251Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-14T18:44:36.902Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:02:35.256Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.266Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-04T13:01:21.048Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-06T19:28:28.986Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik7DJrAwQ56iFgLoV",
					"submittedAt": "2025-02-04T13:01:21.083Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.269Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"id": "Cg0I5qyc4Q4Q56iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-04T13:02:51.800Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-12T22:44:47.016Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:02:51.805Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.272Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-04T13:02:23.636Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-14T20:46:01.588Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IhKbr2BYQ56iFgLoV",
					"submittedAt": "2025-02-04T13:02:23.670Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.274Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"studentWork": "[No content available]",
					"id": "Cg0Io-SHlhwQ56iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-04T13:04:18.854Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-10T17:05:31.956Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:04:18.885Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.277Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "101394730938804923153",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Clark Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-04T13:03:22.585Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-18T17:22:02.411Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8Q56iFgLoV",
					"submittedAt": "2025-02-04T13:03:22.620Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.279Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "115626057019275215839",
					"feedback": "",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-04T13:03:45.626Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-16T17:21:43.032Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ56iFgLoV",
					"submittedAt": "2025-02-04T13:03:45.631Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.282Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-04T13:01:25.323Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-17T01:47:34.753Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ56iFgLoV",
					"submittedAt": "2025-02-04T13:01:25.361Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.284Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "115009994018138969054",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "[No content available]",
					"id": "Cg0Ine-5hUQQ56iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-04T13:03:57.246Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-12T18:37:04.665Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:03:57.251Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.287Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"studentWork": "[No content available]",
					"id": "Cg0I0ruNqlsQ56iFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-04T13:03:21.189Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-07T19:03:49.218Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-07T19:03:58.227Z",
								"state": "RECLAIMED_BY_STUDENT"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-15T20:52:29.921Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:03:21.194Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.290Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-04T13:01:42.864Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-12T19:42:43.110Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ56iFgLoV",
					"submittedAt": "2025-02-04T13:01:42.917Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.293Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "107600481194027020763",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-04T13:03:02.148Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-11T18:40:58.049Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:03:02.154Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.297Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "104593047842018851679",
					"feedback": "",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "John Ning",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-04T13:01:35.336Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-19T14:20:40.140Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I05uw78AOEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:01:35.367Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.299Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-04T13:02:58.218Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-12T04:56:54.262Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iurzi88AOEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:02:58.266Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.302Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Cayden Chiu",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "[No content available]",
					"id": "Cg4IvpGn9MAOEOeohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-04T13:03:30.146Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-18T05:02:22.587Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:03:30.183Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.305Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Owen Kung",
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-04T13:02:11.006Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-19T19:01:45.059Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I5dKR18sOEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:02:11.011Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.307Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-04T13:03:26.782Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-13T15:25:38.125Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:03:26.820Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.309Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-04T13:02:04.464Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-12T04:26:20.872Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:02:04.498Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.314Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"studentId": "115055209797540041904",
					"feedback": "",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"id": "Cg4Iu8ODue4SEOeohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-04T13:04:15.085Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-12T18:39:35.529Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:04:15.090Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.316Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "111100032418663696789",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Moses He",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "[No content available]",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTEOeohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-04T18:53:50.028Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-18T17:29:44.605Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T18:53:50.195Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.319Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"images": [],
						"text": "",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Steven Wang",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-04T13:03:29.938Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-18T03:36:07.782Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:03:29.972Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.321Z",
						"processingErrors": [],
						"readyForGrading": false,
						"contentExtracted": false
					},
					"maxScore": 100,
					"assignmentId": "737123849319",
					"feedback": "",
					"studentId": "103612229036956651130",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"attachmentTypes": [],
							"totalAttachments": 0
						},
						"text": "",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/a/NzM3MTIzODQ5MzE5/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"attachmentCount": 0,
					"studentWork": "[No content available]",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-04T13:03:02.593Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-19T19:21:38.404Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEOeohYC6FQ",
					"submittedAt": "2025-02-04T13:03:02.599Z",
					"assignmentName": "Unit 1:  Introduction to Programming with Karel the Dog",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.321Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. Robotics and playing badminton 2. To expand my programming skills and learn how to make a game 3. high 90s and new concepts that will make my coding more efficient 4. Nope",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "1. Robotics and playing badminton 2. To expand my programming skills and learn how to make a game 3. high 90s and new concepts that will make my coding more efficient 4. Nope",
					"attachmentCount": 0,
					"id": "Cg0IvfCrsQEQ4aiFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-04T13:01:06.448Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-04T22:21:13.745Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:01:06.487Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "102770026016844657024",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1) Drawing from time-to-time, playing videogames, and coding sometimes\n2) I want to expand my coding knowledge and maybe go into it after high school\n3) Be able to code well in Java and have at least a 90 in the course\n4)N/A",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "1) Drawing from time-to-time, playing videogames, and coding sometimes\n2) I want to expand my coding knowledge and maybe go into it after high school\n3) Be able to code well in Java and have at least a 90 in the course\n4)N/A",
					"id": "Cg0Isq_W0gkQ4aiFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-04T13:00:59.575Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-04T18:50:06.926Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:00:59.610Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "107243305699666934434",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. Sports, working out, video games\n2. To more advanced topics on computer science\n3. I want to learn more data structures and algorithms, I want to get a 100 in this course\n4. none",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"studentWork": "1. Sports, working out, video games\n2. To more advanced topics on computer science\n3. I want to learn more data structures and algorithms, I want to get a 100 in this course\n4. none",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-04T13:00:53.151Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-04T22:53:22.303Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I_qLZkQsQ4aiFgLoV",
					"submittedAt": "2025-02-04T13:00:53.181Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "114799240624991928862",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. Outside of school i love to take photos and look at nice/cool cars\n2. I wanted to expand and try out everything before i decided what i want to apply to \n3. I hope to achieve a relatively high grade 90+\n4. I just hope to have fun",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"attachmentCount": 0,
					"studentWork": "1. Outside of school i love to take photos and look at nice/cool cars\n2. I wanted to expand and try out everything before i decided what i want to apply to \n3. I hope to achieve a relatively high grade 90+\n4. I just hope to have fun",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-04T13:01:23.541Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-05T05:25:51.024Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IwJXv6QsQ4aiFgLoV",
					"submittedAt": "2025-02-04T13:01:23.547Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. I like playing music when I am outside of school.\n2. I want to take computer science because I like making games. Being able to decide what does what is very entertaining.\n3. I hope to able to program very complicated snippets of code. I hope to achieve a grade that is around 95%.\n4. I take a while to decide on a choices I have to make. It could be choosing what type of game to make.",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "1. I like playing music when I am outside of school.\n2. I want to take computer science because I like making games. Being able to decide what does what is very entertaining.\n3. I hope to able to program very complicated snippets of code. I hope to achieve a grade that is around 95%.\n4. I take a while to decide on a choices I have to make. It could be choosing what type of game to make.",
					"id": "Cg0Ik7DJrAwQ4aiFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-04T13:00:18.924Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-05T01:31:12.112Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:00:18.961Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "101614213510204563567",
					"feedback": "",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. I like to draw!\n2. I want to learn to make video games.\n3. I hope to learn the fundamentals that can expand to other languages, and I wish to achieve a 100.\n4. Sure, I have a dog!",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"attachmentCount": 0,
					"studentWork": "1. I like to draw!\n2. I want to learn to make video games.\n3. I hope to learn the fundamentals that can expand to other languages, and I wish to achieve a 100.\n4. Sure, I have a dog!",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-04T13:01:26.674Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-04T19:42:27.210Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I5qyc4Q4Q4aiFgLoV",
					"submittedAt": "2025-02-04T13:01:26.712Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "106643648486889104973",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. Outside of school I play hockey and work on cars \n2. For university \n3. 90's and be capable of finding solutions independently \n4. No not really",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"studentWork": "1. Outside of school I play hockey and work on cars \n2. For university \n3. 90's and be capable of finding solutions independently \n4. No not really",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQ4aiFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-04T13:01:11.089Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-05T19:36:13.693Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-05T19:36:26.446Z",
								"state": "TURNED_IN"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-05T19:36:33.705Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:01:11.123Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "107676755417854538820",
					"feedback": "",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Outside of school i enjoy working out, and playing games. I took computer science for fun, since my friend Andrew in grade 12 really enjoyed it. I hope to get 90s in this course even though I am new to computer science",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"attachmentCount": 0,
					"studentWork": "Outside of school i enjoy working out, and playing games. I took computer science for fun, since my friend Andrew in grade 12 really enjoyed it. I hope to get 90s in this course even though I am new to computer science",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-04T13:04:33.487Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-04T15:37:37.500Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ4aiFgLoV",
					"submittedAt": "2025-02-04T13:04:33.517Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. I like to play and watch sports, as well as playing video games\n2. I want to take computer science because I think that being able to code is an important skill and asset for the future. I may also consider taking a pathway that is related to the technological world.\n3. I hope to be able to be somewhat competent in coding, and ideally I would like to end with a grade above a 95.\n4. No.",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "1. I like to play and watch sports, as well as playing video games\n2. I want to take computer science because I think that being able to code is an important skill and asset for the future. I may also consider taking a pathway that is related to the technological world.\n3. I hope to be able to be somewhat competent in coding, and ideally I would like to end with a grade above a 95.\n4. No.",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-04T13:02:43.181Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-04T19:11:58.891Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0I7-PGhEAQ4aiFgLoV",
					"submittedAt": "2025-02-04T13:02:43.186Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "106702075817947945830",
					"feedback": "",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. Outside of school, I like to play basketball and work out.\n2. I want to take computer science to open up new pathways and career oppurtunities. It can also be fun!\n3. I want to achieve confidence in my coding ability and at least a grade of 90% in this couurse.\n4. N/A",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Leo So",
					"attachmentCount": 0,
					"studentWork": "1. Outside of school, I like to play basketball and work out.\n2. I want to take computer science to open up new pathways and career oppurtunities. It can also be fun!\n3. I want to achieve confidence in my coding ability and at least a grade of 90% in this couurse.\n4. N/A",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-04T13:00:25.925Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-04T19:02:18.087Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ4aiFgLoV",
					"submittedAt": "2025-02-04T13:00:25.956Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. I like watching and playing sports outside of school\n2. I want to explore different career paths and see if I'm interested in them. \n3.  Hopefully I get around 90s in this course even though I didn't take computer science in grade 10. \n",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Mark Ku",
					"studentWork": "1. I like watching and playing sports outside of school\n2. I want to explore different career paths and see if I'm interested in them. \n3.  Hopefully I get around 90s in this course even though I didn't take computer science in grade 10. \n",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"attachmentCount": 0,
					"id": "Cg0Ine-5hUQQ4aiFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-04T13:02:36.510Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-04T18:40:25.112Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:02:36.514Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "105982258071886610739",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. I enjoy playing my guitar and listening to music during my free time. \n2. I take the computer science course as I am passionate in coding and wanting to learn a new programming language. \n3. I hope to achieve 95% and higher in this course in term of grade and being able to do know a new programming language. \n4. I am exciting to learning more about coding in this course. ",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"attachmentCount": 0,
					"studentWork": "1. I enjoy playing my guitar and listening to music during my free time. \n2. I take the computer science course as I am passionate in coding and wanting to learn a new programming language. \n3. I hope to achieve 95% and higher in this course in term of grade and being able to do know a new programming language. \n4. I am exciting to learning more about coding in this course. ",
					"id": "Cg0I0ruNqlsQ4aiFgLoV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-04T13:02:45.756Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-04T18:44:16.859Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:02:45.791Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. I like to read and explore new hobbies. For example, drawing or playing chess. \n2. I want to learn new coding languages and learn more about technology. I hope to study comp sci in university. Coding is fun. \n3.  I plan to get 95% or above and learn more about Java. I \n4.  I like doing much extra practice in class. Especially mock tests ",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Sena Godek",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "1. I like to read and explore new hobbies. For example, drawing or playing chess. \n2. I want to learn new coding languages and learn more about technology. I hope to study comp sci in university. Coding is fun. \n3.  I plan to get 95% or above and learn more about Java. I \n4.  I like doing much extra practice in class. Especially mock tests ",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-04T13:00:46.563Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-04T18:43:41.100Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ4aiFgLoV",
					"submittedAt": "2025-02-04T13:00:46.568Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1) I like to code and play basketball.\n2) I want to take it to develop my coding skills.\n3) I want to learn to learn to create high levelled games \n4) Im also interested in the business field.",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "1) I like to code and play basketball.\n2) I want to take it to develop my coding skills.\n3) I want to learn to learn to create high levelled games \n4) Im also interested in the business field.",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-04T13:02:41.949Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-04T15:56:19.962Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iwe6fnb8OEOGohYC6FQ",
					"submittedAt": "2025-02-04T13:02:41.988Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "I like to play badminton, I want to learn how to code games, i want to get 95+",
						"structuredData": {}
					},
					"late": false,
					"studentName": "John Ning",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"studentWork": "I like to play badminton, I want to learn how to code games, i want to get 95+",
					"id": "Cg4I05uw78AOEOGohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-04T13:00:31.568Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-04T21:08:08.650Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:00:31.576Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "117262722973198948166",
					"feedback": "",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. I like to read and listen to music.\n2. I already have experience in coding, but I want to learn Java and see if this is a realistic career choice for me in any way\n3. I Hope to explore projects different than the ones I’ve tried, gain skills that can help me in the long run with coding in general, and get a high grade (I had a 98 last year so let’s see how this goes)\n4. Excited to learn and create!",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"studentWork": "1. I like to read and listen to music.\n2. I already have experience in coding, but I want to learn Java and see if this is a realistic career choice for me in any way\n3. I Hope to explore projects different than the ones I’ve tried, gain skills that can help me in the long run with coding in general, and get a high grade (I had a 98 last year so let’s see how this goes)\n4. Excited to learn and create!",
					"id": "Cg4Iurzi88AOEOGohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-04T13:02:34.925Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-04T18:42:40.089Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:02:34.930Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "101721674440588752421",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. I like to play piano and go out with friends. \n2. I want to learn more about coding and am hoping to get into the field post secondary. \n3. I hope to understand how to code better as well as learn new problem solving skills. I hope to end this class with high 90s.\n4. No ",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"studentWork": "1. I like to play piano and go out with friends. \n2. I want to learn more about coding and am hoping to get into the field post secondary. \n3. I hope to understand how to code better as well as learn new problem solving skills. I hope to end this class with high 90s.\n4. No ",
					"attachmentCount": 0,
					"id": "Cg4IvpGn9MAOEOGohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-04T13:01:34.437Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-04T19:20:41.550Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:01:34.472Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "102099373101721031728",
					"feedback": "",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. I like to play games and watch videos (long and short) outside of school.\n2. I want to take computer science because I am interested in coding, and some of the departments in university requires this course. \n3. I hope to achieve at least 75-80% in this course, and learn how to make games myself. \n4. I have colour weakness, and can't tell the difference between similar colours, such as blue and purple. ",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "1. I like to play games and watch videos (long and short) outside of school.\n2. I want to take computer science because I am interested in coding, and some of the departments in university requires this course. \n3. I hope to achieve at least 75-80% in this course, and learn how to make games myself. \n4. I have colour weakness, and can't tell the difference between similar colours, such as blue and purple. ",
					"attachmentCount": 0,
					"id": "Cg4I55juyqAPEOGohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-04T13:01:23.877Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-04T20:43:20.222Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:01:23.882Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "109110963825415956180",
					"feedback": "",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1. I like making handcrafts and travelling\n2. I am curious about computer programming and other things about computer\n3. I want to learn how to program a simple game for myself\n4. N/A",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "1. I like making handcrafts and travelling\n2. I am curious about computer programming and other things about computer\n3. I want to learn how to program a simple game for myself\n4. N/A",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-04T13:01:10.373Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-04T18:45:00.723Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I7ZHxyucSEOGohYC6FQ",
					"submittedAt": "2025-02-04T13:01:10.404Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1.Music (also at school)\n2. try a new subject, and challenge myself\n3. that's my first time learn the course about computer so i won't set to high, i think 80 is fine for me, but i will try my best.\n4. I'm really enjoy this course!",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "1.Music (also at school)\n2. try a new subject, and challenge myself\n3. that's my first time learn the course about computer so i won't set to high, i think 80 is fine for me, but i will try my best.\n4. I'm really enjoy this course!",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-04T13:03:30.832Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-05T14:59:59.954Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iu8ODue4SEOGohYC6FQ",
					"submittedAt": "2025-02-04T13:03:30.866Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "111100032418663696789",
					"feedback": "",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "1,badminton. 2,Useful. 3,understand the function and be able to use coding .",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Moses He",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "1,badminton. 2,Useful. 3,understand the function and be able to use coding .",
					"attachmentCount": 0,
					"id": "Cg4IuZzI4aUTEOGohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-04T18:53:04.492Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-04T18:53:46.179Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T18:53:04.523Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "102479132795602540628",
					"feedback": "",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. What do you like doing outside of school?\n\nI usually like to go outside and hang out with my friends afterschool or I sometimes just play video games with them afterschool. \n\n2. Why do you want to take computer science?\n\nI want to take computer science because I was always curious on how video games worked. And by taking computer science I feel like it brigs out my creativity.  \n\n3. What do you hope to achieve in this course in terms of learning and grade?\n\nI hope to achieve around an 85% in this course. ",
						"structuredData": {}
					},
					"late": true,
					"studentName": "Steven Wang",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "1. What do you like doing outside of school?\n\nI usually like to go outside and hang out with my friends afterschool or I sometimes just play video games with them afterschool. \n\n2. Why do you want to take computer science?\n\nI want to take computer science because I was always curious on how video games worked. And by taking computer science I feel like it brigs out my creativity.  \n\n3. What do you hope to achieve in this course in terms of learning and grade?\n\nI hope to achieve around an 85% in this course. ",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-04T13:03:08.015Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-08T01:19:13.954Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEOGohYC6FQ",
					"submittedAt": "2025-02-04T13:03:08.020Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737123849313",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "short_answer",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "1. playing volleyball, going to the gym, eating at restaurants, hanging out with friends. \n2. to learn new skills, expand career paths. \n3. i want to be successful in terms of punctuality and quality of work. looking to have high grades in this class. ",
						"structuredData": {}
					},
					"late": false,
					"studentName": "Vivian Li",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/sa/NzM3MTIzODQ5MzEz/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "1. playing volleyball, going to the gym, eating at restaurants, hanging out with friends. \n2. to learn new skills, expand career paths. \n3. i want to be successful in terms of punctuality and quality of work. looking to have high grades in this class. ",
					"id": "Cg4Iz_iw9dcUEOGohYC6FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-04T13:01:56.847Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-05T18:38:24.356Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T13:01:56.853Z",
					"assignmentName": "All about you",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "108625539120933569850",
					"feedback": "",
					"studentEmail": "349168732@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Joe Zhuo",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MzcxOTE0ODEz",
					"studentWork": "Selected: iPhone",
					"id": "Cg0IvfCrsQEQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-03T19:02:50.419Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "108625539120933569850",
								"stateTimestamp": "2025-02-03T19:02:54.647Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:50.423Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "102770026016844657024",
					"feedback": "",
					"studentEmail": "348582230@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Abithan Paskaranathan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MjU4OTMwMDY1OFpa",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-03T19:02:30.061Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102770026016844657024",
								"stateTimestamp": "2025-02-03T19:02:35.172Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Isq_W0gkQ4NWG_7kV",
					"submittedAt": "2025-02-03T19:02:30.066Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "107243305699666934434",
					"feedback": "",
					"studentEmail": "348590274@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Owen Lee",
					"attachmentCount": 0,
					"studentWork": "Selected: iPhone",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/Mjk4OTkwNDI1NFpa",
					"id": "Cg0I_qLZkQsQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-03T19:02:48.503Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107243305699666934434",
								"stateTimestamp": "2025-02-03T19:02:54.047Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:48.506Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "114799240624991928862",
					"feedback": "",
					"studentEmail": "348586678@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Kian Mistry",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MzE3NDgxMjM1Mlpa",
					"studentWork": "Selected: iPhone",
					"id": "Cg0IwJXv6QsQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-03T19:02:21.189Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "114799240624991928862",
								"stateTimestamp": "2025-02-03T19:02:26.604Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:21.192Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "101103182210295183966",
					"feedback": "",
					"studentEmail": "349064972@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Kelton Kuan",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MzMxNDcwMjM1NVpa",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"id": "Cg0Ik7DJrAwQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-03T19:07:39.101Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101103182210295183966",
								"stateTimestamp": "2025-02-04T02:42:35.108Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:07:39.105Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "101614213510204563567",
					"studentEmail": "348615568@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Jiayu Chen",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/Mzk2MTk4NDYxNFpa",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"id": "Cg0I5qyc4Q4Q4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-03T19:02:03.708Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101614213510204563567",
								"stateTimestamp": "2025-02-03T19:02:11.565Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:03.711Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "106643648486889104973",
					"feedback": "",
					"studentEmail": "348588096@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Veznu Premathas",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NjA5MTg4NzM2NFpa",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"id": "Cg0IhKbr2BYQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-03T19:02:25.446Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106643648486889104973",
								"stateTimestamp": "2025-02-03T19:02:28.166Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:25.479Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "107676755417854538820",
					"studentEmail": "349045377@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Nathan Ji",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NzU2MjQ1NzYzNVpa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-03T19:01:47.477Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107676755417854538820",
								"stateTimestamp": "2025-02-03T19:01:53.969Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Io-SHlhwQ4NWG_7kV",
					"submittedAt": "2025-02-03T19:01:47.514Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "101394730938804923153",
					"feedback": "",
					"studentEmail": "348606054@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Clark Chen",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/ODUxMTE3NjA4M1pa",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-03T19:01:59.723Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101394730938804923153",
								"stateTimestamp": "2025-02-03T19:02:08.304Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ik_u42h8Q4NWG_7kV",
					"submittedAt": "2025-02-03T19:01:59.725Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "115626057019275215839",
					"studentEmail": "349541300@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Edward Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MTcxODk0MTc0NTVa",
					"studentWork": "Selected: iPhone",
					"id": "Cg0I7-PGhEAQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-03T19:01:52.259Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115626057019275215839",
								"stateTimestamp": "2025-02-03T19:02:03.429Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:01:52.261Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "106702075817947945830",
					"studentEmail": "348611500@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Leo So",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MTcyNzIwNjU1ODNa",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-03T19:04:34.525Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "106702075817947945830",
								"stateTimestamp": "2025-02-03T19:04:43.691Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ir5z7q0AQ4NWG_7kV",
					"submittedAt": "2025-02-03T19:04:34.529Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "115009994018138969054",
					"feedback": "",
					"studentEmail": "349932921@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Mark Ku",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MTgyNjUwNDQ4OTNa",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-03T19:01:48.116Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115009994018138969054",
								"stateTimestamp": "2025-02-03T19:01:53.114Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0Ine-5hUQQ4NWG_7kV",
					"submittedAt": "2025-02-03T19:01:48.118Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "105982258071886610739",
					"feedback": "",
					"studentEmail": "349781427@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Android",
						"structuredData": {
							"selectedAnswer": "Android"
						}
					},
					"late": false,
					"studentName": "Carmen Cheung",
					"studentWork": "Selected: Android",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/MjQ1MTU5Mjc1MDZa",
					"id": "Cg0I0ruNqlsQ4NWG_7kV",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-03T19:01:56.684Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "105982258071886610739",
								"stateTimestamp": "2025-02-03T19:02:09.450Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:01:56.690Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "101472071522836988061",
					"studentEmail": "349683599@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Sena Godek",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/Mjc4ODkyOTc5ODBa",
					"studentWork": "Selected: iPhone",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-03T19:02:54.675Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101472071522836988061",
								"stateTimestamp": "2025-02-03T19:03:00.539Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg0IvNTT8mcQ4NWG_7kV",
					"submittedAt": "2025-02-03T19:02:54.679Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "107600481194027020763",
					"feedback": "",
					"studentEmail": "350794947@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Saiful Shaik",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NDk4MDA5MTEwMzM3",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"id": "Cg4Iwe6fnb8OEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-03T19:01:53.802Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107600481194027020763",
								"stateTimestamp": "2025-02-03T19:01:58.253Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:01:53.805Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "104593047842018851679",
					"studentEmail": "350797049@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "John Ning",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NDk4NDQ5NzgwMTc5",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"id": "Cg4I05uw78AOEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-03T19:03:48.596Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "104593047842018851679",
								"stateTimestamp": "2025-02-03T19:03:55.473Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:03:48.599Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "117262722973198948166",
					"studentEmail": "350826681@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Nereyal Jeyakumar",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NDk4NDU4OTkyMTg2",
					"attachmentCount": 0,
					"studentWork": "Selected: iPhone",
					"id": "Cg4Iurzi88AOEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-03T19:02:00.454Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "117262722973198948166",
								"stateTimestamp": "2025-02-03T19:02:06.754Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:00.457Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "101721674440588752421",
					"feedback": "",
					"studentEmail": "349581918@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Android",
						"structuredData": {
							"selectedAnswer": "Android"
						}
					},
					"late": false,
					"studentName": "Cayden Chiu",
					"studentWork": "Selected: Android",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NDk4NDYwMTE3MTgy",
					"id": "Cg4IvpGn9MAOEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-03T19:02:00.445Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "101721674440588752421",
								"stateTimestamp": "2025-02-03T19:02:11.747Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:00.449Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "107302250831066714187",
					"feedback": "",
					"studentEmail": "440002825@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Owen Kung",
					"studentWork": "Selected: iPhone",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NTAxMzUxNzM3NzAx",
					"attachmentCount": 0,
					"id": "Cg4I5dKR18sOEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-03T19:02:54.898Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "107302250831066714187",
								"stateTimestamp": "2025-02-03T19:03:01.439Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:54.901Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "102099373101721031728",
					"studentEmail": "440021905@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: Android",
						"structuredData": {
							"selectedAnswer": "Android"
						}
					},
					"late": false,
					"studentName": "Clifton Lin",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NTI0MTQzMDA0Nzc1",
					"studentWork": "Selected: Android",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-03T19:02:48.493Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102099373101721031728",
								"stateTimestamp": "2025-02-03T19:02:56.615Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4I55juyqAPEODVhv-5FQ",
					"submittedAt": "2025-02-03T19:02:48.529Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "109110963825415956180",
					"studentEmail": "440027909@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Jennifer Zheng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NjQ2MjgxMTg1NTE3",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"id": "Cg4I7ZHxyucSEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-03T19:02:32.968Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "109110963825415956180",
								"stateTimestamp": "2025-02-03T19:02:40.088Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:02:32.972Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "115055209797540041904",
					"studentEmail": "440029897@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: Android",
						"structuredData": {
							"selectedAnswer": "Android"
						}
					},
					"late": false,
					"studentName": "Lionson Meng",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NjQ4MTIyNzg2MjM1",
					"studentWork": "Selected: Android",
					"attachmentCount": 0,
					"id": "Cg4Iu8ODue4SEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-03T19:01:51.116Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "115055209797540041904",
								"stateTimestamp": "2025-02-03T19:02:00.380Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-03T19:01:51.120Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "111100032418663696789",
					"studentEmail": "440030068@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Moses He",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NjYyOTcxNzQ3ODk3",
					"studentWork": "Selected: iPhone",
					"id": "Cg4IuZzI4aUTEODVhv-5FQ",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-04T18:52:54.702Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "111100032418663696789",
								"stateTimestamp": "2025-02-04T18:53:00.002Z",
								"state": "TURNED_IN"
							}
						}
					],
					"submittedAt": "2025-02-04T18:52:54.861Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"feedback": "",
					"studentId": "102479132795602540628",
					"studentEmail": "440037784@gapps.yrdsb.ca",
					"extractedContent": {
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"images": [],
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Steven Wang",
					"attachmentCount": 0,
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NzA1MzE2NjQzOTg3",
					"studentWork": "Selected: iPhone",
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-03T19:02:27.433Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "102479132795602540628",
								"stateTimestamp": "2025-02-03T19:02:33.789Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Ik8mXwcMUEODVhv-5FQ",
					"submittedAt": "2025-02-03T19:02:27.463Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				},
				{
					"aiProcessingStatus": {
						"lastProcessedAt": "2025-08-27T14:54:12.322Z",
						"processingErrors": [],
						"readyForGrading": true,
						"contentExtracted": true
					},
					"maxScore": 100,
					"assignmentId": "737121774304",
					"studentId": "103612229036956651130",
					"feedback": "",
					"studentEmail": "341207876@gapps.yrdsb.ca",
					"extractedContent": {
						"images": [],
						"metadata": {
							"extractionErrors": [],
							"submissionType": "multiple_choice",
							"totalAttachments": 0,
							"attachmentTypes": []
						},
						"text": "Selected: iPhone",
						"structuredData": {
							"selectedAnswer": "iPhone"
						}
					},
					"late": false,
					"studentName": "Vivian Li",
					"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw/mc/NzM3MTIxNzc0MzA0/submissions/by-status/and-sort-last-name/student/NzEwNzk0ODIwNjg3",
					"studentWork": "Selected: iPhone",
					"attachmentCount": 0,
					"submissionHistory": [
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-03T19:02:03.260Z",
								"state": "CREATED"
							}
						},
						{
							"stateHistory": {
								"actorUserId": "103612229036956651130",
								"stateTimestamp": "2025-02-03T19:02:09.404Z",
								"state": "TURNED_IN"
							}
						}
					],
					"id": "Cg4Iz_iw9dcUEODVhv-5FQ",
					"submittedAt": "2025-02-03T19:02:03.263Z",
					"assignmentName": "What phone do you use?",
					"status": "submitted"
				}
			],
			"name": "11 CS P5",
			"teacherGroupEmail": "11_CS_P5_05_teachers_5129f805@gapps.yrdsb.ca",
			"alternateLink": "https://classroom.google.com/c/NzM3MTIzMjc5MzYw",
			"id": "737123279360",
			"guardianNotificationSettings": {
				"enabled": true
			}
		}
	]
}
